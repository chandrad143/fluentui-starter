{"version":3,"sources":["../../src/components/DetailsList/DetailsList.types.ts","../../src/DelayedRender.tsx","../../src/selection/Selection.types.ts","../../src/components/GroupedList/GroupedList.types.ts","../../src/components/GroupedList/GroupSpacer.tsx","../../src/renderFunction/composeRenderFunction.tsx","../../src/components/Check/Check.base.tsx","../../src/components/Check/Check.styles.ts","../../src/components/Check/Check.tsx","../../src/components/DetailsList/DetailsRow.styles.ts","../../src/components/DetailsList/DetailsHeader.styles.ts","../../src/components/DetailsList/DetailsRowCheck.styles.ts","../../src/components/DetailsList/DetailsRowCheck.tsx","../../src/components/DetailsList/DetailsHeader.types.ts","../../src/utilities/dragdrop/DragDropHelper.tsx","../../src/components/DetailsList/DetailsColumn.base.tsx","../../src/components/DetailsList/DetailsColumn.styles.ts","../../src/components/DetailsList/DetailsColumn.ts","../../src/components/DetailsList/DetailsHeader.base.tsx","../../src/components/DetailsList/DetailsHeader.ts","../../src/components/DetailsList/DetailsRowFields.tsx","../../src/components/DetailsList/DetailsRow.base.tsx","../../src/components/DetailsList/DetailsRow.ts","../../src/utilities/selection/SelectionZone.tsx","../../src/selection/Selection.ts","../../src/components/GroupedList/GroupedList.styles.ts","../../src/components/Spinner/Spinner.types.ts","../../src/components/GroupedList/GroupHeader.styles.ts","../../src/components/Spinner/Spinner.base.tsx","../../src/components/Spinner/Spinner.styles.tsx","../../src/components/Spinner/Spinner.tsx","../../src/components/GroupedList/GroupHeader.base.tsx","../../src/components/GroupedList/GroupHeader.ts","../../src/components/GroupedList/GroupShowAll.styles.ts","../../src/components/GroupedList/GroupShowAll.base.tsx","../../src/components/GroupedList/GroupShowAll.ts","../../src/components/GroupedList/GroupFooter.styles.ts","../../src/components/GroupedList/GroupFooter.base.tsx","../../src/components/GroupedList/GroupFooter.ts","../../src/components/List/List.types.ts","../../src/components/List/List.tsx","../../src/components/GroupedList/GroupedListSection.tsx","../../src/components/GroupedList/GroupedList.base.tsx","../../src/components/GroupedList/GroupedList.ts","../../src/dom/getRect.ts","../../src/utilities/decorators/withViewport.tsx","../../src/utilities/groupedList/GroupedListUtility.tsx","../../src/components/DetailsList/DetailsList.base.tsx","../../src/components/DetailsList/DetailsList.styles.ts","../../src/components/DetailsList/DetailsList.ts","../../src/components/Tooltip/TooltipHost.types.ts","../../src/components/Tooltip/Tooltip.types.ts","../../src/components/Tooltip/Tooltip.base.tsx","../../src/components/Tooltip/Tooltip.tsx","../../src/components/Tooltip/Tooltip.styles.ts","../../src/components/Tooltip/TooltipHost.base.tsx","../../src/overflow.ts","../../src/components/Tooltip/TooltipHost.styles.ts","../../src/components/Tooltip/TooltipHost.ts"],"names":["ColumnActionsMode","ConstrainMode","ColumnDragEndLocation","DetailsListLayoutMode","CheckboxVisibility","props","state","isRendered","componentDidMount","delay","this","_timeoutId","window","setTimeout","setState","componentWillUnmount","clearTimeout","render","only","children","defaultProps","SelectionMode","SelectionDirection","SELECTION_CHANGE","CollapseAllVisibility","count","indentWidth","role","width","className","style","display","memoizer","outer","inner","innerMemoizer","defaultRender","innerProps","outerProps","composeRenderFunction","getClassNames","classNamesFunction","CheckBase","ref","checked","theme","styles","useFastIcons","classNames","IconComponent","FontIcon","Icon","root","iconName","circle","check","displayName","CheckGlobalClassNames","checkHost","Check","styled","height","checkBoxHeight","palette","semanticColors","fonts","isRTL","sharedCircleCheck","fontSize","position","left","top","textAlign","alignItems","justifyContent","verticalAlign","medium","lineHeight","userSelect","selectors","content","right","bottom","borderRadius","opacity","background","bodyBackground","themePrimary","color","neutralSecondary","white","fontWeight","border","undefined","scope","DetailsRowGlobalClassNames","compact","cell","cellAnimation","cellCheck","cellMeasurer","listCellFirstChild","isContentUnselectable","isSelected","isCheckVisible","isRowHeader","fields","DEFAULT_CELL_STYLE_PROPS","cellLeftPadding","cellRightPadding","cellExtraRightPadding","DEFAULT_ROW_HEIGHTS","rowHeight","compactRowHeight","values","rowVerticalPadding","compactRowVerticalPadding","GlobalClassNames","tooltipHost","cellIsCheck","collapseButton","isCollapsed","isAllSelected","isSelectAllHidden","isResizingColumn","cellSizer","isResizing","dropHintCircleStyle","dropHintCaretStyle","dropHintLineStyle","cellTitle","cellName","filterChevron","gripperBarVertical","checkTooltip","cellStyleProps","bodyText","boxSizing","padding","margin","whiteSpace","textOverflow","isDisabled","isHeader","FastCheck","_defaultCheckboxRender","checkboxProps","_fastDefaultCheckboxRender","SelectAllVisibility","DetailsRowCheck","isVisible","canSelect","anySelected","selected","onRenderDetailsCheckbox","buttonProps","defaultCheckboxRender","onRenderCheckbox","detailsCheckboxProps","divProps","getNativeElementProps","css","tabIndex","small","cursor","backgroundColor","params","_selection","selection","_dragEnterCounts","_activeTargets","_lastId","_initialized","dispose","_events","subscribe","events","dragDropOptions","EventGroup","doc","getDocument","on","body","_onMouseUp","bind","_onDocumentMouseUp","onDragStart","onDragLeave","onDragEnter","onDragEnd","onDrop","onDragOver","onMouseDown","isDraggable","isDroppable","activeTarget","key","handlers","eventMap","context","dragDropTarget","options","_isDraggable","_isDroppable","handler","callback","eventName","push","event","isHandled","preventDefault","data","_onMouseDown","_onDragEnd","index","getSelection","_isDragging","dataTransfer","setData","id","target","off","unsubscribe","_dragData","Object","keys","dropTarget","raise","documentElement","_onMouseMove","buttons","_isChild","_onMouseLeave","button","clientX","clientY","eventTarget","dragTarget","parentElement","childElement","canDrag","dragContext","canDrop","column","isIconOnly","accessibleLabel","name","_root","_onRenderFilterIcon","columnProps","iconProps","_onRenderColumnHeaderTooltip","tooltipHostProps","hostClassName","_onColumnClick","ev","onColumnClick","columnActionsMode","disabled","_onDragStart","item","itemIndex","selectedItems","_classNames","_updateHeaderDragInfo","current","classList","add","borderWhileDragging","_async","noBorderWhileDragging","remove","setDraggedItemIndex","updateDragInfo","_onColumnContextMenu","onColumnContextMenu","_onRootMouseDown","stopPropagation","initializeComponentRef","Async","columnIndex","parentId","onRenderColumnHeaderTooltip","headerClassName","iconClassName","isActionable","isEmpty","isIconVisible","isSorted","isGrouped","isFiltered","isPadded","transitionDurationDrag","transitionDurationDrop","onRenderFilterIcon","onRenderHeader","hasInnerButton","accNameDescription","_hasAccessibleLabel","isSortedDescending","draggable","calculatedWidth","gripperBarVerticalStyle","cellTooltip","setAriaDescribedBy","ariaLabel","onContextMenu","onClick","hasDropdown","isMenuOpen","nearIcon","sortIcon","_renderAccessibleLabel","dragDropHelper","_addDragDropHandling","isDropped","borderAfterDropping","noBorderAfterDropping","TRANSITION_DURATION_DROP","_dragDropSubscription","componentDidUpdate","_getColumnDragDropOptions","selectionIndex","updateDropState","filterAriaLabel","sortAscendingAriaLabel","sortDescendingAriaLabel","groupAriaLabel","DetailsColumn","colors","iconForegroundColor","bodySubtext","headerForegroundColor","headerBackgroundColor","dropdownChevronForegroundColor","resizerColor","neutralTertiaryAlt","nearIconStyle","paddingLeft","outline","borderAfterDragOrDrop","outlineColor","listHeaderBackgroundHovered","listHeaderBackgroundPressed","paddingRight","neutralTertiary","flexDirection","overflow","alignContent","maxHeight","flexWrap","flex","semibold","transition","NO_COLUMNS","_rootElement","_rootComponent","_draggedColumnIndex","_dropHintDetails","_updateDroppingState","newValue","type","_resetDropHints","_onDragOver","_computeDropHintToBeShown","_onDrop","columnReorderProps","_getColumnReorderProps","targetIndex","_currentDropHintIndex","isValidDrop","_isValidCurrentDropHintIndex","_onDropIndexInfo","sourceIndex","onColumnDrop","dragDropDetails","draggedIndex","handleColumnReorder","_updateDragInfo","_isCheckboxColumnHidden","_getDropHintPositions","onColumnDragStart","onColumnDragEnd","columnDragEndLocation","_isEventOnHeader","dropLocation","prevRef","columns","prevX","prevMid","frozenColumnCountFromStart","frozenColumnCountFromEnd","i","length","dropHintElement","querySelectorAll","offsetLeft","newMid","originX","startX","endX","dropHintElementRef","isRtl","eventXRelativePosition","getBoundingClientRect","currentDropHintIndex","_liesBetween","currentIndex","lastValidColumn","indexToUpdate","_isBefore","_isAfter","startIndex","endIndex","middleIndex","Math","ceil","_updateDropHintElement","_renderColumnSizer","columnResizeDetails","isResizable","_stopPropagation","onBlur","_onSizerBlur","cellSizerStart","cellSizerEnd","cellIsResizing","onDoubleClick","_onSizerDoubleClick","_onSelectAllClicked","toggleAllSelected","columnIndexAttr","getAttribute","Number","columnMinWidth","_onRootMouseMove","isSizing","_onRootKeyDown","onColumnResized","increment","which","KeyCodes","enter","shiftKey","_onSizerMouseMove","onColumnIsSizingChanged","movement","_onSizerMouseUp","_onToggleCollapseAll","onToggleCollapseAll","newCollapsed","isAllCollapsed","_id","getId","_dragDropHelper","minimumPixelsForDrag","_onSelectionChanged","_subscriptionObject","_getHeaderDragDropOptions","prevProps","previousColumns","ariaLabelForToggleAllGroupsButton","ariaLabelForSelectAllCheckbox","selectAllVisibility","ariaLabelForSelectionColumn","selectionMode","groupNestingDepth","checkboxVisibility","showCheckbox","none","isCheckboxHidden","hidden","isCheckboxAlwaysVisible","always","FocusZone","componentRef","elementRef","onMouseMove","direction","horizontal","multiple","collapseAllVisibility","visible","cellIsGroupExpander","map","_renderDropHint","_renderColumnDivider","Layer","sizingOverlay","onMouseUp","focus","columnReorderOptions","element","displayProperty","childNodes","clientRect","header","onRenderDivider","dropHintIndex","dropHintStyle","onColumnAutoResized","rtl","a","b","DetailsHeader","cellSizerFadeInStyles","cellStyles","minWidth","paddingBottom","paddingTop","borderBottom","bodyDivider","cellWrapperPadded","neutralLighter","neutralLight","cellIsActionable","cellIsEmpty","zIndex","boxShadow","marginLeft","transformOrigin","transform","visibility","columnStartIndex","rowClassNames","onRenderItemColumn","getCellValueKey","cellsByColumn","enableUpdateAnimations","rowHeaderId","cellValueKeysRef","cellValueKeys","onRender","getValueKey","cellContentsRender","value","fieldName","toString","getCellText","previousValueKey","cellValueKey","showAnimation","isMultiline","cellPadded","cellUnpadded","_cellMeasurer","_focusZone","selectionState","getSelectionState","isDropping","dragDropEvents","_droppingClassNames","columnMeasureInfo","getDerivedStateFromProps","nextProps","previousState","onDidMount","_getRowDragDropOptions","_onDidMountCalled","previousProps","newWidth","onMeasureDone","onWillUnmount","shouldComponentUpdate","nextState","useReducedRowRenderer","newSelectionState","flatIndexOffset","onRenderCheck","_onRenderCheck","rowWidth","getRowAriaLabel","getRowAriaDescribedBy","checkButtonAriaLabel","checkboxCellClassName","rowFieldsAs","RowFields","group","isSelectionModal","droppingClassName","ariaDescribedBy","canSelectItem","ariaSelected","ariaPositionInSet","ariaSetSize","_rowClassNames","rowFields","allowFocusRoot","checkCell","checkCover","measureCell","maxWidth","forceIntoFirstElement","isIndexSelected","isModal","DetailsRow","neutralPrimary","neutralDark","neutralQuaternaryAlt","focusBorder","defaultHeaderText","defaultMetaText","defaultBackground","defaultHoverHeaderText","defaultHoverMetaText","defaultHoverBackground","selectedHeaderText","selectedMetaText","selectedBackground","selectedHoverHeaderText","selectedHoverMetaText","selectedHoverBackground","focusHeaderText","focusMetaText","focusBackground","focusHoverBackground","selectedStyles","inset","borderColor","highContrastStyle","borderTop","cannotSelectStyles","rootCompactStyles","minHeight","cellCompactStyles","defaultCellStyles","fadeIn400","flexShrink","flexGrow","slideLeftIn40","marginTop","wordBreak","SELECTION_INDEX_ATTRIBUTE_NAME","SELECTION_TOGGLE_ATTRIBUTE_NAME","SELECTION_INVOKE_ATTRIBUTE_NAME","SELECTALL_TOGGLE_ALL_ATTRIBUTE_NAME","ignoreNextFocus","_handleNextFocus","_onSelectionChange","_onMouseDownCapture","document","activeElement","elementContains","_hasAttribute","getParent","_onFocus","isToggleModifierPressed","_isCtrlPressed","_isMetaPressed","_getSelectionMode","_shouldHandleFocus","isToggle","itemRoot","_findItemRoot","_getItemIndex","setIndexSelected","enterModalOnTouch","_isTouch","setModal","_setIsTouch","isSelectedOnFocus","_onItemSurfaceClick","_updateModifiers","_isSelectionDisabled","_shouldAutoSelect","_isShiftPressed","_onInvokeMouseDown","disableAutoSelectOnInputElements","tagName","_onTouchStartCapture","_onClick","enableTouchInvocationTarget","isSelectionDisabled","_onToggleAllClick","_onToggleClick","_onInvokeClick","_onContextMenu","onItemContextMenu","getItems","nativeEvent","_onDoubleClick","onItemInvoked","_isInputElement","_onKeyDownCapture","_onKeyDown","isSelectAllKey","isClearSelectionKey","escape","setAllSelected","getSelectedCount","space","prevState","win","getWindow","_findScrollParentAndTryClearOnEmptyClick","onKeyDown","onKeyDownCapture","onMouseDownCapture","onFocusCapture","setChangeEvents","toggleIndexSelected","single","_isTabPressed","selectToIndex","_clearAndSelectIndex","scrollParent","_tryClearOnEmptyClick","Node","contains","selectionPreservedOnEmptyClick","_isNonHandledClick","ctrlKey","metaKey","keyCode","tab","indexValue","attributeName","handleFocus","_shouldHandleFocusTimeoutId","isTouch","_isTouchTimeoutId","mode","onSelectionChanged","getKey","items","_getKey","defaultGetKey","_changeEventSuppressionCount","_exemptedCount","_anchoredIndex","_unselectableCount","_canSelectItem","_isModal","setItems","isEnabled","suppressChange","_hasChanged","_change","shouldClear","newKeyToIndexMap","newUnselectableIndices","hasSelectionChanged","_setAllSelected","newExemptedIndicies","newExemptedCount","indexProperty","_exemptedIndices","hasOwnProperty","exemptKey","_items","newIndex","_isAllSelected","_keyToIndexMap","_unselectableIndices","_selectedItems","_updateCount","getSelectedIndices","_selectedIndices","isRangeSelected","fromIndex","selectableCount","min","isKeySelected","setKeySelected","shouldAnchor","max","isExempt","selectToKey","clearSelection","anchorIndex","toggleKeySelected","toggleRangeSelected","preserveModalState","SpinnerSize","SpinnerType","link","listCell","beziers","dropIcon","expand","title","iconTag","size","ariaLive","label","labelPosition","statusMessage","nativeProps","styleSize","large","DelayedRender","screenReaderText","spinAnimation","memoize","Spinner","themeLight","borderTopColor","animationName","animationDuration","animationIterationCount","animationTimingFunction","xSmall","_toggleCollapse","onToggleCollapse","isGroupLoading","newLoadingVisible","isLoadingVisible","_onKeyUp","onGroupHeaderKeyUp","defaultPrevented","shouldOpen","_onToggleSelectGroupClick","onToggleSelectGroup","_onHeaderClick","onGroupHeaderClick","_onRenderTitle","ariaColSpan","headerCount","hasMoreData","groupLevel","viewport","loadingText","onRenderTitle","onRenderGroupHeaderCheckbox","isCollapsedGroupSelectVisible","expandButtonProps","expandButtonIcon","selectAllButtonProps","ariaPosInSet","ariaRowIndex","canSelectGroup","isSelectionCheckVisible","currentlySelected","onKeyUp","groupHeaderContainer","expandIsCollapsed","GroupHeader","finalRowHeight","checkExpandResetStyles","listBackground","listItemBackgroundHovered","actionLinkHovered","durationValue4","durationValue1","transitionDelay","durationValue3","listItemBackgroundChecked","listItemBackgroundCheckedHovered","neutralQuaternary","mediumPlus","regular","durationValue2","GroupShowAll","showAllLinkText","onToggleSummarize","memoizedOnClick","Link","GroupFooter","footerText","ScrollToMode","SPACER_KEY_PREFIX","EMPTY_RECT","_measurePageRect","_measureSurfaceRect","_measureScrollRect","_surface","_pageRefs","_getDerivedStateFromProps","renderCount","version","_resetRequiredWindows","_requiredRect","_measureVersion","_invalidatePageCache","_updatePages","_onRenderRoot","rootRef","surfaceElement","_onRenderSurface","surfaceRef","pageElements","_onRenderPage","pageProps","onRenderCell","cellRole","cells","itemKey","ignoreScrollingState","isScrolling","pages","_estimatedPageHeight","_totalEstimates","_requiredWindowsAhead","_requiredWindowsBehind","_onAsyncScroll","debounce","leading","maxWait","_onAsyncIdle","_onAsyncResize","_onScrollingDone","_cachedPageHeights","_focusedIndex","_pageCache","scrollToIndex","measureItem","scrollToMode","_getRenderCount","allowedRect","_allowedRect","scrollTop","itemsPerPage","pageSpecification","_getPageSpecification","pageHeight","itemCount","_scrollElement","scrollRect","scrollWindow","itemPositionWithinPage","itemIndexInPage","scrollBottom","getStartItemIndexInView","page","isSpacer","_scrollTop","floor","totalRowHeight","_onScroll","finalProps","finalState","getPageHeight","_updatePageMeasurements","_materializedRect","_hasCompletedFirstRender","onPagesUpdated","newProps","newState","oldPages","newPages","oldPage","newPage","forceUpdate","_updateRenderRects","getTotalListHeight","_surfaceRect","onRenderSurface","onRenderRoot","_renderPage","finalOnRenderSurface","_shouldVirtualize","onShouldVirtualize","cachedPage","usePageCache","pageElement","pageStyle","_getPageStyle","newRef","getPageStyle","indexString","innerRect","outerRect","renderedWindowsAhead","renderedWindowsBehind","requiredWindowsAhead","requiredWindowsBehind","windowsAhead","windowsBehind","newListState","_buildPages","oldListPages","_notifyPageChanges","onPageAdded","onPageRemoved","renderedIndexes","_onPageAdded","_onPageRemoved","heightChanged","_measurePage","hasChangedHeight","cachedHeight","measureVersion","newClientRect","clientWidth","clientHeight","round","materializedRect","pageTop","currentSpacer","focusedIndex","shouldVirtualize","isFirstRender","pageData","targetRect","newRect","pageBottom","isPageRendered","isPageInAllowedRange","isPageInRequiredRange","itemsInPage","_createPage","slice","_visibleRect","visibleRect","getPageSpecification","_getItemCountForPage","_getPageHeight","visibileRect","getItemCountForPage","pageKey","surfaceRect","scrollHeight","_scrollHeight","abs","visibleTop","innerHeight","_expandRect","containsFocus","rect","pagesBefore","pagesAfter","_list","_subGroupRefs","_droppingClassName","_onRenderGroupHeader","_onRenderGroupShowAll","_onRenderGroupFooter","_renderSubGroup","subGroup","subGroupIndex","eventsToRegister","getGroupItemLimit","groupProps","headerProps","showAllProps","footerProps","listProps","onRenderGroupHeader","onRenderGroupShowAll","onRenderGroupFooter","nestingDepth","level","showEmptyGroups","GroupedListSection","_getGroupKey","groupIndex","groups","_getGroupDragDropOptions","isGroup","newIsDropping","groupedListClassNames","Infinity","isShowAllVisible","isShowingAll","hasNestedGroups","dividerProps","ariaControlsProps","groupedListId","groupHeaderProps","groupShowAllProps","groupFooterProps","canDragGroups","_getDroppingClassName","_returnOne","_onRenderGroup","forceListUpdate","subGroupCount","pageRefs","String","_onRenderGroupCell","groupIsDropping","ROW_HEIGHT","COMPACT_ROW_HEIGHT","_renderGroup","_onToggleSelectGroup","_onToggleCollapse","_onToggleSummarize","_getGroupNestingDepth","finalListProps","onRenderShowAll","onRenderFooter","_getDefaultGroupItemLimit","_getGroupItemLimit","_getGroupHeight","getGroupHeight","pageGroup","_updateIsSomeGroupExpanded","_isInnerZoneKeystroke","_isSomeGroupExpanded","_computeIsSomeGroupExpanded","listVersion","shouldForceUpdates","isAllGroupsCollapsed","_setGroupsCollapsedState","focusZoneProps","rootListProps","shouldEnterInnerZone","vertical","_forceListUpdates","toggleCollapseAll","allCollapsed","groupsInLevel","some","onGroupExpandStateChanged","newIsSomeGroupExpanded","isHeaderVisible","GroupedList","getRect","innerWidth","withViewport","ComposedComponent","_registerResizeObserver","_viewportResizeObserver","ResizeObserver","observe","_unregisterResizeObserver","disconnect","_updateViewport","withForceUpdate","viewportElement","_resizeAttempts","_composedComponentInstance","skipViewportMeasures","disableResizeObserver","_isResizeObserverAvailable","previousSkipViewportMeasures","newViewport","_updateComposedComponentRef","BaseDecorator","MIN_COLUMN_WIDTH","ariaLabelForListHeader","constrainMode","isPlaceholderData","layoutMode","onColumnHeaderClick","onColumnHeaderContextMenu","selectionZoneProps","ariaLabelForGrid","rowElementEventMap","shouldApplyApplicationRole","adjustedColumns","isSomeGroupExpanded","listRef","focusZoneRef","groupedListRef","headerRef","onRowDidMount","onRowWillUnmount","disableSelectionZone","onActiveRowChanged","onRenderMissingItem","checkButtonGroupAriaLabel","enterModalSelectionOnTouch","onRenderDefaultRow","selectionZoneRef","defaultRole","rowId","getGroupNestingDepth","groupedDetailsListIndexMap","indexMap","rowCount","numGroupHeaders","numOfGroupHeadersBeforeItem","totalRowCount","useGroupedDetailsListIndexMap","additionalListProps","defaultOnRenderDetailsHeader","detailsHeaderProps","defaultOnRenderDetailsFooter","propsOnRenderDetailsHeader","onRenderDetailsHeader","propsOnRenderDetailsFooter","onRenderDetailsFooter","detailsFooterProps","columnReorderOnDragEnd","finalDropLocation","outside","surface","total","remainingGroups","currentGroup","pop","colCount","isFixed","fixedColumns","isHorizontalConstrained","horizontalConstrained","onRenderDetailsGroupFooter","finalOnRenderDetailsGroupFooter","onRenderDetailsGroupHeader","finalOnRenderDetailsGroupHeader","groupKey","ariaRowCount","finalGroupProps","sumColumnWidths","useConst","totalWidth","forEach","finalOnRenderRow","onRenderRow","rowProps","onRenderListCell","isRightArrow","focusZone","onActiveElementChanged","shouldRaiseClicks","list","onHeaderKeyDown","down","onContentKeyDown","up","altKey","headerWrapper","contentWrapper","_header","_groupedList","_selectionZone","_onRenderRow","setKey","newViewportWidth","oldViewportWidth","shouldResetSelection","_initialFocusedIndex","initialFocusedIndex","focusedItemIndex","_adjustColumns","_onGroupExpandStateChanged","_onColumnIsSizingChanged","_onRowDidMount","row","_getItemKey","_activeRows","_setFocusToRowIfPending","_onRowWillUnmount","collapsed","_onColumnResized","resizingColumn","resizingColumnIndex","newCalculatedWidth","onColumnResize","_rememberCalculatedWidth","_onColumnAutoResized","totalCount","_onActiveRowChanged","el","onActiveItemChanged","_onBlur","_columnOverrides","lastWidth","_getAdjustedColumns","focusIndex","_setFocusToRow","_notifyColumnsResized","onDidUpdate","currentWidth","viewportWidth","newItems","newColumns","lastSelectionMode","canResizeColumns","sortedColumnKey","groupedColumnKey","firstItem","propName","isCollapsable","isCollapsible","clickable","buildColumns","_getFixedColumns","_getJustifiedColumns","_getColumnOverride","flexMargin","remainingWidth","sumProportionalWidth","col","getPaddedWidth","rowCheckWidth","groupExpandWidth","widthFraction","newColumn","fullWidth","shrinkWidth","MAX_VALUE","minimumWidth","availableWidth","baseColumn","lastIndex","overflowWidth","originalWidth","splice","isLast","overrides","spaceLeft","justified","onHover","DetailsListBase","paddingOnly","DetailsList","listText","overflowX","overflowY","WebkitOverflowScrolling","TooltipOverflowMode","TooltipDelay","_onRenderContent","subText","calloutProps","directionalHint","directionalHintForRTL","onRenderContent","targetElement","beakWidth","gapSpace","Callout","onMouseEnter","onMouseLeave","DirectionalHint","topCenter","isBeakVisible","setInitialFocus","doNotLayer","Tooltip","effects","tooltipGapSpace","sqrt","devicePixelRatio","fadeIn200","menuBackground","elevation8","menuItemText","wordWrap","overflowWrap","_tooltipHost","_defaultTooltipId","show","_toggleTooltip","dismiss","_hideTooltip","_getTargetElement","overflowMode","Parent","Self","_onTooltipMouseEnter","TooltipHostBase","_currentVisibleTooltip","overflowElement","scrollWidth","hasHorizontalOverflow","hasVerticalOverflow","portalContainsElement","_clearDismissTimer","_clearOpenTimer","zero","isAriaPlaceholderRendered","delayTime","_getDelayTime","_openTimerId","_onTooltipMouseLeave","closeDelay","_dismissTimerId","_onTooltipKeyDown","isTooltipVisible","onTooltipToggle","long","tooltipProps","tooltipId","isContentPresent","showTooltip","onBlurCapture","onDismiss","ariaPlaceholder","TooltipHost"],"mappings":"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","file":"static/js/4.61ce3dd2.chunk.js","sourcesContent":["import * as React from 'react';\nimport { DetailsListBase } from './DetailsList.base';\nimport { ISelection, SelectionMode, ISelectionZoneProps } from '../../Selection';\nimport { IRefObject, IBaseProps, IRenderFunction, IStyleFunctionOrObject } from '../../Utilities';\nimport { IDragDropEvents, IDragDropContext, IDragDropHelper, IDragDropOptions } from '../../DragDrop';\nimport { IGroup, IGroupRenderProps, IGroupDividerProps, IGroupedListProps } from '../GroupedList/index';\nimport { IDetailsRowProps, IDetailsRowBaseProps } from '../DetailsList/DetailsRow';\nimport { IDetailsHeaderProps, IDetailsHeaderBaseProps } from './DetailsHeader';\nimport { IDetailsFooterProps, IDetailsFooterBaseProps } from './DetailsFooter.types';\nimport { IWithViewportProps, IViewport } from '../../utilities/decorators/withViewport';\nimport { IList, IListProps, ScrollToMode } from '../../List';\nimport { ITheme, IStyle } from '../../Styling';\nimport { ICellStyleProps, IDetailsItemProps } from './DetailsRow.types';\nimport { IDetailsCheckboxProps } from './DetailsRowCheck.types';\nimport {\n  IDetailsColumnStyleProps,\n  IDetailsColumnProps,\n  IDetailsColumnStyles,\n  IDetailsColumnFilterIconProps,\n} from './DetailsColumn.types';\n\nexport {\n  IDetailsHeaderProps,\n  IDetailsRowBaseProps,\n  IDetailsHeaderBaseProps,\n  IDetailsFooterBaseProps,\n  IDragDropContext,\n  IDragDropEvents,\n  IDragDropHelper,\n  IDragDropOptions,\n  IViewport,\n  IWithViewportProps,\n};\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IDetailsList extends IList {\n  /**\n   * Ensures that the list content is updated. Call this in cases where the list prop updates don't change, but the list\n   * still needs to be re-evaluated. For example, if a sizer bar is adjusted and causes the list width to change,\n   * you can call this to force a re-evaluation. Be aware that this can be an expensive operation and should be\n   * done sparingly.\n   */\n  forceUpdate: () => void;\n\n  /**\n   * Scroll to and focus the item at the given index. focusIndex will call scrollToIndex on the specified index.\n   *\n   * @param index - Index of item to scroll to\n   * @param forceIntoFirstElement - If true, focus will be set to the first focusable child element of the item rather\n   *  than the item itself.\n   * @param measureItem - Optional callback to measure the height of an individual item\n   * @param scrollToMode - Optional setting to determine where in the window the item should be scrolled to\n   * when focused.\n   */\n  focusIndex: (\n    index: number,\n    forceIntoFirstElement?: boolean,\n    measureItem?: (itemIndex: number) => number,\n    scrollToMode?: ScrollToMode,\n  ) => void;\n\n  /**\n   * Get the start index of the page that is currently in view\n   */\n  getStartItemIndexInView: () => number;\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IDetailsListProps extends IBaseProps<IDetailsList>, IWithViewportProps {\n  /** Theme provided by a higher-order component. */\n  theme?: ITheme;\n\n  /** Custom overrides to the themed or default styles. */\n  styles?: IStyleFunctionOrObject<IDetailsListStyleProps, IDetailsListStyles>;\n\n  /**\n   * Callback to access the IDetailsList interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: IRefObject<IDetailsList>;\n\n  /** A key that uniquely identifies the given items. If provided, the selection will be reset when the key changes. */\n  setKey?: string;\n\n  /** The items to render. */\n  items: any[];\n\n  /** Set this to true to indicate that the items being displayed are placeholder data. */\n  isPlaceholderData?: boolean;\n\n  /** Properties to pass through to the List components being rendered. */\n  listProps?: IListProps;\n\n  /** Default index to set focus to once the items have rendered and the index exists. */\n  initialFocusedIndex?: number;\n\n  /** Class name to add to the root element. */\n  className?: string;\n\n  /** Grouping instructions. */\n  groups?: IGroup[];\n\n  /** Override properties to render groups. */\n  groupProps?: IDetailsGroupRenderProps;\n\n  /** Override for the indent width used for group nesting. */\n  indentWidth?: number;\n\n  /** Selection model to track selection state.  */\n  selection?: ISelection;\n\n  /** Controls how/if the details list manages selection. Options include none, single, multiple */\n  selectionMode?: SelectionMode;\n\n  /**\n   * By default, selection is cleared when clicking on an empty (non-focusable) section of the screen.\n   * Setting this value to true overrides that behavior and maintains selection.\n   * @defaultvalue false\n   **/\n  selectionPreservedOnEmptyClick?: boolean;\n\n  /**\n   * Additional props to pass through to the SelectionZone created by default.\n   */\n  selectionZoneProps?: ISelectionZoneProps;\n\n  /** Controls how the columns are adjusted. */\n  layoutMode?: DetailsListLayoutMode;\n\n  /**\n   * Controls the visibility of selection check box.\n   * @defaultvalue CheckboxVisibility.onHover\n   */\n  checkboxVisibility?: CheckboxVisibility;\n\n  /**\n   * Controls the visibility of the header.\n   * @defaultvalue true\n   */\n  isHeaderVisible?: boolean;\n\n  /** column defitions. If none are provided, default columns will be created based on the items' properties. */\n  columns?: IColumn[];\n\n  /** Controls how the list contrains overflow. */\n  constrainMode?: ConstrainMode;\n\n  /** Event names and corresponding callbacks that will be registered to rendered row elements. */\n  rowElementEventMap?: { eventName: string; callback: (context: IDragDropContext, event?: any) => void }[];\n\n  /** Callback for when the list has been updated. Useful for telemetry tracking externally. */\n  onDidUpdate?: (detailsList?: DetailsListBase) => void;\n\n  /**\n   * Callback for when a given row has been mounted. Useful for identifying when a row has been rendered on the page.\n   */\n  onRowDidMount?: (item?: any, index?: number) => void;\n\n  /**\n   * Callback for when a given row has been unmounted.\n   * Useful for identifying when a row has been removed from the page.\n   */\n  onRowWillUnmount?: (item?: any, index?: number) => void;\n\n  /** Callback for when the user clicks on the column header. */\n  onColumnHeaderClick?: (ev?: React.MouseEvent<HTMLElement>, column?: IColumn) => void;\n\n  /** Callback for when the user asks for a contextual menu (usually via right click) from a column header. */\n  onColumnHeaderContextMenu?: (column?: IColumn, ev?: React.MouseEvent<HTMLElement>) => void;\n\n  /** Callback fired on column resize */\n  onColumnResize?: (column?: IColumn, newWidth?: number, columnIndex?: number) => void;\n\n  /** Callback for when a given row has been invoked (by pressing enter while it is selected.) */\n  onItemInvoked?: (item?: any, index?: number, ev?: Event) => void;\n\n  /**\n   * Callback for when the context menu of an item has been accessed.\n   * If undefined or false is returned, `ev.preventDefault()` will be called.\n   */\n  onItemContextMenu?: (item?: any, index?: number, ev?: Event) => void | boolean;\n\n  /**\n   * Callback to override the default row rendering.\n   */\n  onRenderRow?: IRenderFunction<IDetailsRowProps>;\n\n  /**\n   * If provided, will be the \"default\" item column renderer method.\n   * This affects cells within the rows, not the rows themselves.\n   * If a column definition provides its own `onRender` method, that will be used instead of this.\n   */\n  onRenderItemColumn?: (item?: any, index?: number, column?: IColumn) => React.ReactNode;\n\n  /**\n   * If provided, will be the \"default\" item column cell value return.\n   * A column's `getValueKey` can override `getCellValueKey`.\n   */\n  getCellValueKey?: (item?: any, index?: number, column?: IColumn) => string;\n\n  /** Map of callback functions related to row drag and drop functionality. */\n  dragDropEvents?: IDragDropEvents;\n\n  /** Callback for what to render when the item is missing. */\n  onRenderMissingItem?: (index?: number, rowProps?: IDetailsRowProps) => React.ReactNode;\n\n  /** An override to render the details header. */\n  onRenderDetailsHeader?: IRenderFunction<IDetailsHeaderProps>;\n\n  /** An override to render the details footer. */\n  onRenderDetailsFooter?: IRenderFunction<IDetailsFooterProps>;\n\n  /**  If provided, can be used to render a custom checkbox. */\n  onRenderCheckbox?: IRenderFunction<IDetailsListCheckboxProps>;\n\n  /** Viewport info, provided by the `withViewport` decorator. */\n  viewport?: IViewport;\n\n  /**\n   * Callback for when an item in the list becomes active by clicking anywhere inside the row or navigating to it\n   * with the keyboard.\n   */\n  onActiveItemChanged?: (item?: any, index?: number, ev?: React.FocusEvent<HTMLElement>) => void;\n\n  /** Accessible label for the list header. */\n  ariaLabelForListHeader?: string;\n\n  /** Accessible label for the select all checkbox. */\n  ariaLabelForSelectAllCheckbox?: string;\n\n  /** Accessible label for the name of the selection column. */\n  ariaLabelForSelectionColumn?: string;\n\n  /** Callback to get the aria-label string for a given item. */\n  getRowAriaLabel?: (item: any) => string;\n\n  /** Callback to get the aria-describedby IDs (space-separated strings) of elements that describe the item. */\n  getRowAriaDescribedBy?: (item: any) => string;\n\n  /**\n   * Callback to get the item key, to be used in the selection and on render.\n   * Must be provided if sorting or filtering is enabled.\n   */\n  getKey?: (item: any, index?: number) => string;\n\n  /** Accessible label describing or summarizing the list. */\n  ariaLabel?: string;\n\n  /** Accessible label for the row check button, e.g. \"select row\". */\n  checkButtonAriaLabel?: string;\n\n  /** Accessible label for the group header check button, e.g. \"select section\". */\n  checkButtonGroupAriaLabel?: string;\n\n  /** Accessible label for the grid within the list. */\n  ariaLabelForGrid?: string;\n\n  /** An optional margin for proportional columns, to e.g. account for scrollbars when laying out width. */\n  flexMargin?: number;\n\n  /**\n   * Whether the role `application` should be applied to the list.\n   * @defaultvalue false\n   */\n  shouldApplyApplicationRole?: boolean;\n\n  /**\n   * The minimum mouse move distance to interpret the action as drag event.\n   * @defaultvalue 5\n   */\n  minimumPixelsForDrag?: number;\n\n  /**\n   * Whether to render in compact mode.\n   * @defaultvalue false\n   */\n  compact?: boolean;\n\n  /**\n   * Whether to enable render page caching. This is an experimental performance optimization that is off by default.\n   * @defaultvalue false\n   */\n  usePageCache?: boolean;\n\n  /**\n   * Callback to determine whether the list should be rendered in full, or virtualized.\n   *\n   * Virtualization will add and remove pages of items as the user scrolls them into the visible range.\n   * This benefits larger list scenarios by reducing the DOM on the screen, but can negatively affect performance\n   * for smaller lists.\n   *\n   * The default implementation will virtualize when this callback is not provided.\n   */\n  onShouldVirtualize?: (props: IListProps) => boolean;\n\n  /** Class name to add to the cell of a checkbox. */\n  checkboxCellClassName?: string;\n\n  /** Whether the selection zone should enter modal state on touch. */\n  enterModalSelectionOnTouch?: boolean;\n\n  /** Options for column reordering using drag and drop. */\n  columnReorderOptions?: IColumnReorderOptions;\n\n  /** Callback to override default group height calculation used by list virtualization. */\n  getGroupHeight?: IGroupedListProps['getGroupHeight'];\n\n  /**\n   * Whether to re-render a row only when props changed. Might cause regression when depending on external updates.\n   * @defaultvalue false\n   */\n  useReducedRowRenderer?: boolean;\n\n  /**\n   * Props impacting the render style of cells. Since these have an impact on calculated column widths, they are\n   * handled separately from normal theme styling, but they are passed to the styling system.\n   */\n  cellStyleProps?: ICellStyleProps;\n\n  /** Whether to disable the built-in SelectionZone, so the host component can provide its own. */\n  disableSelectionZone?: boolean;\n\n  /** Whether to animate updates */\n  enableUpdateAnimations?: boolean;\n\n  /**\n   * Whether to use fast icon and check components. The icons can't be targeted by customization\n   * but are still customizable via class names.\n   * @defaultvalue true\n   */\n  useFastIcons?: boolean;\n\n  /** Role for the list. */\n  role?: string;\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IColumn {\n  /** A unique key for identifying the column. */\n  key: string;\n\n  /** Name to render on the column header. */\n  name: string;\n\n  /**\n   * The field to pull the text value from for the column.\n   * Can be unset if a custom `onRender` method is provided.\n   */\n  fieldName?: string;\n\n  /**\n   * If specified, the width of the column is a portion of the available space equal to this value divided by the sum\n   * of all proportional column widths in the list. For example, if there is a list with two proportional columns that\n   * have widths of 1 and 3, they will respectively occupy (1/4) = 25% and (3/4) = 75% of the remaining space. Note that\n   * this relies on viewport measures and will not work well with skipViewportMeasures.\n   */\n  flexGrow?: number;\n\n  /** Class name to apply to the column cell within each row. */\n  className?: string;\n\n  /** Custom overrides to the themed or default styles. */\n  styles?: IStyleFunctionOrObject<IDetailsColumnStyleProps, IDetailsColumnStyles>;\n\n  /** Minimum width for the column. */\n  minWidth: number;\n\n  /**\n   * If specified, the width of the column is a portion of the available space equal to this value divided by the sum\n   * of all proportional column widths in the list. For example, if there is a list with two proportional columns that\n   * have widths of 1 and 3, they will respectively occupy (1/4) = 25% and (2/4) = 75% of the remaining space. Note that\n   * this relies on viewport measures and will not work well with skipViewportMeasures.\n   */\n  targetWidthProportion?: number;\n\n  /**\n   * Accessible label for the column. The column name will still be used as the primary label,\n   * but this text (if specified) will be used as the column description.\n   * WARNING: grid column descriptions are often ignored by screen readers, so any necessary information\n   * should go directly in the column content\n   */\n  ariaLabel?: string;\n\n  /** Whether the column is a header for the given row. There should be only one column with this set to true. */\n  isRowHeader?: boolean;\n\n  /** Maximum width for the column, if stretching is allowed in justified scenarios. */\n  maxWidth?: number;\n\n  /**\n   * Defines how the column's header should render.\n   * @defaultvalue ColumnActionsMode.clickable\n   */\n  columnActionsMode?: ColumnActionsMode;\n\n  /** Custom icon to use in the column header. */\n  iconName?: string;\n\n  /**\n   * Whether only the icon should be displayed in the column header.\n   * If true, the column name and dropdown chevron will not be displayed.\n   */\n  isIconOnly?: boolean;\n\n  /** Class name for the icon within the header. */\n  iconClassName?: string;\n\n  /**\n   * If true, allow the column to be collapsed when rendered in justified layout.\n   * @deprecated Use `isCollapsible`\n   */\n  isCollapsable?: boolean;\n\n  /** If true, allow the column to be collapsed when rendered in justified layout. */\n  isCollapsible?: boolean;\n\n  /** Determines if the column is currently sorted. Renders a sort arrow in the column header. */\n  isSorted?: boolean;\n\n  /** Determines if the sort arrow is pointed down (descending) or up. */\n  isSortedDescending?: boolean;\n\n  /** Determines if the column can be resized. */\n  isResizable?: boolean;\n\n  /** Determines if the column can render multi-line text. */\n  isMultiline?: boolean;\n\n  /** Custom renderer for cell content, instead of the default text rendering. */\n  onRender?: (item?: any, index?: number, column?: IColumn) => any;\n\n  /** Custom override for the parent list's `getCellValueKey`. */\n  getValueKey?: (item?: any, index?: number, column?: IColumn) => string;\n\n  /** Custom renderer for column header divider. */\n  onRenderDivider?: IRenderFunction<IDetailsColumnProps>;\n\n  /** Custom renderer for filter icon. */\n  onRenderFilterIcon?: IRenderFunction<IDetailsColumnFilterIconProps>;\n\n  /** Custom renderer for column header content, instead of the default text rendering. */\n  onRenderHeader?: IRenderFunction<IDetailsColumnProps>;\n\n  /** Whether the list is filtered by this column. If true, shows a filter icon next to this column's name. */\n  isFiltered?: boolean;\n\n  /** Callback for when the user clicks on the column header. */\n  onColumnClick?: (ev: React.MouseEvent<HTMLElement>, column: IColumn) => void;\n\n  /** Callback for when the user opens the column header context menu. */\n  onColumnContextMenu?: (column?: IColumn, ev?: React.MouseEvent<HTMLElement>) => void;\n\n  /**\n   * Callback for when the column is resized (`width` is the current width).\n   *\n   * Prefer this over `DetailsList`'s `onColumnResize` if you require the `IColumn` to report its width\n   * after every resize event. Consider debouncing the callback if resize events occur frequently.\n   */\n  onColumnResize?: (width?: number) => void;\n\n  /** Whether the list is grouped by this column. If true, shows a grouped icon next to this column's name. */\n  isGrouped?: boolean;\n\n  /** Arbitrary data passthrough which can be used by the caller. */\n  data?: any;\n\n  /** Internal only value. */\n  calculatedWidth?: number;\n\n  /**\n   * Internal only value.\n   * Remembers the actual width of the column in any case.\n   * `calculatedWidth` is only saved when it's defined by user, not for justified calculations.\n   */\n  currentWidth?: number;\n\n  /** Class name to apply to the column header cell. */\n  headerClassName?: string;\n\n  /** If true, add additional LTR padding-right to column and cells. */\n  isPadded?: boolean;\n\n  /**\n   * Accessible label for indicating that the list is sorted by this column in ascending order.\n   * This will be read after the main column header label.\n   */\n  sortAscendingAriaLabel?: string;\n\n  /**\n   * Accessible label for indicating that the list is sorted by this column in descending order.\n   * This will be read after the main column header label.\n   */\n  sortDescendingAriaLabel?: string;\n\n  /** Accessible label for the status of this column when grouped. */\n  groupAriaLabel?: string;\n\n  /** Accessible label for the status of this column when filtered. */\n  filterAriaLabel?: string;\n\n  /** Whether a dropdown menu is open so that the appropriate ARIA attributes are rendered. */\n  isMenuOpen?: boolean;\n}\n\n/**\n * Enum to describe how a particular column header behaves.\n * This is used to to specify the property `IColumn.columnActionsMode`.\n * If `IColumn.columnActionsMode` is undefined, it's equivalent to `ColumnActionsMode.clickable`.\n * {@docCategory DetailsList}\n */\nexport enum ColumnActionsMode {\n  /** Renders the column header as disabled. */\n  disabled = 0,\n\n  /** Renders the column header as clickable. Default value. */\n  clickable = 1,\n\n  /** Renders the column header as clickable and displays the dropdown chevron. */\n  hasDropdown = 2,\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport enum ConstrainMode {\n  /** Lets the content grow which allows the page to manage scrolling. */\n  unconstrained = 0,\n\n  /** Constrains the list to the given layout space. */\n  horizontalConstrained = 1,\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IColumnReorderOptions {\n  /**\n   * Specifies the number fixed columns from left\n   * @defaultvalue 0\n   */\n  frozenColumnCountFromStart?: number;\n\n  /**\n   * Specifies the number fixed columns from right\n   * @defaultvalue 0\n   */\n  frozenColumnCountFromEnd?: number;\n\n  /**\n   * Callback to handle when dragging on this column's DetailsHeader has started.\n   */\n  onColumnDragStart?: (dragStarted: boolean) => void;\n\n  /**\n   * Callback to handle column reordering.\n   * `draggedIndex` is the source column index, which should be placed at `targetIndex`.\n   * @deprecated Use `onColumnDrop` instead.\n   */\n  handleColumnReorder?: (draggedIndex: number, targetIndex: number) => void;\n\n  /**\n   * Callback to handle column reordering.\n   * `draggedIndex` is the source column index, which should be placed at `targetIndex`.\n   */\n  onColumnDrop?: (dragDropDetails: IColumnDragDropDetails) => void;\n\n  /**\n   * Callback to handle when dragging on this column's DetailsHeader has finished.\n   */\n  onDragEnd?: (columnDropLocationDetails: ColumnDragEndLocation) => void;\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IColumnDragDropDetails {\n  /**\n   * Specifies the source column index\n   * @defaultvalue -1\n   */\n  draggedIndex: number;\n\n  /**\n   * Specifies the target column index\n   * @defaultvalue -1\n   */\n  targetIndex: number;\n}\n\n/**\n * Enum to describe where the column has been dropped, after starting the drag\n * {@docCategory DetailsList}\n */\nexport enum ColumnDragEndLocation {\n  /** Drag ended outside of current list */\n  outside = 0,\n\n  /** Drag ended within current list */\n  surface = 1,\n\n  /** Drag ended on header */\n  header = 2,\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport enum DetailsListLayoutMode {\n  /**\n   * Lets the user resize columns and makes not attempt to fit them.\n   */\n  fixedColumns = 0,\n\n  /**\n   * Manages which columns are visible, tries to size them according to their min/max rules and drops\n   * off columns that can't fit and have isCollapsible set.\n   */\n  justified = 1,\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport enum CheckboxVisibility {\n  /** Visible on hover. */\n  onHover = 0,\n\n  /** Visible always. */\n  always = 1,\n\n  /** Hide checkboxes. */\n  hidden = 2,\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport type IDetailsListStyleProps = Required<Pick<IDetailsListProps, 'theme'>> &\n  Pick<IDetailsListProps, 'className'> & {\n    /** Whether the list is horizontally constrained */\n    isHorizontalConstrained?: boolean;\n\n    /** Whether the list is in compact mode */\n    compact?: boolean;\n\n    /** Whether the list is fixed in size */\n    isFixed?: boolean;\n  };\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IDetailsListStyles {\n  root: IStyle;\n  focusZone: IStyle;\n  headerWrapper: IStyle;\n  contentWrapper: IStyle;\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IDetailsGroupRenderProps extends IGroupRenderProps {\n  onRenderFooter?: IRenderFunction<IDetailsGroupDividerProps>;\n  onRenderHeader?: IRenderFunction<IDetailsGroupDividerProps>;\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IDetailsGroupDividerProps extends IGroupDividerProps, IDetailsItemProps {}\n\nexport interface IDetailsListCheckboxProps extends IDetailsCheckboxProps {}\n","import * as React from 'react';\n\n/**\n * DelayedRender component props.\n *\n * @public\n */\n// eslint-disable-next-line deprecation/deprecation\nexport interface IDelayedRenderProps extends React.Props<{}> {\n  /**\n   * Number of milliseconds to delay rendering children.\n   */\n  delay?: number;\n}\n\n/**\n * DelayedRender component state.\n *\n * @internal\n */\nexport interface IDelayedRenderState {\n  /**\n   * Whether the component is rendered or not.\n   */\n  isRendered: boolean;\n}\n\n/**\n * Utility component for delaying the render of a child component after a given delay. This component\n * requires a single child component; don't pass in many components. Wrap multiple components in a DIV\n * if necessary.\n *\n * @public\n * {@docCategory DelayedRender}\n */\nexport class DelayedRender extends React.Component<IDelayedRenderProps, IDelayedRenderState> {\n  public static defaultProps = {\n    delay: 0,\n  };\n\n  private _timeoutId: number | undefined;\n\n  constructor(props: IDelayedRenderProps) {\n    super(props);\n    this.state = {\n      isRendered: false,\n    };\n  }\n\n  public componentDidMount(): void {\n    let { delay } = this.props;\n    this._timeoutId = window.setTimeout(() => {\n      this.setState({\n        isRendered: true,\n      });\n    }, delay);\n  }\n\n  public componentWillUnmount(): void {\n    if (this._timeoutId) {\n      clearTimeout(this._timeoutId);\n    }\n  }\n\n  public render(): React.ReactElement<{}> | null {\n    return this.state.isRendered ? (React.Children.only(this.props.children) as React.ReactElement<{}>) : null;\n  }\n}\n","/**\n * {@docCategory Selection}\n */\nexport interface IObjectWithKey {\n  key?: string | number;\n}\n\nexport const SELECTION_CHANGE = 'change';\n\n/**\n * {@docCategory Selection}\n */\nexport enum SelectionMode {\n  none = 0,\n  single = 1,\n  multiple = 2,\n}\n\n/**\n * {@docCategory Selection}\n */\nexport interface ISelection<TItem = IObjectWithKey> {\n  count: number;\n  mode: SelectionMode;\n\n  canSelectItem: (item: TItem, index?: number) => boolean;\n\n  // Obesrvable methods.\n  setChangeEvents(isEnabled: boolean, suppressChange?: boolean): void;\n\n  // Initialization methods.\n\n  setItems(items: TItem[], shouldClear: boolean): void;\n  getItems(): TItem[];\n\n  // Read selection methods.\n\n  getSelection(): TItem[];\n  getSelectedIndices(): number[];\n  getSelectedCount(): number;\n  isRangeSelected(fromIndex: number, count: number): boolean;\n\n  isAllSelected(): boolean;\n  isKeySelected(key: string): boolean;\n  isIndexSelected(index: number): boolean;\n\n  isModal?(): boolean;\n\n  // Write selection methods.\n\n  setAllSelected(isAllSelected: boolean): void;\n  setKeySelected(key: string, isSelected: boolean, shouldAnchor: boolean): void;\n  setIndexSelected(index: number, isSelected: boolean, shouldAnchor: boolean): void;\n\n  setModal?(isModal: boolean): void; // TODO make non-optional on next breaking change\n\n  // Write range selection methods.\n\n  selectToKey(key: string, clearSelection?: boolean): void;\n  selectToIndex(index: number, clearSelection?: boolean): void;\n\n  // Toggle helpers.\n\n  toggleAllSelected(): void;\n  toggleKeySelected(key: string): void;\n  toggleIndexSelected(index: number): void;\n  toggleRangeSelected(fromIndex: number, count: number): void;\n}\n\n/**\n * {@docCategory Selection}\n */\nexport enum SelectionDirection {\n  horizontal = 0,\n  vertical = 1,\n}\n","import * as React from 'react';\nimport { GroupedListBase } from './GroupedList.base';\nimport { IList, IListProps } from '../../List';\nimport { IFocusZoneProps } from '../../FocusZone';\nimport { IRefObject, IRenderFunction } from '../../Utilities';\nimport { IDragDropContext, IDragDropEvents, IDragDropHelper } from '../../DragDrop';\nimport { ISelection, SelectionMode } from '../../Selection';\nimport { IViewport } from '../../utilities/decorators/withViewport';\nimport { ITheme, IStyle } from '../../Styling';\nimport { IStyleFunctionOrObject } from '../../Utilities';\nimport { IGroupHeaderProps } from './GroupHeader.types';\nimport { IGroupShowAllProps } from './GroupShowAll.types';\nimport { IGroupFooterProps } from './GroupFooter.types';\n\n/**\n * {@docCategory GroupedList}\n */\nexport enum CollapseAllVisibility {\n  hidden = 0,\n  visible = 1,\n}\n\n/**\n * {@docCategory GroupedList}\n */\nexport interface IGroupedList extends IList {\n  /**\n   * Ensures that the list content is updated. Call this in cases where the list props don't change, but the list still\n   * needs to be re-evaluated. For example, if a sizer bar is adjusted and causes the list width to change, you can\n   * call this to force a re-evaluation. Be aware that this can be an expensive operation and should be done sparingly.\n   */\n  forceUpdate: () => void;\n\n  /**\n   * Toggles the collapsed state of all the groups in the list.\n   */\n  toggleCollapseAll: (allCollapsed: boolean) => void;\n}\n\n/**\n * {@docCategory GroupedList}\n */\nexport interface IGroupedListProps extends React.ClassAttributes<GroupedListBase> {\n  /**\n   * Theme that is passed in from Higher Order Component\n   */\n  theme?: ITheme;\n\n  /**\n   * Style function to be passed in to override the themed or default styles\n   */\n  styles?: IStyleFunctionOrObject<IGroupedListStyleProps, IGroupedListStyles>;\n\n  /**\n   * Optional callback to access the IGroupedList interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: IRefObject<IGroupedList>;\n\n  /** Optional class name to add to the root element. */\n  className?: string;\n\n  /** Boolean value to indicate if the component should render in compact mode. Set to false by default */\n  compact?: boolean;\n\n  /** Map of callback functions related to drag and drop functionality. */\n  dragDropEvents?: IDragDropEvents;\n\n  /** helper to manage drag/drop across item and groups */\n  dragDropHelper?: IDragDropHelper;\n\n  /** Event names and corresponding callbacks that will be registered to groups and rendered elements */\n  eventsToRegister?: { eventName: string; callback: (context: IDragDropContext, event?: any) => void }[];\n\n  /** Optional override properties to render groups. */\n  groupProps?: IGroupRenderProps;\n\n  /** Optional grouping instructions. */\n  groups?: IGroup[];\n\n  /** List of items to render. */\n  items: any[];\n\n  /** Optional properties to pass through to the FocusZone. */\n  focusZoneProps?: IFocusZoneProps;\n\n  /** Optional properties to pass through to the list components being rendered. */\n  listProps?: IListProps;\n\n  /** Optional properties to pass through to the root list component being rendered. */\n  rootListProps?: IListProps;\n\n  /** Rendering callback to render the group items. */\n  onRenderCell: (nestingDepth?: number, item?: any, index?: number) => React.ReactNode;\n\n  /** Override the default role for GroupedList.  */\n  role?: string;\n\n  /** Optional selection model to track selection state.  */\n  selection?: ISelection;\n\n  /** Controls how/if the list manages selection. */\n  selectionMode?: SelectionMode;\n\n  /** Optional Viewport, provided by the parent component. */\n  viewport?: IViewport;\n\n  /** Optional callback when the group expand state changes between all collapsed and at least one group is expanded. */\n  onGroupExpandStateChanged?: (isSomeGroupExpanded: boolean) => void;\n\n  /**\n   * boolean to control if pages containing unchanged items should be cached, this is a perf optimization\n   * The same property in List.Props\n   */\n  usePageCache?: boolean;\n\n  /**\n   * Optional callback to determine whether the list should be rendered in full, or virtualized.\n   * Virtualization will add and remove pages of items as the user scrolls them into the visible range.\n   * This benefits larger list scenarios by reducing the DOM on the screen, but can negatively affect performance for\n   * smaller lists.\n   * The default implementation will virtualize when this callback is not provided.\n   */\n  onShouldVirtualize?: (props: IListProps) => boolean;\n\n  /**\n   * Optional function to override default group height calculation used by list virtualization.\n   */\n  getGroupHeight?: (group: IGroup, groupIndex: number) => number;\n}\n\n/**\n * {@docCategory GroupedList}\n */\nexport interface IGroup {\n  /**\n   * Unique identifier for the group.\n   */\n  key: string;\n\n  /**\n   * Display name for the group, rendered on the header.\n   */\n  name: string;\n\n  /**\n   * Start index for the group within the given items.\n   */\n  startIndex: number;\n\n  /**\n   * How many items should be rendered within the group.\n   */\n  count: number;\n\n  /**\n   * Nested groups, if any.\n   */\n  children?: IGroup[];\n\n  /**\n   * Number indicating the level of nested groups.\n   */\n  level?: number;\n\n  /**\n   * @deprecated At 1.0.0, selection state wil be controlled by the selection store only.\n   */\n  isSelected?: boolean;\n\n  /**\n   * If all the items in the group are collapsed.\n   */\n  isCollapsed?: boolean;\n\n  /**\n   * If the items within the group are summarized or showing all.\n   */\n  isShowingAll?: boolean;\n\n  /**\n   * If drag/drop is enabled for the group header.\n   */\n  isDropEnabled?: boolean;\n\n  /**\n   * Arbitrary data required to be preserved by the caller.\n   */\n  data?: any;\n\n  /**\n   * Optional accessibility label (aria-label) attribute that will be stamped on to the element.\n   * If none is specified, the arai-label attribute will contain the group name\n   */\n  ariaLabel?: string;\n\n  /**\n   * Optional flag to indicate the group has more data to load than the current group count indicated.\n   * This can be used to indicate that a plus should be rendered next to the group count in the header.\n   */\n  hasMoreData?: boolean;\n}\n\n/**\n * {@docCategory GroupedList}\n */\nexport interface IGroupRenderProps {\n  /** Boolean indicating if all groups are in collapsed state. */\n  isAllGroupsCollapsed?: boolean;\n\n  /** Grouping item limit. */\n  getGroupItemLimit?: (group: IGroup) => number;\n\n  /** Callback for when all groups are expanded or collapsed. */\n  onToggleCollapseAll?: (isAllCollapsed: boolean) => void;\n\n  /** Information to pass in to the group header. */\n  headerProps?: IGroupHeaderProps;\n\n  /** Information to pass in to the group Show all footer. */\n  showAllProps?: IGroupShowAllProps;\n\n  /** Information to pass in to the group footer. */\n  footerProps?: IGroupFooterProps;\n\n  /**\n   * Override which allows the caller to provide a custom header.\n   */\n  onRenderHeader?: IRenderFunction<IGroupHeaderProps>;\n\n  /**\n   * Override which allows the caller to provide a custom Show All link.\n   */\n  onRenderShowAll?: IRenderFunction<IGroupShowAllProps>;\n\n  /**\n   * Override which allows the caller to provide a custom footer.\n   */\n  onRenderFooter?: IRenderFunction<IGroupFooterProps>;\n\n  /**\n   * Flag to indicate whether to ignore the collapsing icon on header.\n   * @defaultvalue CollapseAllVisibility.visible\n   */\n  collapseAllVisibility?: CollapseAllVisibility;\n\n  /**\n   * Boolean indicating if empty groups are shown\n   * @defaultvalue false\n   */\n  showEmptyGroups?: boolean;\n\n  /**\n   * Override which allows the caller to provide a custom aria role\n   */\n  role?: string;\n}\n\n/**\n * {@docCategory GroupedList}\n */\nexport interface IGroupDividerProps {\n  componentRef?: IRefObject<{}>;\n\n  /** Boolean value to indicate if the component should render in compact mode. Set to false by default */\n  compact?: boolean;\n\n  /** Callback to determine if a group has missing items and needs to load them from the server. */\n  isGroupLoading?: (group: IGroup) => boolean;\n\n  /** Text shown on group headers to indicate the group is being loaded. */\n  loadingText?: string;\n\n  /** The group to be rendered by the header. */\n  group?: IGroup;\n\n  /** The index of the group. */\n  groupIndex?: number;\n\n  /** The indent level of the group. */\n  groupLevel?: number;\n\n  /** Defines the number of columns a group header needs to span in the case of a grid or treegrid */\n  ariaColSpan?: number;\n\n  /** Defines the number of items in the current set of listitems or treeitems */\n  ariaSetSize?: number;\n\n  /** Defines an element's number or position in the current set of listitems or treeitems */\n  ariaPosInSet?: number;\n\n  /** Defines the number of items in the current set of grid items */\n  ariaRowCount?: number;\n\n  /** Defines an element's number or position in the current set of grid items */\n  ariaRowIndex?: number;\n\n  /**\n   * Width corresponding to a single level.\n   * This is multiplied by the groupLevel to get the full spacer width for the group.\n   */\n  indentWidth?: number;\n\n  /** If all items in the group are selected. */\n  selected?: boolean;\n\n  /**\n   * @deprecated Use `selected` instead. Deprecated at v.65.1.\n   */\n  isSelected?: boolean;\n\n  /** A reference to the viewport in which the header is rendered. */\n  viewport?: IViewport;\n\n  /** The selection mode of the list the group lives within. */\n  selectionMode?: SelectionMode;\n\n  /** Text to display for the group footer. */\n  footerText?: string;\n\n  /** Text to display for the group \"Show All\" link. */\n  showAllLinkText?: string;\n\n  /** Callback for when the group \"Show All\" link is clicked */\n  onToggleSummarize?: (group: IGroup) => void;\n\n  /** Callback for when the group header is clicked. */\n  onGroupHeaderClick?: (group: IGroup) => void;\n\n  /** Callback for when the \"keyup\" event is fired on the group header. */\n  onGroupHeaderKeyUp?: (ev: React.KeyboardEvent<HTMLElement>, group?: IGroup) => void;\n\n  /** Callback for when the group is expanded or collapsed. */\n  onToggleCollapse?: (group: IGroup) => void;\n\n  /** Callback for when the group is selected. */\n  onToggleSelectGroup?: (group: IGroup) => void;\n\n  /** Determines if the group selection check box is shown for collapsed groups. */\n  isCollapsedGroupSelectVisible?: boolean;\n\n  /** Override which allows the caller to provider a custom renderer for the GroupHeader title. */\n  onRenderTitle?: IRenderFunction<IGroupHeaderProps>;\n\n  /** Props for expand/collapse button\n   * @deprecated Use {@link IGroupHeaderProps.expandButtonProps} instead.\n   */\n  expandButtonProps?: React.HTMLAttributes<HTMLButtonElement>;\n\n  /** Stores parent group's children. */\n  groups?: IGroup[];\n\n  /** Custom className */\n  className?: string;\n\n  /** Theme provided by the Higher Order Component */\n  theme?: ITheme;\n}\n\n/**\n * {@docCategory GroupedList}\n */\nexport type IGroupedListStyleProps = Required<Pick<IGroupedListProps, 'theme'>> &\n  Pick<IGroupedListProps, 'className'> & {\n    /** whether or not the group is collapsed */\n    isCollapsed?: boolean;\n\n    /** Whether the group is in compact mode or not */\n    compact?: boolean;\n  };\n\n/**\n * {@docCategory GroupedList}\n */\nexport interface IGroupedListStyles {\n  root: IStyle;\n  group: IStyle;\n  groupIsDropping: IStyle;\n}\n","import * as React from 'react';\nimport { IGroupSpacerProps } from './GroupSpacer.types';\n\nexport const SPACER_WIDTH = 36;\n\nexport const GroupSpacer: React.FunctionComponent<IGroupSpacerProps> = props => {\n  const { count, indentWidth = SPACER_WIDTH, role = 'presentation' } = props;\n  const width = count * indentWidth;\n\n  return count > 0 ? (\n    <span className={'ms-GroupSpacer'} style={{ display: 'inline-block', width }} role={role} />\n  ) : null;\n};\n","import { IRenderFunction } from '../IRenderFunction';\nimport { createMemoizer } from '../memoize';\n\ninterface IRenderFunctionComposer {\n  <TProps>(outer: IRenderFunction<TProps>): (inner: IRenderFunction<TProps>) => IRenderFunction<TProps>;\n}\n\nfunction createComposedRenderFunction<TProps>(\n  outer: IRenderFunction<TProps>,\n): (inner: IRenderFunction<TProps>) => IRenderFunction<TProps> {\n  const outerMemoizer = createMemoizer((inner: IRenderFunction<TProps>) => {\n    const innerMemoizer = createMemoizer((defaultRender: IRenderFunction<TProps>) => {\n      return (innerProps?: TProps) => {\n        return inner(innerProps, defaultRender);\n      };\n    });\n\n    return (outerProps?: TProps, defaultRender?: IRenderFunction<TProps>) => {\n      return outer(outerProps, defaultRender ? innerMemoizer(defaultRender) : inner);\n    };\n  });\n\n  return outerMemoizer;\n}\n\nconst memoizer = createMemoizer<IRenderFunctionComposer>(createComposedRenderFunction);\n\n/**\n * Composes two 'render functions' to produce a final render function that renders\n * the outer function, passing the inner function as 'default render'. The inner function\n * is then passed the original 'default render' prop.\n * @public\n */\nexport function composeRenderFunction<TProps>(\n  outer: IRenderFunction<TProps>,\n  inner: IRenderFunction<TProps>,\n): IRenderFunction<TProps> {\n  return memoizer(outer)(inner);\n}\n","import * as React from 'react';\nimport { ICheckProps } from './Check.types';\nimport { Icon, FontIcon } from '../../Icon';\nimport { classNamesFunction } from '../../Utilities';\nimport { ICheckStyleProps, ICheckStyles } from './Check.types';\n\nconst getClassNames = classNamesFunction<ICheckStyleProps, ICheckStyles>();\n\nexport const CheckBase: React.FunctionComponent<ICheckProps> = React.forwardRef<HTMLDivElement, ICheckProps>(\n  (props, ref) => {\n    const { checked = false, className, theme, styles, useFastIcons = true } = props;\n\n    const classNames = getClassNames(styles!, { theme: theme!, className, checked });\n    const IconComponent = useFastIcons ? FontIcon : Icon;\n\n    return (\n      <div className={classNames.root} ref={ref}>\n        <IconComponent iconName=\"CircleRing\" className={classNames.circle} />\n        <IconComponent iconName=\"StatusCircleCheckmark\" className={classNames.check} />\n      </div>\n    );\n  },\n);\nCheckBase.displayName = 'CheckBase';\n","import { ICheckStyleProps, ICheckStyles } from './Check.types';\nimport {\n  HighContrastSelector,\n  IStyle,\n  getGlobalClassNames,\n  IconFontSizes,\n  getHighContrastNoAdjustStyle,\n} from '../../Styling';\nimport { getRTL } from '../../Utilities';\n\nexport const CheckGlobalClassNames = {\n  root: 'ms-Check',\n  circle: 'ms-Check-circle',\n  check: 'ms-Check-check',\n  /** Must be manually applied to the parent element of the check. */\n  checkHost: 'ms-Check-checkHost',\n};\n\nexport const getStyles = (props: ICheckStyleProps): ICheckStyles => {\n  // eslint-disable-next-line deprecation/deprecation\n  const { height = props.checkBoxHeight || '18px', checked, className, theme } = props;\n\n  const { palette, semanticColors, fonts } = theme;\n  const isRTL = getRTL(theme);\n\n  const classNames = getGlobalClassNames(CheckGlobalClassNames, theme);\n\n  const sharedCircleCheck: IStyle = {\n    fontSize: height,\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    width: height,\n    height: height,\n    textAlign: 'center',\n    // inline-flex prevents the check from shifting with custom line height styles\n    display: 'inline-flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    verticalAlign: 'middle',\n  };\n\n  return {\n    root: [\n      classNames.root,\n      fonts.medium,\n      {\n        // lineHeight currently needs to be a string to output without 'px'\n        lineHeight: '1',\n        width: height,\n        height: height,\n        verticalAlign: 'top',\n        position: 'relative',\n        userSelect: 'none',\n\n        selectors: {\n          ':before': {\n            content: '\"\"',\n            position: 'absolute',\n            top: '1px',\n            right: '1px',\n            bottom: '1px',\n            left: '1px',\n            borderRadius: '50%',\n            opacity: 1,\n            background: semanticColors.bodyBackground,\n          },\n\n          [`.${classNames.checkHost}:hover &, .${classNames.checkHost}:focus &, &:hover, &:focus`]: {\n            opacity: 1,\n          },\n        },\n      },\n\n      checked && [\n        'is-checked',\n        {\n          selectors: {\n            ':before': {\n              background: palette.themePrimary,\n              opacity: 1,\n              selectors: {\n                [HighContrastSelector]: {\n                  background: 'Window',\n                },\n              },\n            },\n          },\n        },\n      ],\n      className,\n    ],\n\n    circle: [\n      classNames.circle,\n      sharedCircleCheck,\n\n      {\n        color: palette.neutralSecondary,\n\n        selectors: {\n          [HighContrastSelector]: {\n            color: 'WindowText',\n          },\n        },\n      },\n\n      checked && {\n        color: palette.white,\n      },\n    ],\n\n    check: [\n      classNames.check,\n      sharedCircleCheck,\n\n      {\n        opacity: 0,\n        color: palette.neutralSecondary,\n        fontSize: IconFontSizes.medium,\n        left: isRTL ? '-0.5px' : '.5px', // for centering the check icon inside the circle.\n        top: '-1px', // the check is slightly lower than center compared to the circle.\n\n        selectors: {\n          ':hover': {\n            opacity: 1,\n          },\n\n          [HighContrastSelector]: {\n            ...getHighContrastNoAdjustStyle(),\n          },\n        },\n      },\n\n      checked && {\n        opacity: 1,\n        color: palette.white,\n        fontWeight: 900,\n\n        selectors: {\n          [HighContrastSelector]: {\n            border: 'none',\n            color: 'WindowText',\n          },\n        },\n      },\n    ],\n\n    checkHost: classNames.checkHost,\n  };\n};\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { ICheckProps, ICheckStyleProps, ICheckStyles } from './Check.types';\nimport { CheckBase } from './Check.base';\nimport { getStyles } from './Check.styles';\n\nexport const Check: React.FunctionComponent<ICheckProps> = styled<ICheckProps, ICheckStyleProps, ICheckStyles>(\n  CheckBase,\n  getStyles,\n  undefined,\n  {\n    scope: 'Check',\n  },\n  true,\n);\n","import { IDetailsRowStyleProps, IDetailsRowStyles, ICellStyleProps } from './DetailsRow.types';\nimport {\n  AnimationClassNames,\n  AnimationStyles,\n  HighContrastSelector,\n  IStyle,\n  getFocusStyle,\n  getGlobalClassNames,\n  FontWeights,\n  getHighContrastNoAdjustStyle,\n} from '../../Styling';\nimport { IsFocusVisibleClassName } from '../../Utilities';\n\nexport const DetailsRowGlobalClassNames = {\n  root: 'ms-DetailsRow',\n  // TODO: in Fabric 7.0 lowercase the 'Compact' for consistency across other components.\n  compact: 'ms-DetailsList--Compact',\n  cell: 'ms-DetailsRow-cell',\n  cellAnimation: 'ms-DetailsRow-cellAnimation',\n  cellCheck: 'ms-DetailsRow-cellCheck',\n  check: 'ms-DetailsRow-check',\n  cellMeasurer: 'ms-DetailsRow-cellMeasurer',\n  listCellFirstChild: 'ms-List-cell:first-child',\n  isContentUnselectable: 'is-contentUnselectable',\n  isSelected: 'is-selected',\n  isCheckVisible: 'is-check-visible',\n  isRowHeader: 'is-row-header',\n  fields: 'ms-DetailsRow-fields',\n};\nconst IsFocusableSelector = \"[data-is-focusable='true']\";\n\nexport const DEFAULT_CELL_STYLE_PROPS: ICellStyleProps = {\n  cellLeftPadding: 12,\n  cellRightPadding: 8,\n  cellExtraRightPadding: 24,\n};\n\n// Source of default row heights to share.\nexport const DEFAULT_ROW_HEIGHTS = {\n  rowHeight: 42,\n  compactRowHeight: 32,\n};\n\n// Constant values\nconst values = {\n  ...DEFAULT_ROW_HEIGHTS,\n  rowVerticalPadding: 11,\n  compactRowVerticalPadding: 6,\n};\n\nexport const getDetailsRowStyles = (props: IDetailsRowStyleProps): IDetailsRowStyles => {\n  const {\n    theme,\n    isSelected,\n    canSelect,\n    droppingClassName,\n    anySelected,\n    isCheckVisible,\n    checkboxCellClassName,\n    compact,\n    className,\n    cellStyleProps = DEFAULT_CELL_STYLE_PROPS,\n    enableUpdateAnimations,\n  } = props;\n\n  const { palette, fonts } = theme;\n  const {\n    neutralPrimary,\n    white,\n    neutralSecondary,\n    neutralLighter,\n    neutralLight,\n    neutralDark,\n    neutralQuaternaryAlt,\n  } = palette;\n  const { focusBorder } = theme.semanticColors;\n\n  const classNames = getGlobalClassNames(DetailsRowGlobalClassNames, theme);\n\n  const colors = {\n    // Default\n    defaultHeaderText: neutralPrimary,\n    defaultMetaText: neutralSecondary,\n    defaultBackground: white,\n\n    // Default Hover\n    defaultHoverHeaderText: neutralDark,\n    defaultHoverMetaText: neutralPrimary,\n    defaultHoverBackground: neutralLighter,\n\n    // Selected\n    selectedHeaderText: neutralDark,\n    selectedMetaText: neutralPrimary,\n    selectedBackground: neutralLight,\n\n    // Selected Hover\n    selectedHoverHeaderText: neutralDark,\n    selectedHoverMetaText: neutralPrimary,\n    selectedHoverBackground: neutralQuaternaryAlt,\n\n    // Focus\n    focusHeaderText: neutralDark,\n    focusMetaText: neutralPrimary,\n    focusBackground: neutralLight,\n    focusHoverBackground: neutralQuaternaryAlt,\n  };\n\n  const rowHighContrastFocus = {\n    top: 2,\n    right: 2,\n    bottom: 2,\n    left: 2,\n  };\n\n  // Selected row styles\n  const selectedStyles: IStyle = [\n    getFocusStyle(theme, {\n      inset: -1,\n      borderColor: focusBorder,\n      outlineColor: white,\n      highContrastStyle: rowHighContrastFocus,\n    }),\n    classNames.isSelected,\n    {\n      color: colors.selectedMetaText,\n      background: colors.selectedBackground,\n      borderBottom: `1px solid ${white}`,\n      selectors: {\n        '&:before': {\n          position: 'absolute',\n          display: 'block',\n          top: -1,\n          height: 1,\n          bottom: 0,\n          left: 0,\n          right: 0,\n          content: '',\n          borderTop: `1px solid ${white}`,\n        },\n\n        // Selected State hover\n        '&:hover': {\n          background: colors.selectedHoverBackground,\n          color: colors.selectedHoverMetaText,\n          selectors: {\n            // Selected State hover meta cell\n            [`.${classNames.cell} ${HighContrastSelector}`]: {\n              color: 'HighlightText',\n              selectors: {\n                '> a': {\n                  color: 'HighlightText',\n                },\n              },\n            },\n\n            // Selected State hover Header cell\n            [`.${classNames.isRowHeader}`]: {\n              color: colors.selectedHoverHeaderText,\n              selectors: {\n                [HighContrastSelector]: {\n                  color: 'HighlightText',\n                },\n              },\n            },\n\n            // Ensure high-contrast mode overrides default hover background\n            [HighContrastSelector]: {\n              background: 'Highlight',\n            },\n          },\n        },\n\n        // Focus state\n        '&:focus': {\n          background: colors.focusBackground,\n          selectors: {\n            // Selected State hover meta cell\n            [`.${classNames.cell}`]: {\n              color: colors.focusMetaText,\n              selectors: {\n                [HighContrastSelector]: {\n                  color: 'HighlightText',\n                  selectors: {\n                    '> a': {\n                      color: 'HighlightText',\n                    },\n                  },\n                },\n              },\n            },\n\n            // Row header cell\n            [`.${classNames.isRowHeader}`]: {\n              color: colors.focusHeaderText,\n              selectors: {\n                [HighContrastSelector]: {\n                  color: 'HighlightText',\n                },\n              },\n            },\n\n            // Ensure high-contrast mode overrides default focus background\n            [HighContrastSelector]: {\n              background: 'Highlight',\n            },\n          },\n        },\n\n        [HighContrastSelector]: {\n          background: 'Highlight',\n          color: 'HighlightText',\n          ...getHighContrastNoAdjustStyle(),\n          selectors: {\n            a: {\n              color: 'HighlightText',\n            },\n          },\n        },\n\n        // Focus and hover state\n        '&:focus:hover': {\n          background: colors.focusHoverBackground,\n        },\n      },\n    },\n  ];\n\n  const cannotSelectStyles: IStyle = [\n    classNames.isContentUnselectable,\n    {\n      userSelect: 'none',\n      cursor: 'default',\n    },\n  ];\n\n  const rootCompactStyles: IStyle = {\n    minHeight: values.compactRowHeight,\n    border: 0,\n  };\n\n  const cellCompactStyles: IStyle = {\n    minHeight: values.compactRowHeight,\n    paddingTop: values.compactRowVerticalPadding,\n    paddingBottom: values.compactRowVerticalPadding,\n    paddingLeft: `${cellStyleProps.cellLeftPadding}px`,\n  };\n\n  const defaultCellStyles: IStyle = [\n    getFocusStyle(theme, { inset: -1 }),\n    classNames.cell,\n    {\n      display: 'inline-block',\n      position: 'relative',\n      boxSizing: 'border-box',\n      minHeight: values.rowHeight,\n      verticalAlign: 'top',\n      whiteSpace: 'nowrap',\n      overflow: 'hidden',\n      textOverflow: 'ellipsis',\n      paddingTop: values.rowVerticalPadding,\n      paddingBottom: values.rowVerticalPadding,\n      paddingLeft: `${cellStyleProps.cellLeftPadding}px`,\n      selectors: {\n        '& > button': {\n          maxWidth: '100%',\n        },\n\n        [IsFocusableSelector]: getFocusStyle(theme, { inset: -1, borderColor: neutralSecondary, outlineColor: white }),\n      },\n    },\n\n    isSelected && {\n      selectors: {\n        [HighContrastSelector]: {\n          background: 'Highlight',\n          color: 'HighlightText',\n          ...getHighContrastNoAdjustStyle(),\n          selectors: {\n            a: {\n              color: 'HighlightText',\n            },\n          },\n        },\n      },\n    },\n\n    compact && cellCompactStyles,\n  ];\n\n  return {\n    root: [\n      classNames.root,\n      AnimationClassNames.fadeIn400,\n      droppingClassName,\n      theme.fonts.small,\n      isCheckVisible && classNames.isCheckVisible,\n      getFocusStyle(theme, { borderColor: focusBorder, outlineColor: white }),\n      {\n        borderBottom: `1px solid ${neutralLighter}`,\n        background: colors.defaultBackground,\n        color: colors.defaultMetaText,\n        // This ensures that the row always tries to consume is minimum width and does not compress.\n        display: 'inline-flex',\n        minWidth: '100%',\n        minHeight: values.rowHeight,\n        whiteSpace: 'nowrap',\n        padding: 0,\n        boxSizing: 'border-box',\n        verticalAlign: 'top',\n        textAlign: 'left',\n        selectors: {\n          [`.${classNames.listCellFirstChild} &:before`]: {\n            display: 'none',\n          },\n\n          '&:hover': {\n            background: colors.defaultHoverBackground,\n            color: colors.defaultHoverMetaText,\n            selectors: {\n              [`.${classNames.isRowHeader}`]: {\n                color: colors.defaultHoverHeaderText,\n              },\n            },\n          },\n\n          [`&:hover .${classNames.check}`]: {\n            opacity: 1,\n          },\n\n          [`.${IsFocusVisibleClassName} &:focus .${classNames.check}`]: {\n            opacity: 1,\n          },\n\n          '.ms-GroupSpacer': {\n            flexShrink: 0,\n            flexGrow: 0,\n          },\n        },\n      },\n      isSelected && selectedStyles,\n      !canSelect && cannotSelectStyles,\n      compact && rootCompactStyles,\n      className,\n    ],\n\n    cellUnpadded: {\n      paddingRight: `${cellStyleProps.cellRightPadding}px`,\n    },\n\n    cellPadded: {\n      paddingRight: `${cellStyleProps.cellExtraRightPadding + cellStyleProps.cellRightPadding}px`,\n      selectors: {\n        [`&.${classNames.cellCheck}`]: {\n          paddingRight: 0,\n        },\n      },\n    },\n\n    cell: defaultCellStyles,\n    cellAnimation: enableUpdateAnimations && AnimationStyles.slideLeftIn40,\n    cellMeasurer: [\n      classNames.cellMeasurer,\n      {\n        overflow: 'visible',\n        whiteSpace: 'nowrap',\n      },\n    ],\n    checkCell: [\n      defaultCellStyles,\n      classNames.cellCheck,\n      checkboxCellClassName,\n      {\n        padding: 0,\n        // Ensure that the check cell covers the top border of the cell.\n        // This ensures the click target does not leave a spot which would\n        // cause other items to be deselected.\n        paddingTop: 1,\n        marginTop: -1,\n        flexShrink: 0,\n      },\n    ],\n    checkCover: {\n      position: 'absolute',\n      top: -1,\n      left: 0,\n      bottom: 0,\n      right: 0,\n      display: anySelected ? 'block' : 'none',\n    },\n    fields: [\n      classNames.fields,\n      {\n        display: 'flex',\n        alignItems: 'stretch',\n      },\n    ],\n    isRowHeader: [\n      classNames.isRowHeader,\n      {\n        color: colors.defaultHeaderText,\n        fontSize: fonts.medium.fontSize,\n      },\n      isSelected && {\n        color: colors.selectedHeaderText,\n        fontWeight: FontWeights.semibold,\n        selectors: {\n          [HighContrastSelector]: {\n            color: 'HighlightText',\n          },\n        },\n      },\n    ],\n    isMultiline: [\n      defaultCellStyles,\n      {\n        whiteSpace: 'normal',\n        wordBreak: 'break-word',\n        textOverflow: 'clip',\n      },\n    ],\n    check: [classNames.check],\n  };\n};\n","import { IDetailsHeaderStyleProps, IDetailsHeaderStyles } from './DetailsHeader.types';\nimport {\n  getFocusStyle,\n  focusClear,\n  IStyle,\n  getGlobalClassNames,\n  HighContrastSelector,\n  hiddenContentStyle,\n  ITheme,\n  getHighContrastNoAdjustStyle,\n} from '../../Styling';\nimport { getRTL, IsFocusVisibleClassName } from '../../Utilities';\nimport { DEFAULT_CELL_STYLE_PROPS } from './DetailsRow.styles';\nimport { ICellStyleProps } from './DetailsRow.types';\n// For every group level there is a GroupSpacer added. Importing this const to have the source value in one place.\nimport { SPACER_WIDTH as GROUP_EXPANDER_WIDTH } from '../GroupedList/GroupSpacer';\n\nconst GlobalClassNames = {\n  tooltipHost: 'ms-TooltipHost',\n  root: 'ms-DetailsHeader',\n  cell: 'ms-DetailsHeader-cell',\n  cellIsCheck: 'ms-DetailsHeader-cellIsCheck',\n  collapseButton: 'ms-DetailsHeader-collapseButton',\n  isCollapsed: 'is-collapsed',\n  isAllSelected: 'is-allSelected',\n  isSelectAllHidden: 'is-selectAllHidden',\n  isResizingColumn: 'is-resizingColumn',\n  cellSizer: 'ms-DetailsHeader-cellSizer',\n  isResizing: 'is-resizing',\n  dropHintCircleStyle: 'ms-DetailsHeader-dropHintCircleStyle',\n  dropHintCaretStyle: 'ms-DetailsHeader-dropHintCaretStyle',\n  dropHintLineStyle: 'ms-DetailsHeader-dropHintLineStyle',\n  cellTitle: 'ms-DetailsHeader-cellTitle',\n  cellName: 'ms-DetailsHeader-cellName',\n  filterChevron: 'ms-DetailsHeader-filterChevron',\n  gripperBarVertical: 'ms-DetailsColumn-gripperBarVertical',\n  checkTooltip: 'ms-DetailsHeader-checkTooltip',\n  check: 'ms-DetailsHeader-check',\n};\n\nexport const HEADER_HEIGHT = 42;\n\nexport const getCellStyles = (props: { theme: ITheme; cellStyleProps?: ICellStyleProps }): IStyle => {\n  const { theme, cellStyleProps = DEFAULT_CELL_STYLE_PROPS } = props;\n  const { semanticColors } = theme;\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  return [\n    classNames.cell,\n    getFocusStyle(theme),\n    {\n      color: semanticColors.bodyText,\n      position: 'relative',\n      display: 'inline-block',\n      boxSizing: 'border-box',\n      padding: `0 ${cellStyleProps.cellRightPadding}px 0 ${cellStyleProps.cellLeftPadding}px`,\n      lineHeight: 'inherit',\n      margin: '0',\n      height: HEADER_HEIGHT,\n      verticalAlign: 'top',\n      whiteSpace: 'nowrap',\n      textOverflow: 'ellipsis',\n      textAlign: 'left',\n    },\n  ];\n};\n\nexport const getStyles = (props: IDetailsHeaderStyleProps): IDetailsHeaderStyles => {\n  const {\n    theme,\n    className,\n    isAllSelected,\n    isResizingColumn,\n    isSizing,\n    isAllCollapsed,\n    cellStyleProps = DEFAULT_CELL_STYLE_PROPS,\n  } = props;\n\n  const { semanticColors, palette, fonts } = theme;\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  const colors = {\n    iconForegroundColor: semanticColors.bodySubtext,\n    headerForegroundColor: semanticColors.bodyText,\n    headerBackgroundColor: semanticColors.bodyBackground,\n    resizerColor: palette.neutralTertiaryAlt,\n  };\n\n  const cellSizerFadeInStyles: IStyle = {\n    opacity: 1,\n    transition: 'opacity 0.3s linear',\n  };\n\n  const cellStyles = getCellStyles(props);\n\n  return {\n    root: [\n      classNames.root,\n      fonts.small,\n      {\n        display: 'inline-block',\n        background: colors.headerBackgroundColor,\n        position: 'relative',\n        minWidth: '100%',\n        verticalAlign: 'top',\n        height: HEADER_HEIGHT,\n        lineHeight: HEADER_HEIGHT,\n        whiteSpace: 'nowrap',\n        boxSizing: 'content-box',\n        paddingBottom: '1px',\n        paddingTop: '16px',\n        borderBottom: `1px solid ${semanticColors.bodyDivider}`,\n        cursor: 'default',\n        userSelect: 'none',\n        selectors: {\n          [`&:hover .${classNames.check}`]: {\n            opacity: 1,\n          },\n          [`& .${classNames.tooltipHost} .${classNames.checkTooltip}`]: {\n            display: 'block',\n          },\n        },\n      },\n      isAllSelected && classNames.isAllSelected,\n      isResizingColumn && classNames.isResizingColumn,\n      className,\n    ],\n\n    check: [\n      classNames.check,\n      {\n        height: HEADER_HEIGHT,\n      },\n      {\n        selectors: {\n          [`.${IsFocusVisibleClassName} &:focus`]: {\n            opacity: 1,\n          },\n        },\n      },\n    ],\n\n    cellWrapperPadded: {\n      paddingRight: cellStyleProps.cellExtraRightPadding + cellStyleProps.cellRightPadding,\n    },\n\n    cellIsCheck: [\n      cellStyles,\n      classNames.cellIsCheck,\n      {\n        position: 'relative',\n        padding: 0,\n        margin: 0,\n        display: 'inline-flex',\n        alignItems: 'center',\n        border: 'none',\n      },\n      isAllSelected && {\n        opacity: 1,\n      },\n    ],\n\n    cellIsGroupExpander: [\n      cellStyles,\n      {\n        display: 'inline-flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        fontSize: fonts.small.fontSize,\n        padding: 0,\n        border: 'none',\n        width: GROUP_EXPANDER_WIDTH, // align with GroupedList's first expandIcon cell width.\n        color: palette.neutralSecondary,\n        selectors: {\n          ':hover': {\n            backgroundColor: palette.neutralLighter,\n          },\n          ':active': {\n            backgroundColor: palette.neutralLight,\n          },\n        },\n      },\n    ],\n\n    cellIsActionable: {\n      selectors: {\n        ':hover': {\n          color: semanticColors.bodyText,\n          background: semanticColors.listHeaderBackgroundHovered,\n        },\n        ':active': {\n          background: semanticColors.listHeaderBackgroundPressed,\n        },\n      },\n    },\n    cellIsEmpty: {\n      textOverflow: 'clip',\n    },\n\n    cellSizer: [\n      classNames.cellSizer,\n      focusClear(),\n      {\n        display: 'inline-block',\n        position: 'relative',\n        cursor: 'ew-resize',\n        bottom: 0,\n        top: 0,\n        overflow: 'hidden',\n        height: 'inherit',\n        background: 'transparent',\n        zIndex: 1,\n        width: 16,\n        selectors: {\n          ':after': {\n            content: '\"\"',\n            position: 'absolute',\n            top: 0,\n            bottom: 0,\n            width: 1,\n            background: colors.resizerColor,\n            opacity: 0,\n            left: '50%',\n          },\n          ':focus:after': cellSizerFadeInStyles,\n          ':hover:after': cellSizerFadeInStyles,\n          [`&.${classNames.isResizing}:after`]: [\n            cellSizerFadeInStyles,\n            {\n              boxShadow: '0 0 5px 0 rgba(0, 0, 0, 0.4)',\n            },\n          ],\n        },\n      },\n    ],\n\n    cellIsResizing: classNames.isResizing,\n\n    cellSizerStart: {\n      margin: '0 -8px',\n    },\n\n    cellSizerEnd: {\n      margin: 0,\n      marginLeft: -16,\n    },\n\n    collapseButton: [\n      classNames.collapseButton,\n      {\n        transformOrigin: '50% 50%',\n        transition: 'transform .1s linear',\n      },\n      isAllCollapsed\n        ? [\n            classNames.isCollapsed,\n            {\n              transform: 'rotate(0deg)',\n            },\n          ]\n        : {\n            transform: getRTL(theme) ? 'rotate(-90deg)' : 'rotate(90deg)',\n          },\n    ],\n\n    checkTooltip: classNames.checkTooltip,\n\n    sizingOverlay: isSizing && {\n      position: 'absolute',\n      left: 0,\n      top: 0,\n      right: 0,\n      bottom: 0,\n      cursor: 'ew-resize',\n      background: 'rgba(255, 255, 255, 0)',\n      selectors: {\n        [HighContrastSelector]: {\n          background: 'transparent',\n          ...getHighContrastNoAdjustStyle(),\n        },\n      },\n    },\n\n    accessibleLabel: hiddenContentStyle,\n\n    dropHintCircleStyle: [\n      classNames.dropHintCircleStyle,\n      {\n        display: 'inline-block',\n        visibility: 'hidden',\n        position: 'absolute',\n        bottom: 0,\n        height: 9,\n        width: 9,\n        borderRadius: '50%',\n        marginLeft: -5,\n        top: 34,\n        overflow: 'visible',\n        zIndex: 10,\n        border: `1px solid ${palette.themePrimary}`,\n        background: palette.white,\n      },\n    ],\n\n    dropHintCaretStyle: [\n      classNames.dropHintCaretStyle,\n      {\n        display: 'none',\n        position: 'absolute',\n        top: -28,\n        left: -6.5,\n        fontSize: fonts.medium.fontSize,\n        color: palette.themePrimary,\n        overflow: 'visible',\n        zIndex: 10,\n      },\n    ],\n\n    dropHintLineStyle: [\n      classNames.dropHintLineStyle,\n      {\n        display: 'none',\n        position: 'absolute',\n        bottom: 0,\n        top: 0,\n        overflow: 'hidden',\n        height: 42,\n        width: 1,\n        background: palette.themePrimary,\n        zIndex: 10,\n      },\n    ],\n\n    dropHintStyle: {\n      display: 'inline-block',\n      position: 'absolute',\n    },\n  };\n};\n","import { getGlobalClassNames, getFocusStyle } from '../../Styling';\nimport { IDetailsRowCheckStyleProps, IDetailsRowCheckStyles } from './DetailsRowCheck.types';\nimport { DEFAULT_ROW_HEIGHTS } from './DetailsRow.styles';\nimport { HEADER_HEIGHT } from './DetailsHeader.styles';\nimport { CheckGlobalClassNames } from '../../components/Check/Check.styles';\n\nconst GlobalClassNames = {\n  root: 'ms-DetailsRow-check',\n  isDisabled: 'ms-DetailsRow-check--isDisabled',\n  isHeader: 'ms-DetailsRow-check--isHeader',\n};\n\nexport const CHECK_CELL_WIDTH = 48;\n\nexport const getStyles = (props: IDetailsRowCheckStyleProps): IDetailsRowCheckStyles => {\n  const { theme, className, isHeader, selected, anySelected, canSelect, compact, isVisible } = props;\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n  const { rowHeight, compactRowHeight } = DEFAULT_ROW_HEIGHTS;\n\n  const height = isHeader ? HEADER_HEIGHT : compact ? compactRowHeight : rowHeight;\n\n  const isCheckVisible = isVisible || selected || anySelected;\n\n  return {\n    root: [classNames.root, className],\n\n    check: [\n      !canSelect && classNames.isDisabled,\n      isHeader && classNames.isHeader,\n      getFocusStyle(theme),\n      theme.fonts.small,\n      CheckGlobalClassNames.checkHost,\n      {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        cursor: 'default',\n        boxSizing: 'border-box',\n        verticalAlign: 'top',\n        background: 'none',\n        backgroundColor: 'transparent',\n        border: 'none',\n        opacity: isCheckVisible ? 1 : 0,\n        height: height,\n        width: CHECK_CELL_WIDTH,\n        padding: 0,\n        margin: 0,\n      },\n    ],\n\n    isDisabled: [],\n  };\n};\n","import * as React from 'react';\nimport {\n  IDetailsRowCheckProps,\n  IDetailsCheckboxProps,\n  IDetailsRowCheckStyleProps,\n  IDetailsRowCheckStyles,\n} from './DetailsRowCheck.types';\nimport { css, styled, classNamesFunction, composeRenderFunction, getNativeElementProps } from '../../Utilities';\nimport { Check } from '../../Check';\nimport { getStyles } from './DetailsRowCheck.styles';\nimport { ITheme } from '../../Styling';\n\nconst getClassNames = classNamesFunction<IDetailsRowCheckStyleProps, IDetailsRowCheckStyles>();\n\nconst DetailsRowCheckBase: React.FunctionComponent<IDetailsRowCheckProps> = props => {\n  const {\n    isVisible = false,\n    canSelect = false,\n    anySelected = false,\n    selected = false,\n    isHeader = false,\n    className,\n    checkClassName,\n    styles,\n    theme,\n    compact,\n    onRenderDetailsCheckbox,\n    useFastIcons = true, // must be removed from buttonProps\n    ...buttonProps\n  } = props;\n  const defaultCheckboxRender = useFastIcons ? _fastDefaultCheckboxRender : _defaultCheckboxRender;\n\n  const onRenderCheckbox = onRenderDetailsCheckbox\n    ? composeRenderFunction(onRenderDetailsCheckbox, defaultCheckboxRender)\n    : defaultCheckboxRender;\n\n  const classNames = getClassNames(styles, {\n    theme: theme!,\n    canSelect,\n    selected,\n    anySelected,\n    className,\n    isHeader,\n    isVisible,\n    compact,\n  });\n\n  const detailsCheckboxProps: IDetailsCheckboxProps = {\n    checked: selected,\n    theme,\n  };\n\n  const divProps = getNativeElementProps('div', buttonProps, ['aria-label', 'aria-labelledby', 'aria-describedby']);\n\n  return canSelect ? (\n    <div\n      {...buttonProps}\n      role=\"checkbox\"\n      // eslint-disable-next-line deprecation/deprecation\n      className={css(classNames.root, classNames.check)}\n      aria-checked={selected}\n      data-selection-toggle={true}\n      data-automationid=\"DetailsRowCheck\"\n      tabIndex={-1}\n    >\n      {onRenderCheckbox(detailsCheckboxProps)}\n    </div>\n  ) : (\n    // eslint-disable-next-line deprecation/deprecation\n    <div {...divProps} className={css(classNames.root, classNames.check)} />\n  );\n};\n\nconst FastCheck = React.memo((props: { theme?: ITheme; checked?: boolean; className?: string }) => {\n  return <Check theme={props.theme} checked={props.checked} className={props.className} useFastIcons />;\n});\n\nfunction _defaultCheckboxRender(checkboxProps: IDetailsCheckboxProps) {\n  return <Check checked={checkboxProps.checked} />;\n}\n\nfunction _fastDefaultCheckboxRender(checkboxProps: IDetailsCheckboxProps) {\n  return <FastCheck theme={checkboxProps.theme} checked={checkboxProps.checked} />;\n}\n\nexport const DetailsRowCheck = styled<IDetailsRowCheckProps, IDetailsRowCheckStyleProps, IDetailsRowCheckStyles>(\n  DetailsRowCheckBase,\n  getStyles,\n  undefined,\n  { scope: 'DetailsRowCheck' },\n  true,\n);\n","import * as React from 'react';\nimport { IRefObject, IRenderFunction, IStyleFunctionOrObject } from '../../Utilities';\nimport { CollapseAllVisibility } from '../../GroupedList';\nimport { ITheme, IStyle } from '../../Styling';\nimport { DetailsHeaderBase } from './DetailsHeader.base';\nimport { IColumn, DetailsListLayoutMode, IColumnReorderOptions, ColumnDragEndLocation } from './DetailsList.types';\nimport { ICellStyleProps, IDetailsItemProps } from './DetailsRow.types';\nimport { ISelection, SelectionMode } from '../../Selection';\nimport { IDetailsCheckboxProps } from './DetailsRowCheck.types';\nimport { IDetailsColumnRenderTooltipProps } from './DetailsColumn.types';\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IDetailsHeader {\n  /** sets focus into the header */\n  focus: () => boolean;\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IDetailsHeaderBaseProps extends React.ClassAttributes<DetailsHeaderBase>, IDetailsItemProps {\n  /** Theme from the Higher Order Component */\n  theme?: ITheme;\n\n  /** Call to provide customized styling that will layer on top of the variant rules. */\n  styles?: IStyleFunctionOrObject<IDetailsHeaderStyleProps, IDetailsHeaderStyles>;\n\n  /** Ref to the component itself */\n  componentRef?: IRefObject<IDetailsHeader>;\n\n  /** Layout mode - fixedColumns or justified */\n  layoutMode: DetailsListLayoutMode;\n\n  /** Callback for when column sizing has changed */\n  onColumnIsSizingChanged?: (column: IColumn, isSizing: boolean) => void;\n\n  /** Callback for when column is resized */\n  onColumnResized?: (column: IColumn, newWidth: number, columnIndex: number) => void;\n\n  /** Callback for when column is automatically resized */\n  onColumnAutoResized?: (column: IColumn, columnIndex: number) => void;\n\n  /** Callback for when the column is clicked */\n  onColumnClick?: (ev: React.MouseEvent<HTMLElement>, column: IColumn) => void;\n\n  /** Callback for when the column needs to show a context menu */\n  onColumnContextMenu?: (column: IColumn, ev: React.MouseEvent<HTMLElement>) => void;\n\n  /** Callback to render a tooltip for the column header */\n  onRenderColumnHeaderTooltip?: IRenderFunction<IDetailsColumnRenderTooltipProps>;\n\n  /** Whether to collapse for all visibility */\n  collapseAllVisibility?: CollapseAllVisibility;\n\n  /** Whether or not all is collapsed */\n  isAllCollapsed?: boolean;\n\n  /** Callback for when collapse all is toggled */\n  onToggleCollapseAll?: (isAllCollapsed: boolean) => void;\n\n  /** ariaLabel for the entire header */\n  ariaLabel?: string;\n\n  /** ariaLabel for expand/collapse group button */\n  ariaLabelForToggleAllGroupsButton?: string;\n\n  /** ariaLabel for the header checkbox that selects or deselects everything */\n  ariaLabelForSelectAllCheckbox?: string;\n\n  /** ariaLabel for the selection column */\n  ariaLabelForSelectionColumn?: string;\n\n  /** Select all button visibility */\n  selectAllVisibility?: SelectAllVisibility;\n\n  /** Column reordering options */\n  columnReorderOptions?: IColumnReorderOptions;\n\n  /** Column reordering options */\n  columnReorderProps?: IColumnReorderHeaderProps;\n\n  /** Minimum pixels to be moved before dragging is registered */\n  minimumPixelsForDrag?: number;\n\n  /** Overriding class name */\n  className?: string;\n\n  /** If provided, can be used to render a custom checkbox */\n  onRenderDetailsCheckbox?: IRenderFunction<IDetailsCheckboxProps>;\n\n  /**\n   * Whether to use fast icon and check components. The icons can't be targeted by customization\n   * but are still customizable via class names.\n   * @defaultvalue true\n   */\n  useFastIcons?: boolean;\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IDetailsHeaderProps extends IDetailsHeaderBaseProps {\n  /**\n   * Column metadata\n   */\n  columns: IColumn[];\n\n  /**\n   * Selection from utilities\n   */\n  selection: ISelection;\n\n  /**\n   * Selection mode\n   */\n  selectionMode: SelectionMode;\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport enum SelectAllVisibility {\n  none = 0,\n  hidden = 1,\n  visible = 2,\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IDetailsHeaderState {\n  columnResizeDetails?: IColumnResizeDetails;\n  isAllSelected?: boolean;\n  isSizing?: boolean;\n  isAllCollapsed?: boolean;\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IColumnResizeDetails {\n  columnIndex: number;\n  originX?: number;\n  columnMinWidth: number;\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IColumnReorderHeaderProps extends IColumnReorderOptions {\n  /** Callback to notify the column dragEnd event to List\n   * Need this to check whether the dragEnd has happened on\n   * corresponding list or outside of the list\n   */\n  onColumnDragEnd?: (props: { dropLocation?: ColumnDragEndLocation }, event: MouseEvent) => void;\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IDropHintDetails {\n  originX: number; // X index of dropHint Element relative to header\n  startX: number; // start index of the range for the current drophint\n  endX: number; // end index of the range for the current drophint\n  dropHintElementRef: HTMLElement; // Reference for drophint to change the style when needed\n}\n\n/**\n * {@docCategory DetailsList}\n */\nexport type IDetailsHeaderStyleProps = Required<Pick<IDetailsHeaderProps, 'theme'>> &\n  Pick<IDetailsHeaderProps, 'className'> & {\n    /** Whether to hide select all checkbox */\n    isSelectAllHidden?: boolean;\n\n    /** Whether the \"select all\" checkbox is checked */\n    isAllSelected?: boolean;\n\n    /** Is column being resized */\n    isResizingColumn?: boolean;\n\n    /** Are all columns collapsed */\n    isAllCollapsed?: boolean;\n\n    /** Whether the header is sizing */\n    isSizing?: boolean;\n\n    /** Whether checkbox is hidden  */\n    isCheckboxHidden?: boolean;\n\n    cellStyleProps?: ICellStyleProps;\n  };\n\n/**\n * {@docCategory DetailsList}\n */\nexport interface IDetailsHeaderStyles {\n  root: IStyle;\n  check: IStyle;\n\n  /**\n   * @deprecated Not used\n   */\n  cellWrapperPadded: IStyle;\n  cellIsCheck: IStyle;\n\n  /**\n   * @deprecated Not used\n   */\n  cellIsActionable: IStyle;\n\n  /**\n   * @deprecated Not used\n   */\n  cellIsEmpty: IStyle;\n  cellSizer: IStyle;\n  cellSizerStart: IStyle;\n  cellSizerEnd: IStyle;\n  cellIsResizing: IStyle;\n  cellIsGroupExpander: IStyle;\n  collapseButton: IStyle;\n  checkTooltip: IStyle;\n  sizingOverlay: IStyle;\n  dropHintCircleStyle: IStyle;\n  dropHintCaretStyle: IStyle;\n  dropHintLineStyle: IStyle;\n  dropHintStyle: IStyle;\n  accessibleLabel: IStyle;\n}\n","import { EventGroup, getDocument } from '../../Utilities';\nimport { IDragDropHelper, IDragDropTarget, IDragDropOptions, IDragDropEvent, IDragDropContext } from './interfaces';\nimport { ISelection } from '../../utilities/selection/interfaces';\n\nconst MOUSEDOWN_PRIMARY_BUTTON = 0; // for mouse down event we are using ev.button property, 0 means left button\nconst MOUSEMOVE_PRIMARY_BUTTON = 1; // for mouse move event we are using ev.buttons property, 1 means left button\n\nexport interface IDragDropHelperParams {\n  selection: ISelection;\n  minimumPixelsForDrag?: number;\n}\n\nexport class DragDropHelper implements IDragDropHelper {\n  private _dragEnterCounts: { [key: string]: number };\n  private _isDragging: boolean;\n  private _dragData: {\n    eventTarget: EventTarget | null;\n    clientX: number;\n    clientY: number;\n    dataTransfer?: DataTransfer;\n    dropTarget?: IDragDropTarget;\n    dragTarget?: IDragDropTarget;\n  } | null;\n  private _selection: ISelection;\n  private _activeTargets: {\n    [key: string]: {\n      target: IDragDropTarget;\n      dispose: () => void;\n    };\n  };\n  private _events: EventGroup;\n  private _lastId: number;\n  private _initialized: boolean;\n\n  constructor(params: IDragDropHelperParams) {\n    this._selection = params.selection;\n    this._dragEnterCounts = {};\n    this._activeTargets = {};\n    this._lastId = 0;\n    // To make this class cheap to create, which allows simplifying some logic elsewhere,\n    // only initialize the event group and global event handlers as needed.\n    this._initialized = false;\n  }\n\n  public dispose(): void {\n    if (this._events) {\n      this._events.dispose();\n    }\n  }\n\n  public subscribe(\n    root: HTMLElement,\n    events: EventGroup,\n    dragDropOptions: IDragDropOptions,\n  ): {\n    key: string;\n    dispose(): void;\n  } {\n    if (!this._initialized) {\n      this._events = new EventGroup(this);\n\n      const doc = getDocument();\n\n      // clear drag data when mouse up, use capture event to ensure it will be run\n      if (doc) {\n        this._events.on(doc.body, 'mouseup', this._onMouseUp.bind(this), true);\n        this._events.on(doc, 'mouseup', this._onDocumentMouseUp.bind(this), true);\n      }\n\n      this._initialized = true;\n    }\n\n    const { key = `${++this._lastId}` } = dragDropOptions;\n\n    const handlers: {\n      callback: (context: IDragDropContext, event?: any) => void;\n      eventName: string;\n    }[] = [];\n\n    let onDragStart: (event: DragEvent) => void;\n    let onDragLeave: (event: DragEvent) => void;\n    let onDragEnter: (event: DragEvent) => void;\n    let onDragEnd: (event: DragEvent) => void;\n    let onDrop: (event: DragEvent) => void;\n    let onDragOver: (event: DragEvent) => void;\n    let onMouseDown: (event: MouseEvent) => void;\n\n    let isDraggable: boolean;\n    let isDroppable: boolean;\n\n    let activeTarget: {\n      target: IDragDropTarget;\n      dispose: () => void;\n    };\n\n    if (dragDropOptions && root) {\n      const { eventMap, context, updateDropState } = dragDropOptions;\n\n      const dragDropTarget: IDragDropTarget = {\n        root: root,\n        options: dragDropOptions,\n        key: key,\n      };\n\n      isDraggable = this._isDraggable(dragDropTarget);\n      isDroppable = this._isDroppable(dragDropTarget);\n\n      if (isDraggable || isDroppable) {\n        if (eventMap) {\n          for (const event of eventMap) {\n            const handler = {\n              callback: event.callback.bind(null, context),\n              eventName: event.eventName,\n            };\n\n            handlers.push(handler);\n\n            this._events.on(root, handler.eventName, handler.callback);\n          }\n        }\n      }\n\n      if (isDroppable) {\n        // If the target is droppable, wire up global event listeners to track drop-related events.\n        onDragLeave = (event: DragEvent) => {\n          if (!(event as IDragDropEvent).isHandled) {\n            (event as IDragDropEvent).isHandled = true;\n            this._dragEnterCounts[key]--;\n            if (this._dragEnterCounts[key] === 0) {\n              updateDropState(false /* isDropping */, event);\n            }\n          }\n        };\n\n        onDragEnter = (event: DragEvent) => {\n          event.preventDefault(); // needed for IE\n          if (!(event as IDragDropEvent).isHandled) {\n            (event as IDragDropEvent).isHandled = true;\n            this._dragEnterCounts[key]++;\n            if (this._dragEnterCounts[key] === 1) {\n              updateDropState(true /* isDropping */, event);\n            }\n          }\n        };\n\n        onDragEnd = (event: DragEvent) => {\n          this._dragEnterCounts[key] = 0;\n          updateDropState(false /* isDropping */, event);\n        };\n\n        onDrop = (event: DragEvent) => {\n          this._dragEnterCounts[key] = 0;\n          updateDropState(false /* isDropping */, event);\n\n          if (dragDropOptions.onDrop) {\n            dragDropOptions.onDrop(dragDropOptions.context.data, event);\n          }\n        };\n\n        onDragOver = (event: DragEvent) => {\n          event.preventDefault();\n          if (dragDropOptions.onDragOver) {\n            dragDropOptions.onDragOver(dragDropOptions.context.data, event);\n          }\n        };\n\n        this._dragEnterCounts[key] = 0;\n\n        // dragenter and dragleave will be fired when hover to the child element\n        // but we only want to change state when enter or leave the current element\n        // use the count to ensure it.\n        events.on(root, 'dragenter', onDragEnter);\n        events.on(root, 'dragleave', onDragLeave);\n        events.on(root, 'dragend', onDragEnd);\n        events.on(root, 'drop', onDrop);\n        events.on(root, 'dragover', onDragOver);\n      }\n\n      if (isDraggable) {\n        // If the target is draggable, wire up local event listeners for mouse events.\n        onMouseDown = this._onMouseDown.bind(this, dragDropTarget);\n        onDragEnd = this._onDragEnd.bind(this, dragDropTarget);\n\n        // We need to add in data so that on Firefox we show the ghost element when dragging\n        onDragStart = (event: DragEvent) => {\n          const options = dragDropOptions;\n          if (options && options.onDragStart) {\n            options.onDragStart(options.context.data, options.context.index, this._selection.getSelection(), event);\n          }\n          this._isDragging = true;\n          if (event.dataTransfer) {\n            event.dataTransfer.setData('id', root.id);\n          }\n        };\n\n        events.on(root, 'dragstart', onDragStart);\n        events.on(root, 'mousedown', onMouseDown);\n        events.on(root, 'dragend', onDragEnd);\n      }\n\n      activeTarget = {\n        target: dragDropTarget,\n        dispose: () => {\n          if (this._activeTargets[key] === activeTarget) {\n            delete this._activeTargets[key];\n          }\n\n          if (root) {\n            for (const handler of handlers) {\n              this._events.off(root, handler.eventName, handler.callback);\n            }\n\n            if (isDroppable) {\n              events.off(root, 'dragenter', onDragEnter);\n              events.off(root, 'dragleave', onDragLeave);\n              events.off(root, 'dragend', onDragEnd);\n              events.off(root, 'dragover', onDragOver);\n              events.off(root, 'drop', onDrop);\n            }\n\n            if (isDraggable) {\n              events.off(root, 'dragstart', onDragStart);\n              events.off(root, 'mousedown', onMouseDown);\n              events.off(root, 'dragend', onDragEnd);\n            }\n          }\n        },\n      };\n\n      this._activeTargets[key] = activeTarget;\n    }\n\n    return {\n      key: key,\n      dispose: () => {\n        if (activeTarget) {\n          activeTarget.dispose();\n        }\n      },\n    };\n  }\n\n  public unsubscribe(root: HTMLElement, key: string): void {\n    const activeTarget = this._activeTargets[key];\n\n    if (activeTarget) {\n      activeTarget.dispose();\n    }\n  }\n\n  private _onDragEnd(target: IDragDropTarget, event: DragEvent): void {\n    const { options } = target;\n    if (options.onDragEnd) {\n      options.onDragEnd(options.context.data, event);\n    }\n  }\n\n  /**\n   * clear drag data when mouse up on body\n   */\n  private _onMouseUp(event: MouseEvent): void {\n    this._isDragging = false;\n    if (this._dragData) {\n      for (const key of Object.keys(this._activeTargets)) {\n        const activeTarget = this._activeTargets[key];\n\n        if (activeTarget.target.root) {\n          this._events.off(activeTarget.target.root, 'mousemove');\n          this._events.off(activeTarget.target.root, 'mouseleave');\n        }\n      }\n\n      if (this._dragData.dropTarget) {\n        // raise dragleave event to let dropTarget know it need to remove dropping style\n        EventGroup.raise(this._dragData.dropTarget.root, 'dragleave');\n        EventGroup.raise(this._dragData.dropTarget.root, 'drop');\n      }\n    }\n    this._dragData = null;\n  }\n\n  /**\n   * clear drag data when mouse up outside of the document\n   */\n  private _onDocumentMouseUp(event: MouseEvent): void {\n    const doc = getDocument();\n\n    if (doc && event.target === doc.documentElement) {\n      this._onMouseUp(event);\n    }\n  }\n\n  /**\n   * when mouse move over a new drop target while dragging some items,\n   * fire dragleave on the old target and fire dragenter to the new target\n   * The target will handle style change on dragenter and dragleave events.\n   */\n  private _onMouseMove(target: IDragDropTarget, event: MouseEvent): void {\n    const {\n      // use buttons property here since ev.button in some edge case is not updating well during the move.\n      // but firefox doesn't support it, so we set the default value when it is not defined.\n      buttons = MOUSEMOVE_PRIMARY_BUTTON,\n    } = event;\n\n    if (this._dragData && buttons !== MOUSEMOVE_PRIMARY_BUTTON) {\n      // cancel mouse down event and return early when the primary button is not pressed\n      this._onMouseUp(event);\n      return;\n    }\n\n    const { root, key } = target;\n    if (this._isDragging) {\n      if (this._isDroppable(target)) {\n        // we can have nested drop targets in the DOM, like a folder inside a group. In that case, when we drag into\n        // the inner target (folder), we first set dropTarget to the inner element. But the same event is bubbled to the\n        // outer target too, and we need to prevent the outer one from taking over.\n        // So, check if the last dropTarget is not a child of the current.\n\n        if (this._dragData) {\n          if (\n            this._dragData.dropTarget &&\n            this._dragData.dropTarget.key !== key &&\n            !this._isChild(root, this._dragData.dropTarget.root)\n          ) {\n            if (this._dragEnterCounts[this._dragData.dropTarget.key] > 0) {\n              EventGroup.raise(this._dragData.dropTarget.root, 'dragleave');\n              EventGroup.raise(root, 'dragenter');\n              this._dragData.dropTarget = target;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * when mouse leave a target while dragging some items, fire dragleave to the target\n   */\n  private _onMouseLeave(target: IDragDropTarget, event: MouseEvent): void {\n    if (this._isDragging) {\n      if (this._dragData && this._dragData.dropTarget && this._dragData.dropTarget.key === target.key) {\n        EventGroup.raise(target.root, 'dragleave');\n        this._dragData.dropTarget = undefined;\n      }\n    }\n  }\n\n  /**\n   * when mouse down on a draggable item, we start to track dragdata.\n   */\n  private _onMouseDown(target: IDragDropTarget, event: MouseEvent): void {\n    if (event.button !== MOUSEDOWN_PRIMARY_BUTTON) {\n      // Ignore anything except the primary button.\n      return;\n    }\n\n    if (this._isDraggable(target)) {\n      this._dragData = {\n        clientX: event.clientX,\n        clientY: event.clientY,\n        eventTarget: event.target,\n        dragTarget: target,\n      };\n\n      for (const key of Object.keys(this._activeTargets)) {\n        const activeTarget = this._activeTargets[key];\n        if (activeTarget.target.root) {\n          this._events.on(activeTarget.target.root, 'mousemove', this._onMouseMove.bind(this, activeTarget.target));\n          this._events.on(activeTarget.target.root, 'mouseleave', this._onMouseLeave.bind(this, activeTarget.target));\n        }\n      }\n    } else {\n      this._dragData = null;\n    }\n  }\n\n  /**\n   * determine whether the child target is a descendant of the parent\n   */\n  private _isChild(parentElement: HTMLElement, childElement: HTMLElement): boolean {\n    while (childElement && childElement.parentElement) {\n      if (childElement.parentElement === parentElement) {\n        return true;\n      }\n      childElement = childElement.parentElement;\n    }\n    return false;\n  }\n\n  private _isDraggable(target: IDragDropTarget): boolean {\n    const { options } = target;\n    return !!(options.canDrag && options.canDrag(options.context.data));\n  }\n\n  private _isDroppable(target: IDragDropTarget): boolean {\n    // TODO: take the drag item into consideration to prevent dragging an item into the same group\n    const { options } = target;\n    const dragContext =\n      this._dragData && this._dragData.dragTarget ? this._dragData.dragTarget.options.context : undefined;\n    return !!(options.canDrop && options.canDrop(options.context, dragContext));\n  }\n}\n","import * as React from 'react';\nimport { Icon, FontIcon } from '../../Icon';\nimport { IProcessedStyleSet } from '../../Styling';\nimport {\n  initializeComponentRef,\n  EventGroup,\n  Async,\n  IDisposable,\n  classNamesFunction,\n  composeRenderFunction,\n} from '../../Utilities';\nimport { ColumnActionsMode } from './DetailsList.types';\nimport { IDragDropOptions } from '../../DragDrop';\nimport { DEFAULT_CELL_STYLE_PROPS } from './DetailsRow.styles';\nimport {\n  IDetailsColumnStyleProps,\n  IDetailsColumnProps,\n  IDetailsColumnStyles,\n  IDetailsColumnRenderTooltipProps,\n  IDetailsColumnFilterIconProps,\n} from './DetailsColumn.types';\n\nconst MOUSEDOWN_PRIMARY_BUTTON = 0; // for mouse down event we are using ev.button property, 0 means left button\n\nconst getClassNames = classNamesFunction<IDetailsColumnStyleProps, IDetailsColumnStyles>();\nconst TRANSITION_DURATION_DRAG = 200; // ms\nconst TRANSITION_DURATION_DROP = 1500; // ms\nconst CLASSNAME_ADD_INTERVAL = 20; // ms\n\nconst defaultOnRenderHeader = (classNames: IProcessedStyleSet<IDetailsColumnStyles>) => (\n  props?: IDetailsColumnProps,\n): JSX.Element | null => {\n  if (!props) {\n    return null;\n  }\n\n  if (props.column.isIconOnly) {\n    return <span className={classNames.accessibleLabel}>{props.column.name}</span>;\n  }\n\n  return <>{props.column.name}</>;\n};\n\n/**\n * Component for rendering columns in a `DetailsList`.\n *\n * {@docCategory DetailsList}\n */\nexport class DetailsColumnBase extends React.Component<IDetailsColumnProps> {\n  private _async: Async;\n  private _events: EventGroup;\n  private _root = React.createRef<HTMLDivElement>();\n  private _dragDropSubscription?: IDisposable;\n  private _classNames: IProcessedStyleSet<IDetailsColumnStyles>;\n\n  constructor(props: IDetailsColumnProps) {\n    super(props);\n    initializeComponentRef(this);\n    this._async = new Async(this);\n    this._events = new EventGroup(this);\n  }\n\n  public render(): JSX.Element {\n    const {\n      column,\n      columnIndex,\n      parentId,\n      isDraggable,\n      styles,\n      theme,\n      cellStyleProps = DEFAULT_CELL_STYLE_PROPS,\n      useFastIcons = true,\n    } = this.props;\n    const { onRenderColumnHeaderTooltip = this._onRenderColumnHeaderTooltip } = this.props;\n\n    this._classNames = getClassNames(styles, {\n      theme: theme!,\n      headerClassName: column.headerClassName,\n      iconClassName: column.iconClassName,\n      isActionable: column.columnActionsMode !== ColumnActionsMode.disabled,\n      isEmpty: !column.name,\n      isIconVisible: column.isSorted || column.isGrouped || column.isFiltered,\n      isPadded: column.isPadded,\n      isIconOnly: column.isIconOnly,\n      cellStyleProps,\n      transitionDurationDrag: TRANSITION_DURATION_DRAG,\n      transitionDurationDrop: TRANSITION_DURATION_DROP,\n    });\n\n    const classNames = this._classNames;\n    const IconComponent = useFastIcons ? FontIcon : Icon;\n\n    const onRenderFilterIcon = column.onRenderFilterIcon\n      ? composeRenderFunction(column.onRenderFilterIcon, this._onRenderFilterIcon(this._classNames))\n      : this._onRenderFilterIcon(this._classNames);\n\n    const onRenderHeader = column.onRenderHeader\n      ? composeRenderFunction(column.onRenderHeader, defaultOnRenderHeader(this._classNames))\n      : defaultOnRenderHeader(this._classNames);\n\n    const hasInnerButton =\n      column.columnActionsMode !== ColumnActionsMode.disabled &&\n      (column.onColumnClick !== undefined || this.props.onColumnClick !== undefined);\n    const accNameDescription = {\n      'aria-label': column.isIconOnly ? column.name : undefined,\n      'aria-labelledby': column.isIconOnly ? undefined : `${parentId}-${column.key}-name`,\n      'aria-describedby':\n        !this.props.onRenderColumnHeaderTooltip && this._hasAccessibleLabel()\n          ? `${parentId}-${column.key}-tooltip`\n          : undefined,\n    };\n\n    return (\n      <>\n        <div\n          key={column.key}\n          ref={this._root}\n          role={'columnheader'}\n          {...(!hasInnerButton && accNameDescription)}\n          aria-sort={column.isSorted ? (column.isSortedDescending ? 'descending' : 'ascending') : 'none'}\n          aria-colindex={columnIndex}\n          className={classNames.root}\n          data-is-draggable={isDraggable}\n          draggable={isDraggable}\n          style={{\n            width:\n              column.calculatedWidth! +\n              cellStyleProps.cellLeftPadding +\n              cellStyleProps.cellRightPadding +\n              (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0),\n          }}\n          data-automationid={'ColumnsHeaderColumn'}\n          data-item-key={column.key}\n        >\n          {isDraggable && (\n            <IconComponent iconName=\"GripperBarVertical\" className={classNames.gripperBarVerticalStyle} />\n          )}\n          {onRenderColumnHeaderTooltip(\n            {\n              hostClassName: classNames.cellTooltip,\n              id: `${parentId}-${column.key}-tooltip`,\n              setAriaDescribedBy: false,\n              column,\n              content: column.columnActionsMode !== ColumnActionsMode.disabled ? column.ariaLabel : '',\n              children: (\n                <span\n                  id={`${parentId}-${column.key}`}\n                  className={classNames.cellTitle}\n                  data-is-focusable={column.columnActionsMode !== ColumnActionsMode.disabled}\n                  role={hasInnerButton ? 'button' : undefined}\n                  {...(hasInnerButton && accNameDescription)}\n                  onContextMenu={this._onColumnContextMenu}\n                  onClick={this._onColumnClick}\n                  aria-haspopup={column.columnActionsMode === ColumnActionsMode.hasDropdown}\n                  aria-expanded={\n                    column.columnActionsMode === ColumnActionsMode.hasDropdown ? !!column.isMenuOpen : undefined\n                  }\n                >\n                  <span id={`${parentId}-${column.key}-name`} className={classNames.cellName}>\n                    {(column.iconName || column.iconClassName) && (\n                      <IconComponent className={classNames.iconClassName} iconName={column.iconName} />\n                    )}\n\n                    {onRenderHeader(this.props)}\n                  </span>\n\n                  {column.isFiltered && <IconComponent className={classNames.nearIcon} iconName=\"Filter\" />}\n\n                  {column.isSorted && (\n                    <IconComponent\n                      className={classNames.sortIcon}\n                      iconName={column.isSortedDescending ? 'SortDown' : 'SortUp'}\n                    />\n                  )}\n\n                  {column.isGrouped && <IconComponent className={classNames.nearIcon} iconName=\"GroupedDescending\" />}\n\n                  {column.columnActionsMode === ColumnActionsMode.hasDropdown &&\n                    !column.isIconOnly &&\n                    onRenderFilterIcon({\n                      'aria-hidden': true,\n                      columnProps: this.props,\n                      className: classNames.filterChevron,\n                      iconName: 'ChevronDown',\n                    })}\n                </span>\n              ),\n            },\n            this._onRenderColumnHeaderTooltip,\n          )}\n        </div>\n        {!this.props.onRenderColumnHeaderTooltip ? this._renderAccessibleLabel() : null}\n      </>\n    );\n  }\n\n  public componentDidMount(): void {\n    if (this.props.dragDropHelper && this.props.isDraggable) {\n      this._addDragDropHandling();\n    }\n\n    const classNames = this._classNames;\n\n    if (this.props.isDropped) {\n      if (this._root.current) {\n        this._root.current.classList.add(classNames.borderAfterDropping);\n\n        this._async.setTimeout(() => {\n          if (this._root.current) {\n            this._root.current.classList.add(classNames.noBorderAfterDropping);\n          }\n        }, CLASSNAME_ADD_INTERVAL);\n      }\n\n      this._async.setTimeout(() => {\n        if (this._root.current) {\n          this._root.current.classList.remove(classNames.borderAfterDropping);\n          this._root.current.classList.remove(classNames.noBorderAfterDropping);\n        }\n      }, TRANSITION_DURATION_DROP + CLASSNAME_ADD_INTERVAL);\n    }\n  }\n\n  public componentWillUnmount(): void {\n    if (this._dragDropSubscription) {\n      this._dragDropSubscription.dispose();\n      delete this._dragDropSubscription;\n    }\n    this._async.dispose();\n    this._events.dispose();\n  }\n\n  public componentDidUpdate(): void {\n    if (!this._dragDropSubscription && this.props.dragDropHelper && this.props.isDraggable) {\n      this._addDragDropHandling();\n    }\n\n    if (this._dragDropSubscription && !this.props.isDraggable) {\n      this._dragDropSubscription.dispose();\n      this._events.off(this._root.current, 'mousedown');\n      delete this._dragDropSubscription;\n    }\n  }\n\n  private _onRenderFilterIcon = (classNames: IProcessedStyleSet<IDetailsColumnStyles>) => (\n    props: IDetailsColumnFilterIconProps,\n  ): JSX.Element => {\n    const { columnProps, ...iconProps } = props;\n    const IconComponent = columnProps?.useFastIcons ? FontIcon : Icon;\n\n    return <IconComponent {...iconProps} />;\n  };\n\n  private _onRenderColumnHeaderTooltip = (tooltipHostProps: IDetailsColumnRenderTooltipProps): JSX.Element => {\n    return <span className={tooltipHostProps.hostClassName}>{tooltipHostProps.children}</span>;\n  };\n\n  private _onColumnClick = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { onColumnClick, column } = this.props;\n\n    if (column.columnActionsMode === ColumnActionsMode.disabled) {\n      return;\n    }\n\n    if (column.onColumnClick) {\n      column.onColumnClick(ev, column);\n    }\n\n    if (onColumnClick) {\n      onColumnClick(ev, column);\n    }\n  };\n\n  private _getColumnDragDropOptions(): IDragDropOptions {\n    const { columnIndex } = this.props;\n    const options = {\n      selectionIndex: columnIndex,\n      context: { data: columnIndex, index: columnIndex },\n      canDrag: () => this.props.isDraggable!,\n      canDrop: () => false,\n      onDragStart: this._onDragStart,\n      updateDropState: () => undefined,\n      onDrop: () => undefined,\n      onDragEnd: this._onDragEnd,\n    };\n    return options;\n  }\n\n  private _hasAccessibleLabel(): boolean {\n    const { column } = this.props;\n\n    return !!(\n      column.ariaLabel ||\n      column.filterAriaLabel ||\n      column.sortAscendingAriaLabel ||\n      column.sortDescendingAriaLabel ||\n      column.groupAriaLabel\n    );\n  }\n\n  private _renderAccessibleLabel(): JSX.Element | null {\n    const { column, parentId } = this.props;\n    const classNames = this._classNames;\n\n    return this._hasAccessibleLabel() && !this.props.onRenderColumnHeaderTooltip ? (\n      <label\n        key={`${column.key}_label`}\n        id={`${parentId}-${column.key}-tooltip`}\n        className={classNames.accessibleLabel}\n      >\n        {column.ariaLabel}\n        {(column.isFiltered && column.filterAriaLabel) || null}\n        {(column.isSorted &&\n          (column.isSortedDescending ? column.sortDescendingAriaLabel : column.sortAscendingAriaLabel)) ||\n          null}\n        {(column.isGrouped && column.groupAriaLabel) || null}\n      </label>\n    ) : null;\n  }\n\n  private _onDragStart = (item?: any, itemIndex?: number, selectedItems?: any[], event?: MouseEvent): void => {\n    const classNames = this._classNames;\n    if (itemIndex) {\n      this._updateHeaderDragInfo(itemIndex);\n      this._root.current!.classList.add(classNames.borderWhileDragging);\n      this._async.setTimeout(() => {\n        if (this._root.current) {\n          this._root.current.classList.add(classNames.noBorderWhileDragging);\n        }\n      }, CLASSNAME_ADD_INTERVAL);\n    }\n  };\n\n  private _onDragEnd = (item?: any, event?: MouseEvent): void => {\n    const classNames = this._classNames;\n    if (event) {\n      this._updateHeaderDragInfo(-1, event);\n    }\n    this._root.current!.classList.remove(classNames.borderWhileDragging);\n    this._root.current!.classList.remove(classNames.noBorderWhileDragging);\n  };\n\n  private _updateHeaderDragInfo = (itemIndex: number, event?: MouseEvent) => {\n    /* eslint-disable deprecation/deprecation */\n    if (this.props.setDraggedItemIndex) {\n      this.props.setDraggedItemIndex(itemIndex);\n    }\n    /* eslint-enable deprecation/deprecation */\n    if (this.props.updateDragInfo) {\n      this.props.updateDragInfo({ itemIndex }, event);\n    }\n  };\n\n  private _onColumnContextMenu = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { onColumnContextMenu, column } = this.props;\n    if (column.onColumnContextMenu) {\n      column.onColumnContextMenu(column, ev);\n      ev.preventDefault();\n    }\n    if (onColumnContextMenu) {\n      onColumnContextMenu(column, ev);\n      ev.preventDefault();\n    }\n  };\n\n  private _onRootMouseDown = (ev: MouseEvent): void => {\n    const { isDraggable } = this.props;\n    // Ignore anything except the primary button.\n    if (isDraggable && ev.button === MOUSEDOWN_PRIMARY_BUTTON) {\n      ev.stopPropagation();\n    }\n  };\n\n  private _addDragDropHandling() {\n    this._dragDropSubscription = this.props.dragDropHelper!.subscribe(\n      this._root.current!,\n      this._events,\n      this._getColumnDragDropOptions(),\n    );\n\n    // We need to use native on this to prevent MarqueeSelection from handling the event before us.\n    this._events.on(this._root.current, 'mousedown', this._onRootMouseDown);\n  }\n}\n","import { IDetailsColumnStyleProps, IDetailsColumnStyles } from './DetailsColumn.types';\nimport { getFocusStyle, getGlobalClassNames, hiddenContentStyle, IStyle, FontWeights } from '../../Styling';\nimport { DEFAULT_CELL_STYLE_PROPS } from './DetailsRow.styles';\nimport { getCellStyles } from './DetailsHeader.styles';\n\nconst GlobalClassNames = {\n  isActionable: 'is-actionable',\n  cellIsCheck: 'ms-DetailsHeader-cellIsCheck',\n  collapseButton: 'ms-DetailsHeader-collapseButton',\n  isCollapsed: 'is-collapsed',\n  isAllSelected: 'is-allSelected',\n  isSelectAllHidden: 'is-selectAllHidden',\n  isResizingColumn: 'is-resizingColumn',\n  isEmpty: 'is-empty',\n  isIconVisible: 'is-icon-visible',\n  cellSizer: 'ms-DetailsHeader-cellSizer',\n  isResizing: 'is-resizing',\n  dropHintCircleStyle: 'ms-DetailsHeader-dropHintCircleStyle',\n  dropHintLineStyle: 'ms-DetailsHeader-dropHintLineStyle',\n  cellTitle: 'ms-DetailsHeader-cellTitle',\n  cellName: 'ms-DetailsHeader-cellName',\n  filterChevron: 'ms-DetailsHeader-filterChevron',\n  gripperBarVerticalStyle: 'ms-DetailsColumn-gripperBar',\n  nearIcon: 'ms-DetailsColumn-nearIcon',\n};\n\nexport const getStyles = (props: IDetailsColumnStyleProps): IDetailsColumnStyles => {\n  const {\n    theme,\n    headerClassName,\n    iconClassName,\n    isActionable,\n    isEmpty,\n    isIconVisible,\n    isPadded,\n    isIconOnly,\n    cellStyleProps = DEFAULT_CELL_STYLE_PROPS,\n    transitionDurationDrag,\n    transitionDurationDrop,\n  } = props;\n\n  const { semanticColors, palette, fonts } = theme;\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  const colors = {\n    iconForegroundColor: semanticColors.bodySubtext,\n    headerForegroundColor: semanticColors.bodyText,\n    headerBackgroundColor: semanticColors.bodyBackground,\n    dropdownChevronForegroundColor: palette.neutralSecondary,\n    resizerColor: palette.neutralTertiaryAlt,\n  };\n\n  const nearIconStyle: IStyle = {\n    color: colors.iconForegroundColor,\n    opacity: 1,\n    paddingLeft: 8,\n  };\n\n  const borderWhileDragging: IStyle = {\n    outline: `1px solid ${palette.themePrimary}`,\n  };\n\n  const borderAfterDragOrDrop: IStyle = {\n    outlineColor: 'transparent',\n  };\n\n  return {\n    root: [\n      getCellStyles(props),\n      fonts.small,\n      isActionable && [\n        classNames.isActionable,\n        {\n          selectors: {\n            ':hover': {\n              color: semanticColors.bodyText,\n              background: semanticColors.listHeaderBackgroundHovered,\n            },\n            ':active': {\n              background: semanticColors.listHeaderBackgroundPressed,\n            },\n          },\n        },\n      ],\n      isEmpty && [\n        classNames.isEmpty,\n        {\n          textOverflow: 'clip',\n        },\n      ],\n      isIconVisible && classNames.isIconVisible,\n      isPadded && {\n        paddingRight: cellStyleProps.cellExtraRightPadding + cellStyleProps.cellRightPadding,\n      },\n      {\n        selectors: {\n          ':hover i[data-icon-name=\"GripperBarVertical\"]': {\n            display: 'block',\n          },\n        },\n      },\n      headerClassName,\n    ],\n\n    gripperBarVerticalStyle: {\n      display: 'none',\n      position: 'absolute',\n      textAlign: 'left',\n      color: palette.neutralTertiary,\n      left: 1,\n    },\n\n    nearIcon: [classNames.nearIcon, nearIconStyle],\n\n    sortIcon: [\n      nearIconStyle,\n      {\n        paddingLeft: 4,\n        position: 'relative',\n        top: 1,\n      },\n    ],\n\n    iconClassName: [\n      {\n        color: colors.iconForegroundColor,\n        opacity: 1,\n      },\n      iconClassName,\n    ],\n\n    filterChevron: [\n      classNames.filterChevron,\n      {\n        color: colors.dropdownChevronForegroundColor,\n        paddingLeft: 6,\n        verticalAlign: 'middle',\n        fontSize: fonts.small.fontSize,\n      },\n    ],\n\n    cellTitle: [\n      classNames.cellTitle,\n      getFocusStyle(theme),\n      {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'flex-start',\n        alignItems: 'stretch',\n        boxSizing: 'border-box',\n        overflow: 'hidden',\n        padding: `0 ${cellStyleProps.cellRightPadding}px 0 ${cellStyleProps.cellLeftPadding}px`,\n        ...(isIconOnly\n          ? {\n              alignContent: 'flex-end',\n              maxHeight: '100%',\n              flexWrap: 'wrap-reverse',\n            }\n          : {}),\n      },\n    ],\n\n    cellName: [\n      classNames.cellName,\n      {\n        flex: '0 1 auto',\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        fontWeight: FontWeights.semibold,\n        fontSize: fonts.medium.fontSize,\n      },\n      isIconOnly && {\n        selectors: {\n          [`.${classNames.nearIcon}`]: {\n            paddingLeft: 0,\n          },\n        },\n      },\n    ],\n\n    cellTooltip: {\n      display: 'block',\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      bottom: 0,\n      right: 0,\n    },\n\n    accessibleLabel: hiddenContentStyle,\n\n    borderWhileDragging: borderWhileDragging,\n\n    noBorderWhileDragging: [borderAfterDragOrDrop, { transition: `outline ${transitionDurationDrag}ms ease` }],\n\n    borderAfterDropping: borderWhileDragging,\n\n    noBorderAfterDropping: [borderAfterDragOrDrop, { transition: `outline  ${transitionDurationDrop}ms ease` }],\n  };\n};\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { IDetailsColumnProps, IDetailsColumnStyleProps, IDetailsColumnStyles } from './DetailsColumn.types';\nimport { DetailsColumnBase } from './DetailsColumn.base';\nimport { getStyles } from './DetailsColumn.styles';\n\nexport { IDetailsColumnProps };\n\nexport const DetailsColumn: React.FunctionComponent<IDetailsColumnProps> = styled<\n  IDetailsColumnProps,\n  IDetailsColumnStyleProps,\n  IDetailsColumnStyles\n>(DetailsColumnBase, getStyles, undefined, { scope: 'DetailsColumn' });\n","import * as React from 'react';\nimport { IProcessedStyleSet } from '../../Styling';\nimport {\n  initializeComponentRef,\n  EventGroup,\n  IDisposable,\n  css,\n  getRTL,\n  getId,\n  KeyCodes,\n  classNamesFunction,\n} from '../../Utilities';\nimport {\n  IColumn,\n  IDetailsHeaderBaseProps,\n  IColumnDragDropDetails,\n  ColumnDragEndLocation,\n  CheckboxVisibility,\n} from './DetailsList.types';\nimport { IFocusZone, FocusZone, FocusZoneDirection } from '../../FocusZone';\nimport { Icon, FontIcon } from '../../Icon';\nimport { Layer } from '../../Layer';\nimport { GroupSpacer } from '../GroupedList/GroupSpacer';\nimport { CollapseAllVisibility } from '../../GroupedList';\nimport { DetailsRowCheck } from './DetailsRowCheck';\nimport { ITooltipHostProps } from '../../Tooltip';\nimport { ISelection, SelectionMode, SELECTION_CHANGE } from '../../Selection';\nimport { IDragDropOptions, DragDropHelper } from '../../DragDrop';\nimport { DetailsColumn, IDetailsColumnProps } from '../../components/DetailsList/DetailsColumn';\nimport {\n  SelectAllVisibility,\n  IDropHintDetails,\n  IColumnReorderHeaderProps,\n  IDetailsHeaderState,\n} from './DetailsHeader.types';\nimport { IDetailsHeaderStyleProps, IDetailsHeaderStyles, IDetailsHeader } from './DetailsHeader.types';\n\nconst getClassNames = classNamesFunction<IDetailsHeaderStyleProps, IDetailsHeaderStyles>();\n\nconst MOUSEDOWN_PRIMARY_BUTTON = 0; // for mouse down event we are using ev.button property, 0 means left button\nconst MOUSEMOVE_PRIMARY_BUTTON = 1; // for mouse move event we are using ev.buttons property, 1 means left button\n\nconst NO_COLUMNS: IColumn[] = [];\n\nexport class DetailsHeaderBase\n  extends React.Component<IDetailsHeaderBaseProps, IDetailsHeaderState>\n  implements IDetailsHeader {\n  public static defaultProps = {\n    selectAllVisibility: SelectAllVisibility.visible,\n    collapseAllVisibility: CollapseAllVisibility.visible,\n    useFastIcons: true,\n  };\n\n  private _classNames: IProcessedStyleSet<IDetailsHeaderStyles>;\n  private _rootElement = React.createRef<HTMLElement>();\n  private _events: EventGroup;\n  private _rootComponent = React.createRef<IFocusZone>();\n  private _id: string;\n  private _draggedColumnIndex = -1;\n  private _dropHintDetails: { [key: number]: IDropHintDetails } = {};\n  private _dragDropHelper: DragDropHelper;\n  private _currentDropHintIndex: number;\n  private _subscriptionObject?: IDisposable;\n  private _onDropIndexInfo: {\n    sourceIndex: number;\n    targetIndex: number;\n  };\n\n  constructor(props: IDetailsHeaderBaseProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._events = new EventGroup(this);\n\n    this.state = {\n      columnResizeDetails: undefined,\n      isAllCollapsed: this.props.isAllCollapsed,\n      isAllSelected: !!this.props.selection && this.props.selection.isAllSelected(),\n    };\n\n    this._onDropIndexInfo = {\n      sourceIndex: -1,\n      targetIndex: -1,\n    };\n    this._id = getId('header');\n    this._currentDropHintIndex = -1;\n\n    // The drag drop handler won't do any work until subscribe() is called,\n    // so always set it up for convenience\n    this._dragDropHelper = new DragDropHelper({\n      selection: {\n        getSelection: () => {\n          return;\n        },\n      } as ISelection,\n      minimumPixelsForDrag: this.props.minimumPixelsForDrag,\n    });\n  }\n\n  public componentDidMount(): void {\n    const { selection } = this.props;\n\n    this._events.on(selection, SELECTION_CHANGE, this._onSelectionChanged);\n\n    // this._rootElement.current will be null in tests using react-test-renderer\n    if (this._rootElement.current) {\n      // We need to use native on this to prevent MarqueeSelection from handling the event before us.\n      this._events.on(this._rootElement.current, 'mousedown', this._onRootMouseDown);\n\n      this._events.on(this._rootElement.current, 'keydown', this._onRootKeyDown);\n\n      if (this._getColumnReorderProps()) {\n        this._subscriptionObject = this._dragDropHelper.subscribe(\n          this._rootElement.current,\n          this._events,\n          this._getHeaderDragDropOptions(),\n        );\n      }\n    }\n  }\n\n  public componentDidUpdate(prevProps: IDetailsHeaderBaseProps): void {\n    if (this._getColumnReorderProps()) {\n      if (!this._subscriptionObject && this._rootElement.current) {\n        this._subscriptionObject = this._dragDropHelper.subscribe(\n          this._rootElement.current,\n          this._events,\n          this._getHeaderDragDropOptions(),\n        );\n      }\n    } else if (this._subscriptionObject) {\n      this._subscriptionObject.dispose();\n      delete this._subscriptionObject;\n    }\n\n    if (this.props !== prevProps && this._onDropIndexInfo.sourceIndex >= 0 && this._onDropIndexInfo.targetIndex >= 0) {\n      const { columns: previousColumns = NO_COLUMNS } = prevProps;\n      const { columns = NO_COLUMNS } = this.props;\n      if (previousColumns[this._onDropIndexInfo.sourceIndex].key === columns[this._onDropIndexInfo.targetIndex].key) {\n        this._onDropIndexInfo = {\n          sourceIndex: -1,\n          targetIndex: -1,\n        };\n      }\n    }\n\n    if (this.props.isAllCollapsed !== prevProps.isAllCollapsed) {\n      this.setState({ isAllCollapsed: this.props.isAllCollapsed });\n    }\n  }\n\n  public componentWillUnmount(): void {\n    if (this._subscriptionObject) {\n      this._subscriptionObject.dispose();\n      delete this._subscriptionObject;\n    }\n\n    this._dragDropHelper.dispose();\n\n    this._events.dispose();\n  }\n\n  public render(): JSX.Element {\n    const {\n      columns = NO_COLUMNS,\n      ariaLabel,\n      ariaLabelForToggleAllGroupsButton,\n      ariaLabelForSelectAllCheckbox,\n      selectAllVisibility,\n      ariaLabelForSelectionColumn,\n      indentWidth,\n      onColumnClick,\n      onColumnContextMenu,\n      onRenderColumnHeaderTooltip = this._onRenderColumnHeaderTooltip,\n      styles,\n      selectionMode,\n      theme,\n      onRenderDetailsCheckbox,\n      groupNestingDepth,\n      useFastIcons,\n      checkboxVisibility,\n      className,\n    } = this.props;\n    const { isAllSelected, columnResizeDetails, isSizing, isAllCollapsed } = this.state;\n    const showCheckbox = selectAllVisibility !== SelectAllVisibility.none;\n    const isCheckboxHidden = selectAllVisibility === SelectAllVisibility.hidden;\n    const isCheckboxAlwaysVisible = checkboxVisibility === CheckboxVisibility.always;\n\n    const columnReorderProps = this._getColumnReorderProps();\n    const frozenColumnCountFromStart =\n      columnReorderProps && columnReorderProps.frozenColumnCountFromStart\n        ? columnReorderProps.frozenColumnCountFromStart\n        : 0;\n    const frozenColumnCountFromEnd =\n      columnReorderProps && columnReorderProps.frozenColumnCountFromEnd\n        ? columnReorderProps.frozenColumnCountFromEnd\n        : 0;\n\n    this._classNames = getClassNames(styles, {\n      theme: theme!,\n      isAllSelected,\n      isSelectAllHidden: selectAllVisibility === SelectAllVisibility.hidden,\n      isResizingColumn: !!columnResizeDetails && isSizing,\n      isSizing,\n      isAllCollapsed,\n      isCheckboxHidden,\n      className,\n    });\n\n    const classNames = this._classNames;\n    const IconComponent = useFastIcons ? FontIcon : Icon;\n\n    const isRTL = getRTL(theme);\n    return (\n      <FocusZone\n        role=\"row\"\n        aria-label={ariaLabel}\n        className={classNames.root}\n        componentRef={this._rootComponent}\n        elementRef={this._rootElement}\n        onMouseMove={this._onRootMouseMove}\n        data-automationid=\"DetailsHeader\"\n        direction={FocusZoneDirection.horizontal}\n      >\n        {showCheckbox\n          ? [\n              <div\n                key=\"__checkbox\"\n                className={classNames.cellIsCheck}\n                aria-labelledby={`${this._id}-checkTooltip`}\n                onClick={!isCheckboxHidden ? this._onSelectAllClicked : undefined}\n                aria-colindex={1}\n                role={'columnheader'}\n              >\n                {onRenderColumnHeaderTooltip(\n                  {\n                    hostClassName: classNames.checkTooltip,\n                    id: `${this._id}-checkTooltip`,\n                    setAriaDescribedBy: false,\n                    content: ariaLabelForSelectAllCheckbox,\n                    children: (\n                      <DetailsRowCheck\n                        id={`${this._id}-check`}\n                        aria-label={\n                          selectionMode === SelectionMode.multiple\n                            ? ariaLabelForSelectAllCheckbox\n                            : ariaLabelForSelectionColumn\n                        }\n                        data-is-focusable={!isCheckboxHidden || undefined}\n                        isHeader={true}\n                        selected={isAllSelected}\n                        anySelected={false}\n                        canSelect={!isCheckboxHidden}\n                        className={classNames.check}\n                        onRenderDetailsCheckbox={onRenderDetailsCheckbox}\n                        useFastIcons={useFastIcons}\n                        isVisible={isCheckboxAlwaysVisible}\n                      />\n                    ),\n                  },\n                  this._onRenderColumnHeaderTooltip,\n                )}\n              </div>,\n              !this.props.onRenderColumnHeaderTooltip ? (\n                ariaLabelForSelectAllCheckbox && !isCheckboxHidden ? (\n                  <label\n                    key=\"__checkboxLabel\"\n                    id={`${this._id}-checkTooltip`}\n                    className={classNames.accessibleLabel}\n                    aria-hidden={true}\n                  >\n                    {ariaLabelForSelectAllCheckbox}\n                  </label>\n                ) : ariaLabelForSelectionColumn && isCheckboxHidden ? (\n                  <label\n                    key=\"__checkboxLabel\"\n                    id={`${this._id}-checkTooltip`}\n                    className={classNames.accessibleLabel}\n                    aria-hidden={true}\n                  >\n                    {ariaLabelForSelectionColumn}\n                  </label>\n                ) : null\n              ) : null,\n            ]\n          : null}\n        {groupNestingDepth! > 0 && this.props.collapseAllVisibility === CollapseAllVisibility.visible ? (\n          <div\n            className={classNames.cellIsGroupExpander}\n            onClick={this._onToggleCollapseAll}\n            data-is-focusable={true}\n            aria-label={ariaLabelForToggleAllGroupsButton}\n            aria-expanded={!isAllCollapsed}\n            role=\"columnheader\"\n          >\n            <IconComponent\n              className={classNames.collapseButton}\n              iconName={isRTL ? 'ChevronLeftMed' : 'ChevronRightMed'}\n            />\n          </div>\n        ) : null}\n        <GroupSpacer indentWidth={indentWidth} role=\"gridcell\" count={groupNestingDepth! - 1} />\n        {columns.map((column: IColumn, columnIndex: number) => {\n          const _isDraggable = columnReorderProps\n            ? columnIndex >= frozenColumnCountFromStart && columnIndex < columns.length - frozenColumnCountFromEnd\n            : false;\n          return [\n            columnReorderProps &&\n              (_isDraggable || columnIndex === columns.length - frozenColumnCountFromEnd) &&\n              this._renderDropHint(columnIndex),\n            <DetailsColumn\n              column={column}\n              styles={column.styles}\n              key={column.key}\n              columnIndex={(showCheckbox ? 2 : 1) + columnIndex}\n              parentId={this._id}\n              isDraggable={_isDraggable}\n              updateDragInfo={this._updateDragInfo}\n              dragDropHelper={this._dragDropHelper}\n              onColumnClick={onColumnClick}\n              onColumnContextMenu={onColumnContextMenu}\n              // Do not render tooltips by default, but allow for override via props.\n              onRenderColumnHeaderTooltip={this.props.onRenderColumnHeaderTooltip}\n              isDropped={this._onDropIndexInfo.targetIndex === columnIndex}\n              cellStyleProps={this.props.cellStyleProps}\n              useFastIcons={useFastIcons}\n            />,\n            this._renderColumnDivider(columnIndex),\n          ];\n        })}\n        {columnReorderProps && frozenColumnCountFromEnd === 0 && this._renderDropHint(columns.length)}\n        {isSizing && (\n          <Layer>\n            <div\n              className={classNames.sizingOverlay}\n              onMouseMove={this._onSizerMouseMove}\n              onMouseUp={this._onSizerMouseUp}\n            />\n          </Layer>\n        )}\n      </FocusZone>\n    );\n  }\n\n  /** Set focus to the active thing in the focus area. */\n  public focus(): boolean {\n    return !!this._rootComponent.current?.focus();\n  }\n\n  /**\n   * Gets column reorder props from this.props. If the calling code is part of setting up or\n   * handling drag/drop events, it's safe to assume that this method's return value is defined\n   * (because drag/drop handling will only be set up if reorder props are given).\n   */\n  private _getColumnReorderProps(): IColumnReorderHeaderProps | undefined {\n    const { columnReorderOptions, columnReorderProps } = this.props;\n    return columnReorderProps || (columnReorderOptions && { ...columnReorderOptions, onColumnDragEnd: undefined });\n  }\n\n  private _getHeaderDragDropOptions(): IDragDropOptions {\n    const options = {\n      selectionIndex: 1,\n      context: { data: this, index: 0 },\n      canDrag: () => false,\n      canDrop: () => true,\n      onDragStart: () => undefined,\n      updateDropState: this._updateDroppingState,\n      onDrop: this._onDrop,\n      onDragEnd: () => undefined,\n      onDragOver: this._onDragOver,\n    };\n    return options;\n  }\n\n  private _updateDroppingState = (newValue: boolean, event: DragEvent): void => {\n    if (this._draggedColumnIndex >= 0 && event.type !== 'drop' && !newValue) {\n      this._resetDropHints();\n    }\n  };\n\n  private _isValidCurrentDropHintIndex() {\n    return this._currentDropHintIndex >= 0;\n  }\n\n  private _onDragOver = (item: any, event: DragEvent): void => {\n    if (this._draggedColumnIndex >= 0) {\n      event.stopPropagation();\n      this._computeDropHintToBeShown(event.clientX);\n    }\n  };\n\n  private _onDrop = (item?: any, event?: DragEvent): void => {\n    // Safe to assume this is defined since we're handling a drop event\n    const columnReorderProps = this._getColumnReorderProps()!;\n\n    // Target index will not get changed if draggeditem is after target item.\n    if (this._draggedColumnIndex >= 0 && event) {\n      const targetIndex =\n        this._draggedColumnIndex > this._currentDropHintIndex\n          ? this._currentDropHintIndex\n          : this._currentDropHintIndex - 1;\n      const isValidDrop = this._isValidCurrentDropHintIndex();\n      event.stopPropagation();\n      if (isValidDrop) {\n        this._onDropIndexInfo.sourceIndex = this._draggedColumnIndex;\n        this._onDropIndexInfo.targetIndex = targetIndex;\n\n        if (columnReorderProps.onColumnDrop) {\n          const dragDropDetails: IColumnDragDropDetails = {\n            draggedIndex: this._draggedColumnIndex,\n            targetIndex: targetIndex,\n          };\n          columnReorderProps.onColumnDrop(dragDropDetails);\n          /* eslint-disable deprecation/deprecation */\n        } else if (columnReorderProps.handleColumnReorder) {\n          columnReorderProps.handleColumnReorder(this._draggedColumnIndex, targetIndex);\n          /* eslint-enable deprecation/deprecation */\n        }\n      }\n    }\n\n    this._resetDropHints();\n    this._dropHintDetails = {};\n    this._draggedColumnIndex = -1;\n  };\n\n  /**\n   * @returns whether or not the \"Select All\" checkbox column is hidden.\n   */\n  private _isCheckboxColumnHidden(): boolean {\n    const { selectionMode, checkboxVisibility } = this.props;\n\n    return selectionMode === SelectionMode.none || checkboxVisibility === CheckboxVisibility.hidden;\n  }\n\n  private _updateDragInfo = (props: { itemIndex: number }, event?: MouseEvent) => {\n    // Safe to assume this is defined since we're handling a drag event\n    const columnReorderProps = this._getColumnReorderProps()!;\n    const itemIndex = props.itemIndex;\n    if (itemIndex >= 0) {\n      // Column index is set based on the checkbox\n      this._draggedColumnIndex = this._isCheckboxColumnHidden() ? itemIndex - 1 : itemIndex - 2;\n      this._getDropHintPositions();\n      if (columnReorderProps.onColumnDragStart) {\n        columnReorderProps.onColumnDragStart(true);\n      }\n    } else if (event && this._draggedColumnIndex >= 0) {\n      this._resetDropHints();\n      this._draggedColumnIndex = -1;\n      this._dropHintDetails = {};\n      if (columnReorderProps.onColumnDragEnd) {\n        const columnDragEndLocation = this._isEventOnHeader(event);\n        columnReorderProps.onColumnDragEnd({ dropLocation: columnDragEndLocation }, event);\n      }\n    }\n  };\n\n  private _resetDropHints(): void {\n    if (this._currentDropHintIndex >= 0) {\n      this._updateDropHintElement(this._dropHintDetails[this._currentDropHintIndex].dropHintElementRef, 'none');\n      this._currentDropHintIndex = -1;\n    }\n  }\n\n  private _updateDropHintElement(element: HTMLElement, displayProperty: string) {\n    (element.childNodes[1] as HTMLElement).style.display = displayProperty;\n    (element.childNodes[0] as HTMLElement).style.display = displayProperty;\n  }\n\n  private _getDropHintPositions = (): void => {\n    const { columns = NO_COLUMNS } = this.props;\n    // Safe to assume this is defined since we're handling a drag/drop event\n    const columnReorderProps = this._getColumnReorderProps()!;\n    let prevX = 0;\n    let prevMid = 0;\n    let prevRef: HTMLElement;\n    const frozenColumnCountFromStart = columnReorderProps.frozenColumnCountFromStart || 0;\n    const frozenColumnCountFromEnd = columnReorderProps.frozenColumnCountFromEnd || 0;\n\n    for (let i = frozenColumnCountFromStart; i < columns.length - frozenColumnCountFromEnd + 1; i++) {\n      if (this._rootElement.current) {\n        const dropHintElement = this._rootElement.current.querySelectorAll('#columnDropHint_' + i)[0] as HTMLElement;\n        if (dropHintElement) {\n          if (i === frozenColumnCountFromStart) {\n            prevX = dropHintElement.offsetLeft;\n            prevMid = dropHintElement.offsetLeft;\n            prevRef = dropHintElement;\n          } else {\n            const newMid = (dropHintElement.offsetLeft + prevX!) / 2;\n            this._dropHintDetails[i - 1] = {\n              originX: prevX,\n              startX: prevMid!,\n              endX: newMid,\n              dropHintElementRef: prevRef!,\n            };\n            prevMid = newMid;\n            prevRef = dropHintElement;\n            prevX = dropHintElement.offsetLeft;\n            if (i === columns.length - frozenColumnCountFromEnd) {\n              this._dropHintDetails[i] = {\n                originX: prevX,\n                startX: prevMid!,\n                endX: dropHintElement.offsetLeft,\n                dropHintElementRef: prevRef,\n              };\n            }\n          }\n        }\n      }\n    }\n  };\n\n  /**\n   * Based on the given cursor position, finds the nearest drop hint and updates the state to make it visible\n   */\n  private _computeDropHintToBeShown = (clientX: number): void => {\n    const isRtl = getRTL(this.props.theme);\n    if (this._rootElement.current) {\n      const clientRect = this._rootElement.current.getBoundingClientRect();\n      const headerOriginX = clientRect.left;\n      const eventXRelativePosition = clientX - headerOriginX;\n      const currentDropHintIndex = this._currentDropHintIndex;\n      if (this._isValidCurrentDropHintIndex()) {\n        if (\n          _liesBetween(\n            isRtl,\n            eventXRelativePosition,\n            this._dropHintDetails[currentDropHintIndex!].startX,\n            this._dropHintDetails[currentDropHintIndex!].endX,\n          )\n        ) {\n          return;\n        }\n      }\n      const { columns = NO_COLUMNS } = this.props;\n      // Safe to assume this is defined since we're handling a drag/drop event\n      const columnReorderProps = this._getColumnReorderProps()!;\n      const frozenColumnCountFromStart = columnReorderProps.frozenColumnCountFromStart || 0;\n      const frozenColumnCountFromEnd = columnReorderProps.frozenColumnCountFromEnd || 0;\n\n      const currentIndex: number = frozenColumnCountFromStart;\n      const lastValidColumn = columns.length - frozenColumnCountFromEnd;\n      let indexToUpdate = -1;\n      if (_isBefore(isRtl, eventXRelativePosition, this._dropHintDetails[currentIndex].endX)) {\n        indexToUpdate = currentIndex;\n      } else if (_isAfter(isRtl, eventXRelativePosition, this._dropHintDetails[lastValidColumn].startX)) {\n        indexToUpdate = lastValidColumn;\n      } else if (this._isValidCurrentDropHintIndex()) {\n        if (\n          this._dropHintDetails[currentDropHintIndex! + 1] &&\n          _liesBetween(\n            isRtl,\n            eventXRelativePosition,\n            this._dropHintDetails[currentDropHintIndex! + 1].startX,\n            this._dropHintDetails[currentDropHintIndex! + 1].endX,\n          )\n        ) {\n          indexToUpdate = currentDropHintIndex! + 1;\n        } else if (\n          this._dropHintDetails[currentDropHintIndex! - 1] &&\n          _liesBetween(\n            isRtl,\n            eventXRelativePosition,\n            this._dropHintDetails[currentDropHintIndex! - 1].startX,\n            this._dropHintDetails[currentDropHintIndex! - 1].endX,\n          )\n        ) {\n          indexToUpdate = currentDropHintIndex! - 1;\n        }\n      }\n      if (indexToUpdate === -1) {\n        let startIndex = frozenColumnCountFromStart;\n        let endIndex = lastValidColumn;\n        while (startIndex < endIndex) {\n          const middleIndex = Math.ceil((endIndex + startIndex!) / 2);\n          if (\n            _liesBetween(\n              isRtl,\n              eventXRelativePosition,\n              this._dropHintDetails[middleIndex].startX,\n              this._dropHintDetails[middleIndex].endX,\n            )\n          ) {\n            indexToUpdate = middleIndex;\n            break;\n          } else if (_isBefore(isRtl, eventXRelativePosition, this._dropHintDetails[middleIndex].originX)) {\n            endIndex = middleIndex;\n          } else if (_isAfter(isRtl, eventXRelativePosition, this._dropHintDetails[middleIndex].originX)) {\n            startIndex = middleIndex;\n          }\n        }\n      }\n\n      if (indexToUpdate === this._draggedColumnIndex || indexToUpdate === this._draggedColumnIndex + 1) {\n        if (this._isValidCurrentDropHintIndex()) {\n          this._resetDropHints();\n        }\n      } else if (currentDropHintIndex !== indexToUpdate && indexToUpdate >= 0) {\n        this._resetDropHints();\n        this._updateDropHintElement(this._dropHintDetails[indexToUpdate].dropHintElementRef, 'inline-block');\n        this._currentDropHintIndex = indexToUpdate;\n      }\n    }\n  };\n\n  private _isEventOnHeader(event: MouseEvent): ColumnDragEndLocation | undefined {\n    if (this._rootElement.current) {\n      const clientRect = this._rootElement.current.getBoundingClientRect();\n      if (\n        event.clientX > clientRect.left &&\n        event.clientX < clientRect.right &&\n        event.clientY > clientRect.top &&\n        event.clientY < clientRect.bottom\n      ) {\n        return ColumnDragEndLocation.header;\n      }\n    }\n  }\n\n  private _renderColumnSizer = ({ columnIndex }: IDetailsColumnProps): JSX.Element | null => {\n    const { columns = NO_COLUMNS } = this.props;\n    const column = columns[columnIndex];\n    const { columnResizeDetails } = this.state;\n    const classNames = this._classNames;\n\n    return column.isResizable ? (\n      <div\n        key={`${column.key}_sizer`}\n        aria-hidden={true}\n        role=\"button\"\n        data-is-focusable={false}\n        onClick={_stopPropagation}\n        data-sizer-index={columnIndex}\n        onBlur={this._onSizerBlur}\n        className={css(\n          classNames.cellSizer,\n          columnIndex < columns.length - 1 ? classNames.cellSizerStart : classNames.cellSizerEnd,\n          {\n            [classNames.cellIsResizing]: columnResizeDetails && columnResizeDetails.columnIndex === columnIndex,\n          },\n        )}\n        onDoubleClick={this._onSizerDoubleClick.bind(this, columnIndex)}\n      />\n    ) : null;\n  };\n\n  private _renderColumnDivider(columnIndex: number): JSX.Element | null {\n    const { columns = NO_COLUMNS } = this.props;\n    const column = columns[columnIndex];\n    const { onRenderDivider } = column;\n    return onRenderDivider\n      ? onRenderDivider({ column, columnIndex }, this._renderColumnSizer)\n      : this._renderColumnSizer({ column, columnIndex });\n  }\n\n  private _renderDropHint(dropHintIndex: number): JSX.Element {\n    const classNames = this._classNames;\n    const IconComponent = this.props.useFastIcons ? FontIcon : Icon;\n    return (\n      <div key={'dropHintKey'} className={classNames.dropHintStyle} id={`columnDropHint_${dropHintIndex}`}>\n        <div\n          role=\"presentation\"\n          key={`dropHintCircleKey`}\n          className={classNames.dropHintCaretStyle}\n          data-is-focusable={false}\n          data-sizer-index={dropHintIndex}\n          aria-hidden={true}\n        >\n          <IconComponent iconName={'CircleShapeSolid'} />\n        </div>\n        <div\n          key={`dropHintLineKey`}\n          aria-hidden={true}\n          data-is-focusable={false}\n          data-sizer-index={dropHintIndex}\n          className={classNames.dropHintLineStyle}\n        />\n      </div>\n    );\n  }\n\n  private _onRenderColumnHeaderTooltip = (tooltipHostProps: ITooltipHostProps): JSX.Element => {\n    return <span className={tooltipHostProps.hostClassName}>{tooltipHostProps.children}</span>;\n  };\n\n  /**\n   * double click on the column sizer will auto ajust column width\n   * to fit the longest content among current rendered rows.\n   *\n   * @param columnIndex - index of the column user double clicked\n   * @param ev - mouse double click event\n   */\n  private _onSizerDoubleClick(columnIndex: number, ev: React.MouseEvent<HTMLElement>): void {\n    const { onColumnAutoResized, columns = NO_COLUMNS } = this.props;\n    if (onColumnAutoResized) {\n      onColumnAutoResized(columns[columnIndex], columnIndex);\n    }\n  }\n\n  /**\n   * Called when the select all toggle is clicked.\n   */\n  private _onSelectAllClicked = (): void => {\n    const { selection } = this.props;\n\n    if (selection) {\n      selection.toggleAllSelected();\n    }\n  };\n\n  private _onRootMouseDown = (ev: MouseEvent): void => {\n    const columnIndexAttr = (ev.target as HTMLElement).getAttribute('data-sizer-index');\n    const columnIndex = Number(columnIndexAttr);\n    const { columns = NO_COLUMNS } = this.props;\n\n    if (columnIndexAttr === null || ev.button !== MOUSEDOWN_PRIMARY_BUTTON) {\n      // Ignore anything except the primary button.\n      return;\n    }\n\n    this.setState({\n      columnResizeDetails: {\n        columnIndex: columnIndex,\n        columnMinWidth: columns[columnIndex].calculatedWidth!,\n        originX: ev.clientX,\n      },\n    });\n\n    ev.preventDefault();\n    ev.stopPropagation();\n  };\n\n  private _onRootMouseMove = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { columnResizeDetails, isSizing } = this.state;\n\n    if (columnResizeDetails && !isSizing && ev.clientX !== columnResizeDetails.originX) {\n      this.setState({ isSizing: true });\n    }\n  };\n\n  private _onRootKeyDown = (ev: KeyboardEvent): void => {\n    const { columnResizeDetails, isSizing } = this.state;\n    const { columns = NO_COLUMNS, onColumnResized } = this.props;\n\n    const columnIndexAttr = (ev.target as HTMLElement).getAttribute('data-sizer-index');\n\n    if (!columnIndexAttr || isSizing) {\n      return;\n    }\n\n    const columnIndex = Number(columnIndexAttr);\n\n    if (!columnResizeDetails) {\n      // eslint-disable-next-line deprecation/deprecation\n      if (ev.which === KeyCodes.enter) {\n        this.setState({\n          columnResizeDetails: {\n            columnIndex: columnIndex,\n            columnMinWidth: columns[columnIndex].calculatedWidth!,\n          },\n        });\n\n        ev.preventDefault();\n        ev.stopPropagation();\n      }\n    } else {\n      let increment: number | undefined;\n\n      // eslint-disable-next-line deprecation/deprecation\n      if (ev.which === KeyCodes.enter) {\n        this.setState({\n          columnResizeDetails: undefined,\n        });\n\n        ev.preventDefault();\n        ev.stopPropagation();\n        // eslint-disable-next-line deprecation/deprecation\n      } else if (ev.which === KeyCodes.left) {\n        increment = getRTL(this.props.theme) ? 1 : -1;\n        // eslint-disable-next-line deprecation/deprecation\n      } else if (ev.which === KeyCodes.right) {\n        increment = getRTL(this.props.theme) ? -1 : 1;\n      }\n\n      if (increment) {\n        if (!ev.shiftKey) {\n          increment *= 10;\n        }\n\n        this.setState({\n          columnResizeDetails: {\n            ...columnResizeDetails,\n            columnMinWidth: columnResizeDetails.columnMinWidth + increment,\n          },\n        });\n\n        if (onColumnResized) {\n          onColumnResized(columns[columnIndex], columnResizeDetails.columnMinWidth + increment, columnIndex);\n        }\n\n        ev.preventDefault();\n        ev.stopPropagation();\n      }\n    }\n  };\n\n  /**\n   * mouse move event handler in the header\n   * it will set isSizing state to true when user clicked on the sizer and move the mouse.\n   *\n   * @param ev - mouse move event\n   */\n  private _onSizerMouseMove = (ev: React.MouseEvent<HTMLElement>): void => {\n    const {\n      // use buttons property here since ev.button in some edge case is not upding well during the move.\n      // but firefox doesn't support it, so we set the default value when it is not defined.\n      buttons,\n    } = ev;\n    const { onColumnIsSizingChanged, onColumnResized, columns = NO_COLUMNS } = this.props;\n    const { columnResizeDetails } = this.state;\n\n    if (buttons !== undefined && buttons !== MOUSEMOVE_PRIMARY_BUTTON) {\n      // cancel mouse down event and return early when the primary button is not pressed\n      this._onSizerMouseUp(ev);\n      return;\n    }\n\n    if (ev.clientX !== columnResizeDetails!.originX) {\n      if (onColumnIsSizingChanged) {\n        onColumnIsSizingChanged(columns[columnResizeDetails!.columnIndex], true);\n      }\n    }\n\n    if (onColumnResized) {\n      let movement = ev.clientX - columnResizeDetails!.originX!;\n\n      if (getRTL(this.props.theme)) {\n        movement = -movement;\n      }\n\n      onColumnResized(\n        columns[columnResizeDetails!.columnIndex],\n        columnResizeDetails!.columnMinWidth + movement,\n        columnResizeDetails!.columnIndex,\n      );\n    }\n  };\n\n  private _onSizerBlur = (ev: React.FocusEvent<HTMLElement>): void => {\n    const { columnResizeDetails } = this.state;\n\n    if (columnResizeDetails) {\n      this.setState({\n        columnResizeDetails: undefined,\n        isSizing: false,\n      });\n    }\n  };\n\n  /**\n   * mouse up event handler in the header\n   * clear the resize related state.\n   * This is to ensure we can catch double click event\n   *\n   * @param ev - mouse up event\n   */\n  private _onSizerMouseUp = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { columns = NO_COLUMNS, onColumnIsSizingChanged } = this.props;\n    const { columnResizeDetails } = this.state;\n\n    this.setState({\n      columnResizeDetails: undefined,\n      isSizing: false,\n    });\n\n    if (onColumnIsSizingChanged) {\n      onColumnIsSizingChanged(columns[columnResizeDetails!.columnIndex], false);\n    }\n  };\n\n  private _onSelectionChanged(): void {\n    const isAllSelected = !!this.props.selection && this.props.selection.isAllSelected();\n\n    if (this.state.isAllSelected !== isAllSelected) {\n      this.setState({\n        isAllSelected: isAllSelected,\n      });\n    }\n  }\n\n  private _onToggleCollapseAll = (): void => {\n    const { onToggleCollapseAll } = this.props;\n    const newCollapsed = !this.state.isAllCollapsed;\n    this.setState({\n      isAllCollapsed: newCollapsed,\n    });\n    if (onToggleCollapseAll) {\n      onToggleCollapseAll(newCollapsed);\n    }\n  };\n}\n\nfunction _liesBetween(rtl: boolean, target: number, left: number, right: number): boolean {\n  return rtl ? target <= left && target >= right : target >= left && target <= right;\n}\nfunction _isBefore(rtl: boolean, a: number, b: number): boolean {\n  return rtl ? a >= b : a <= b;\n}\nfunction _isAfter(rtl: boolean, a: number, b: number): boolean {\n  return rtl ? a <= b : a >= b;\n}\n\nfunction _stopPropagation(ev: React.MouseEvent<HTMLElement>): void {\n  ev.stopPropagation();\n}\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport {\n  IDetailsHeaderProps,\n  IDetailsHeaderBaseProps,\n  IDetailsHeaderStyleProps,\n  IDetailsHeaderStyles,\n} from './DetailsHeader.types';\nimport { DetailsHeaderBase } from './DetailsHeader.base';\nimport { getStyles } from './DetailsHeader.styles';\n\nexport { IDetailsHeaderProps, IDetailsHeaderBaseProps };\n\nexport const DetailsHeader: React.FunctionComponent<IDetailsHeaderBaseProps> = styled<\n  IDetailsHeaderBaseProps,\n  IDetailsHeaderStyleProps,\n  IDetailsHeaderStyles\n>(DetailsHeaderBase, getStyles, undefined, { scope: 'DetailsHeader' });\n","import * as React from 'react';\nimport { IColumn } from './DetailsList.types';\nimport { css } from '../../Utilities';\nimport { IDetailsRowFieldsProps } from './DetailsRowFields.types';\nimport { DEFAULT_CELL_STYLE_PROPS } from './DetailsRow.styles';\n\nconst getCellText = (item: any, column: IColumn): string => {\n  let value = item && column && column.fieldName ? item[column.fieldName] : '';\n\n  if (value === null || value === undefined) {\n    value = '';\n  }\n\n  if (typeof value === 'boolean') {\n    return value.toString();\n  }\n\n  return value;\n};\n\n/**\n * Component for rendering a row's cells in a `DetailsList`.\n *\n * {@docCategory DetailsList}\n */\nexport const DetailsRowFields: React.FunctionComponent<IDetailsRowFieldsProps> = props => {\n  const {\n    columns,\n    columnStartIndex,\n    rowClassNames,\n    cellStyleProps = DEFAULT_CELL_STYLE_PROPS,\n    item,\n    itemIndex,\n    onRenderItemColumn,\n    getCellValueKey,\n    cellsByColumn,\n    enableUpdateAnimations,\n    rowHeaderId,\n  } = props;\n\n  const cellValueKeysRef = React.useRef<{\n    [columnKey: string]: string | undefined;\n  }>();\n\n  const cellValueKeys = cellValueKeysRef.current || (cellValueKeysRef.current = {});\n\n  return (\n    <div className={rowClassNames.fields} data-automationid=\"DetailsRowFields\" role=\"presentation\">\n      {columns.map((column, columnIndex) => {\n        const width: string | number =\n          typeof column.calculatedWidth === 'undefined'\n            ? 'auto'\n            : column.calculatedWidth +\n              cellStyleProps.cellLeftPadding +\n              cellStyleProps.cellRightPadding +\n              (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0);\n\n        const { onRender = onRenderItemColumn, getValueKey = getCellValueKey } = column;\n        const cellContentsRender =\n          cellsByColumn && column.key in cellsByColumn\n            ? cellsByColumn[column.key]\n            : onRender\n            ? onRender(item, itemIndex, column)\n            : getCellText(item, column);\n\n        const previousValueKey = cellValueKeys[column.key];\n\n        const cellValueKey = enableUpdateAnimations && getValueKey ? getValueKey(item, itemIndex, column) : undefined;\n\n        let showAnimation = false;\n\n        if (cellValueKey !== undefined && previousValueKey !== undefined && cellValueKey !== previousValueKey) {\n          showAnimation = true;\n        }\n\n        cellValueKeys[column.key] = cellValueKey;\n\n        // generate a key that auto-dirties when content changes, to force the container to re-render,\n        // to trigger animation\n        const key = `${column.key}${cellValueKey !== undefined ? `-${cellValueKey}` : ''}`;\n        return (\n          <div\n            key={key}\n            id={column.isRowHeader ? rowHeaderId : undefined}\n            role={column.isRowHeader ? 'rowheader' : 'gridcell'}\n            aria-readonly\n            aria-colindex={columnIndex + columnStartIndex + 1}\n            className={css(\n              column.className,\n              column.isMultiline && rowClassNames.isMultiline,\n              column.isRowHeader && rowClassNames.isRowHeader,\n              rowClassNames.cell,\n              column.isPadded ? rowClassNames.cellPadded : rowClassNames.cellUnpadded,\n              showAnimation && rowClassNames.cellAnimation,\n            )}\n            style={{ width }}\n            data-automationid=\"DetailsRowCell\"\n            data-automation-key={column.key}\n          >\n            {cellContentsRender}\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n","import * as React from 'react';\nimport {\n  initializeComponentRef,\n  EventGroup,\n  IDisposable,\n  css,\n  shallowCompare,\n  getNativeProps,\n  divProperties,\n} from '../../Utilities';\nimport { IColumn, CheckboxVisibility } from './DetailsList.types';\nimport { DetailsRowCheck } from './DetailsRowCheck';\nimport { GroupSpacer } from '../GroupedList/GroupSpacer';\nimport { DetailsRowFields } from './DetailsRowFields';\nimport { FocusZone, FocusZoneDirection, IFocusZone } from '../../FocusZone';\nimport { SelectionMode, SELECTION_CHANGE } from '../../Selection';\nimport { CollapseAllVisibility } from '../../GroupedList';\nimport { IDragDropOptions } from '../../DragDrop';\nimport { IDetailsRowBaseProps } from './DetailsRow.types';\nimport { IDetailsRowCheckProps } from './DetailsRowCheck.types';\nimport { IDetailsRowStyleProps, IDetailsRowStyles } from './DetailsRow.types';\nimport { classNamesFunction } from '../../Utilities';\nimport { IDetailsRowFieldsProps } from './DetailsRowFields.types';\nimport { IProcessedStyleSet } from '../../Styling';\n\nconst getClassNames = classNamesFunction<IDetailsRowStyleProps, IDetailsRowStyles>();\n\nexport interface IDetailsRowSelectionState {\n  isSelected: boolean;\n  isSelectionModal: boolean;\n}\n\nexport interface IDetailsRowState {\n  selectionState: IDetailsRowSelectionState;\n  columnMeasureInfo?: {\n    index: number;\n    column: IColumn;\n    onMeasureDone: (measuredWidth: number) => void;\n  };\n  isDropping?: boolean;\n}\n\nconst DEFAULT_DROPPING_CSS_CLASS = 'is-dropping';\n\nconst NO_COLUMNS: IColumn[] = [];\n\nexport class DetailsRowBase extends React.Component<IDetailsRowBaseProps, IDetailsRowState> {\n  private _events: EventGroup;\n  private _root = React.createRef<HTMLElement>();\n  private _cellMeasurer = React.createRef<HTMLSpanElement>();\n  private _focusZone = React.createRef<IFocusZone>();\n  private _droppingClassNames: string;\n  /** Whether this.props.onDidMount has been called */\n  private _onDidMountCalled: boolean;\n  private _dragDropSubscription?: IDisposable;\n\n  private _classNames: IProcessedStyleSet<IDetailsRowStyles>;\n  private _rowClassNames: IDetailsRowFieldsProps['rowClassNames'];\n\n  public static getDerivedStateFromProps(\n    nextProps: IDetailsRowBaseProps,\n    previousState: IDetailsRowState,\n  ): IDetailsRowState {\n    return {\n      ...previousState,\n      selectionState: getSelectionState(nextProps),\n    };\n  }\n\n  constructor(props: IDetailsRowBaseProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._events = new EventGroup(this);\n\n    this.state = {\n      selectionState: getSelectionState(props),\n      columnMeasureInfo: undefined,\n      isDropping: false,\n    };\n\n    this._droppingClassNames = '';\n  }\n  public componentDidMount(): void {\n    const { dragDropHelper, selection, item, onDidMount } = this.props;\n\n    if (dragDropHelper && this._root.current) {\n      this._dragDropSubscription = dragDropHelper.subscribe(\n        this._root.current,\n        this._events,\n        this._getRowDragDropOptions(),\n      );\n    }\n\n    if (selection) {\n      this._events.on(selection, SELECTION_CHANGE, this._onSelectionChanged);\n    }\n\n    if (onDidMount && item) {\n      // If the item appears later, we should wait for it before calling this method.\n      this._onDidMountCalled = true;\n      onDidMount(this);\n    }\n  }\n\n  public componentDidUpdate(previousProps: IDetailsRowBaseProps) {\n    const state = this.state;\n    const { item, onDidMount } = this.props;\n    const { columnMeasureInfo } = state;\n\n    if (\n      this.props.itemIndex !== previousProps.itemIndex ||\n      this.props.item !== previousProps.item ||\n      this.props.dragDropHelper !== previousProps.dragDropHelper\n    ) {\n      if (this._dragDropSubscription) {\n        this._dragDropSubscription.dispose();\n        delete this._dragDropSubscription;\n      }\n\n      if (this.props.dragDropHelper && this._root.current) {\n        this._dragDropSubscription = this.props.dragDropHelper.subscribe(\n          this._root.current,\n          this._events,\n          this._getRowDragDropOptions(),\n        );\n      }\n    }\n\n    if (columnMeasureInfo && columnMeasureInfo.index >= 0 && this._cellMeasurer.current) {\n      const newWidth = this._cellMeasurer.current.getBoundingClientRect().width;\n\n      columnMeasureInfo.onMeasureDone(newWidth);\n\n      this.setState({\n        columnMeasureInfo: undefined,\n      });\n    }\n\n    if (item && onDidMount && !this._onDidMountCalled) {\n      this._onDidMountCalled = true;\n      onDidMount(this);\n    }\n  }\n\n  public componentWillUnmount(): void {\n    const { item, onWillUnmount } = this.props;\n\n    // Only call the onWillUnmount callback if we have an item.\n    if (onWillUnmount && item) {\n      onWillUnmount(this);\n    }\n\n    if (this._dragDropSubscription) {\n      this._dragDropSubscription.dispose();\n      delete this._dragDropSubscription;\n    }\n\n    this._events.dispose();\n  }\n\n  public shouldComponentUpdate(nextProps: IDetailsRowBaseProps, nextState: IDetailsRowState): boolean {\n    if (this.props.useReducedRowRenderer) {\n      const newSelectionState = getSelectionState(nextProps);\n      if (this.state.selectionState.isSelected !== newSelectionState.isSelected) {\n        return true;\n      }\n      return !shallowCompare(this.props, nextProps);\n    } else {\n      return true;\n    }\n  }\n\n  public render(): JSX.Element {\n    const {\n      className,\n      columns = NO_COLUMNS,\n      dragDropEvents,\n      item,\n      itemIndex,\n      id,\n      flatIndexOffset = 2,\n      onRenderCheck = this._onRenderCheck,\n      onRenderDetailsCheckbox,\n      onRenderItemColumn,\n      getCellValueKey,\n      selectionMode,\n      rowWidth = 0,\n      checkboxVisibility,\n      getRowAriaLabel,\n      getRowAriaDescribedBy,\n      checkButtonAriaLabel,\n      checkboxCellClassName,\n      /** Alias rowFieldsAs as RowFields and default to DetailsRowFields if rowFieldsAs does not exist */\n      rowFieldsAs: RowFields = DetailsRowFields,\n      selection,\n      indentWidth,\n      enableUpdateAnimations,\n      compact,\n      theme,\n      styles,\n      cellsByColumn,\n      groupNestingDepth,\n      useFastIcons = true,\n      cellStyleProps,\n      group,\n    } = this.props;\n    const { columnMeasureInfo, isDropping } = this.state;\n    const { isSelected = false, isSelectionModal = false } = this.state.selectionState;\n    const isDraggable = dragDropEvents ? !!(dragDropEvents.canDrag && dragDropEvents.canDrag(item)) : undefined;\n    const droppingClassName = isDropping ? this._droppingClassNames || DEFAULT_DROPPING_CSS_CLASS : '';\n    const ariaLabel = getRowAriaLabel ? getRowAriaLabel(item) : undefined;\n    const ariaDescribedBy = getRowAriaDescribedBy ? getRowAriaDescribedBy(item) : undefined;\n    const canSelect = !!selection && selection.canSelectItem(item, itemIndex);\n    const isContentUnselectable = selectionMode === SelectionMode.multiple;\n    const showCheckbox = selectionMode !== SelectionMode.none && checkboxVisibility !== CheckboxVisibility.hidden;\n    const ariaSelected = selectionMode === SelectionMode.none ? undefined : isSelected;\n    const ariaPositionInSet = group ? itemIndex - group.startIndex + 1 : undefined;\n    const ariaSetSize = group ? group.count : undefined;\n\n    this._classNames = {\n      ...this._classNames,\n      ...getClassNames(styles, {\n        theme: theme!,\n        isSelected,\n        canSelect: !isContentUnselectable,\n        anySelected: isSelectionModal,\n        checkboxCellClassName,\n        droppingClassName,\n        className,\n        compact,\n        enableUpdateAnimations,\n        cellStyleProps,\n      }),\n    };\n\n    const rowClassNames: IDetailsRowFieldsProps['rowClassNames'] = {\n      isMultiline: this._classNames.isMultiline,\n      isRowHeader: this._classNames.isRowHeader,\n      cell: this._classNames.cell,\n      cellAnimation: this._classNames.cellAnimation,\n      cellPadded: this._classNames.cellPadded,\n      cellUnpadded: this._classNames.cellUnpadded,\n      fields: this._classNames.fields,\n    };\n\n    // Only re-assign rowClassNames when classNames have changed.\n    // Otherwise, they will cause DetailsRowFields to unnecessarily\n    // re-render, see https://github.com/microsoft/fluentui/pull/8799.\n    // Refactor DetailsRowFields to generate own styles to remove need for this.\n    if (!shallowCompare(this._rowClassNames || {}, rowClassNames)) {\n      this._rowClassNames = rowClassNames;\n    }\n\n    const rowFields = (\n      <RowFields\n        rowClassNames={this._rowClassNames}\n        rowHeaderId={`${id}-header`}\n        cellsByColumn={cellsByColumn}\n        columns={columns}\n        item={item}\n        itemIndex={itemIndex}\n        columnStartIndex={(showCheckbox ? 1 : 0) + (groupNestingDepth ? 1 : 0)}\n        onRenderItemColumn={onRenderItemColumn}\n        getCellValueKey={getCellValueKey}\n        enableUpdateAnimations={enableUpdateAnimations}\n        cellStyleProps={cellStyleProps}\n      />\n    );\n\n    const defaultRole = 'row';\n    const role = this.props.role ? this.props.role : defaultRole;\n\n    return (\n      <FocusZone\n        data-is-focusable={true}\n        {...getNativeProps(this.props, divProperties)}\n        {...(typeof isDraggable === 'boolean'\n          ? {\n              'data-is-draggable': isDraggable, // This data attribute is used by some host applications.\n              draggable: isDraggable,\n            }\n          : {})}\n        direction={FocusZoneDirection.horizontal}\n        elementRef={this._root}\n        componentRef={this._focusZone}\n        role={role}\n        aria-label={ariaLabel}\n        aria-describedby={ariaDescribedBy}\n        className={this._classNames.root}\n        data-selection-index={itemIndex}\n        data-selection-touch-invoke={true}\n        data-item-index={itemIndex}\n        aria-rowindex={ariaPositionInSet === undefined ? itemIndex + flatIndexOffset : undefined}\n        aria-level={(groupNestingDepth && groupNestingDepth + 1) || undefined}\n        aria-posinset={ariaPositionInSet}\n        aria-setsize={ariaSetSize}\n        data-automationid=\"DetailsRow\"\n        style={{ minWidth: rowWidth }}\n        aria-selected={ariaSelected}\n        allowFocusRoot={true}\n      >\n        {showCheckbox && (\n          <div role=\"gridcell\" aria-colindex={1} data-selection-toggle={true} className={this._classNames.checkCell}>\n            {onRenderCheck({\n              id: id ? `${id}-checkbox` : undefined,\n              selected: isSelected,\n              anySelected: isSelectionModal,\n              'aria-label': checkButtonAriaLabel,\n              'aria-labelledby': id ? `${id}-checkbox ${id}-header` : undefined,\n              canSelect,\n              compact,\n              className: this._classNames.check,\n              theme,\n              isVisible: checkboxVisibility === CheckboxVisibility.always,\n              onRenderDetailsCheckbox: onRenderDetailsCheckbox,\n              useFastIcons,\n            })}\n          </div>\n        )}\n\n        <GroupSpacer\n          indentWidth={indentWidth}\n          role=\"gridcell\"\n          count={groupNestingDepth! - (this.props.collapseAllVisibility === CollapseAllVisibility.hidden ? 1 : 0)}\n        />\n\n        {item && rowFields}\n        {columnMeasureInfo && (\n          <span\n            role=\"presentation\"\n            className={css(this._classNames.cellMeasurer, this._classNames.cell)}\n            ref={this._cellMeasurer}\n          >\n            <RowFields\n              rowClassNames={this._rowClassNames}\n              rowHeaderId={`${id}-header`}\n              columns={[columnMeasureInfo.column]}\n              item={item}\n              itemIndex={itemIndex}\n              columnStartIndex={(showCheckbox ? 1 : 0) + (groupNestingDepth ? 1 : 0) + columns.length}\n              onRenderItemColumn={onRenderItemColumn}\n              getCellValueKey={getCellValueKey}\n            />\n          </span>\n        )}\n\n        <span\n          role=\"checkbox\"\n          className={this._classNames.checkCover}\n          aria-checked={isSelected}\n          data-selection-toggle={true}\n        />\n      </FocusZone>\n    );\n  }\n\n  /**\n   * measure cell at index. and call the call back with the measured cell width when finish measure\n   *\n   * @param index - The cell index\n   * @param onMeasureDone - The call back function when finish measure\n   */\n  public measureCell(index: number, onMeasureDone: (width: number) => void): void {\n    const { columns = NO_COLUMNS } = this.props;\n    const column: IColumn = { ...columns[index] };\n\n    column.minWidth = 0;\n    column.maxWidth = 999999;\n\n    delete column.calculatedWidth;\n\n    this.setState({\n      columnMeasureInfo: {\n        index,\n        column,\n        onMeasureDone,\n      },\n    });\n  }\n\n  public focus(forceIntoFirstElement: boolean = false): boolean {\n    return !!this._focusZone.current?.focus(forceIntoFirstElement);\n  }\n\n  protected _onRenderCheck(props: IDetailsRowCheckProps) {\n    return <DetailsRowCheck {...props} />;\n  }\n\n  private _onSelectionChanged = (): void => {\n    const selectionState = getSelectionState(this.props);\n\n    if (!shallowCompare(selectionState, this.state.selectionState)) {\n      this.setState({\n        selectionState: selectionState,\n      });\n    }\n  };\n\n  private _getRowDragDropOptions(): IDragDropOptions {\n    const { item, itemIndex, dragDropEvents, eventsToRegister } = this.props;\n    const options = {\n      eventMap: eventsToRegister,\n      selectionIndex: itemIndex,\n      context: { data: item, index: itemIndex },\n      canDrag: dragDropEvents!.canDrag,\n      canDrop: dragDropEvents!.canDrop,\n      onDragStart: dragDropEvents!.onDragStart,\n      updateDropState: this._updateDroppingState,\n      onDrop: dragDropEvents!.onDrop,\n      onDragEnd: dragDropEvents!.onDragEnd,\n      onDragOver: dragDropEvents!.onDragOver,\n    };\n\n    return options;\n  }\n\n  /**\n   * update isDropping state based on the input value, which is used to change style during drag and drop\n   *\n   * when change to true, that means drag enter. we will add default dropping class name\n   * or the custom dropping class name (return result from onDragEnter) to the root elemet.\n   *\n   * when change to false, that means drag leave. we will remove the dropping class name from root element.\n   *\n   * @param newValue - New isDropping state value\n   * @param event - The event trigger dropping state change which can be dragenter, dragleave etc\n   */\n  private _updateDroppingState = (newValue: boolean, event: DragEvent): void => {\n    const { isDropping } = this.state;\n    const { dragDropEvents, item } = this.props;\n\n    if (!newValue) {\n      if (dragDropEvents!.onDragLeave) {\n        dragDropEvents!.onDragLeave(item, event);\n      }\n    } else if (dragDropEvents!.onDragEnter) {\n      this._droppingClassNames = dragDropEvents!.onDragEnter(item, event);\n    }\n\n    if (isDropping !== newValue) {\n      this.setState({ isDropping: newValue });\n    }\n  };\n}\n\nfunction getSelectionState(props: IDetailsRowBaseProps): IDetailsRowSelectionState {\n  const { itemIndex, selection } = props;\n\n  return {\n    isSelected: !!selection?.isIndexSelected(itemIndex),\n    isSelectionModal: !!selection?.isModal?.(),\n  };\n}\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { IDetailsRowProps, IDetailsRowBaseProps, IDetailsRowStyleProps, IDetailsRowStyles } from './DetailsRow.types';\nimport { DetailsRowBase } from './DetailsRow.base';\nimport { getDetailsRowStyles } from './DetailsRow.styles';\n\nexport { IDetailsRowProps, IDetailsRowBaseProps };\n\nexport const DetailsRow: React.FunctionComponent<IDetailsRowBaseProps> = styled<\n  IDetailsRowBaseProps,\n  IDetailsRowStyleProps,\n  IDetailsRowStyles\n>(DetailsRowBase, getDetailsRowStyles, undefined, {\n  scope: 'DetailsRow',\n});\n","import * as React from 'react';\nimport {\n  Async,\n  EventGroup,\n  KeyCodes,\n  elementContains,\n  findScrollableParent,\n  getParent,\n  getDocument,\n  getWindow,\n  isElementTabbable,\n  css,\n  initializeComponentRef,\n  FocusRects,\n} from '../../Utilities';\nimport { ISelection, SelectionMode, IObjectWithKey } from './interfaces';\n\n// Selection definitions:\n//\n// Anchor index: the point from which a range selection starts.\n// Focus index: the point from which layout movement originates from.\n//\n// These two can differ. Tests:\n//\n// If you start at index 5\n// Shift click to index 10\n//    The focus is 10, the anchor is 5.\n// If you shift click at index 0\n//    The anchor remains at 5, the items between 0 and 5 are selected and everything else is cleared.\n// If you click index 8\n//    The anchor and focus are set to 8.\n\nconst SELECTION_DISABLED_ATTRIBUTE_NAME = 'data-selection-disabled';\nconst SELECTION_INDEX_ATTRIBUTE_NAME = 'data-selection-index';\nconst SELECTION_TOGGLE_ATTRIBUTE_NAME = 'data-selection-toggle';\nconst SELECTION_INVOKE_ATTRIBUTE_NAME = 'data-selection-invoke';\nconst SELECTION_INVOKE_TOUCH_ATTRIBUTE_NAME = 'data-selection-touch-invoke';\nconst SELECTALL_TOGGLE_ALL_ATTRIBUTE_NAME = 'data-selection-all-toggle';\nconst SELECTION_SELECT_ATTRIBUTE_NAME = 'data-selection-select';\n\n/**\n * {@docCategory Selection}\n */\nexport interface ISelectionZone {\n  /**\n   * Method to ignore subsequent focus.\n   */\n  ignoreNextFocus: () => void;\n}\n\n/**\n * {@docCategory Selection}\n */\nexport interface ISelectionZoneProps extends React.ClassAttributes<SelectionZone> {\n  /**\n   * Reference to the component interface.\n   */\n  componentRef?: () => void;\n  /**\n   * Required {@link ISelection} instance bound to the {@link SelectionZone}.\n   */\n  selection: ISelection;\n  /**\n   * @deprecated No longer in use, focus is now managed by {@link FocusZone}.\n   */\n  layout?: {};\n  /**\n   * The mode of Selection, where the value is one of\n   * 'none', 'single', or 'multiple'.\n   *\n   * @defaultvalue {@link SelectionMode.multiple}\n   */\n  selectionMode?: SelectionMode;\n  /**\n   * If true, selection is preserved on outer click.\n   */\n  selectionPreservedOnEmptyClick?: boolean;\n  /**\n   * If true, disables automatic selection on input elements.\n   */\n  disableAutoSelectOnInputElements?: boolean;\n  /**\n   * If true, modal selection is enabled on touch event.\n   */\n  enterModalOnTouch?: boolean;\n  /**\n   * Determines whether elements with the attribute `data-selection-touch-invoke` should be used as invocation targets\n   * for an item if the user is using touch.\n   *\n   * @defaultvalue false\n   */\n  enableTouchInvocationTarget?: boolean;\n  /**\n   * Determines if an item is selected on focus.\n   *\n   * @defaultvalue true\n   */\n  isSelectedOnFocus?: boolean;\n  /**\n   * Optional callback for when an item is\n   * invoked via ENTER or double-click.\n   */\n  onItemInvoked?: (item?: IObjectWithKey, index?: number, ev?: Event) => void;\n  /**\n   * Optional callback for when an\n   * item's contextual menu action occurs.\n   */\n  onItemContextMenu?: (item?: any, index?: number, ev?: Event) => void | boolean;\n  /**\n   * Additional CSS class(es) to apply to the SelectionZone.\n   */\n  className?: string;\n}\n\n/**\n * {@docCategory Selection}\n */\nexport interface ISelectionZoneState {\n  isModal: boolean | undefined;\n}\n\n/**\n * {@docCategory Selection}\n */\nexport class SelectionZone extends React.Component<ISelectionZoneProps, ISelectionZoneState> {\n  public static defaultProps = {\n    isSelectedOnFocus: true,\n    selectionMode: SelectionMode.multiple,\n  };\n\n  private _async: Async;\n  private _events: EventGroup;\n  private _root = React.createRef<HTMLDivElement>();\n  private _isCtrlPressed: boolean;\n  private _isShiftPressed: boolean;\n  private _isMetaPressed: boolean;\n  private _isTabPressed: boolean;\n  private _shouldHandleFocus: boolean;\n  private _shouldHandleFocusTimeoutId: number | undefined;\n  private _isTouch: boolean;\n  private _isTouchTimeoutId: number | undefined;\n\n  public static getDerivedStateFromProps(\n    nextProps: ISelectionZoneProps,\n    prevState: ISelectionZoneState,\n  ): ISelectionZoneState {\n    const isModal = nextProps.selection.isModal && nextProps.selection.isModal();\n\n    return {\n      ...prevState,\n      isModal,\n    };\n  }\n\n  constructor(props: ISelectionZoneProps) {\n    super(props);\n\n    this._events = new EventGroup(this);\n    this._async = new Async(this);\n    initializeComponentRef(this);\n\n    const { selection } = this.props;\n\n    // Reflect the initial modal state of selection into the state.\n    const isModal = selection.isModal && selection.isModal();\n\n    this.state = {\n      isModal,\n    };\n  }\n\n  public componentDidMount(): void {\n    const win = getWindow(this._root.current);\n\n    // Track the latest modifier keys globally.\n    this._events.on(win, 'keydown, keyup', this._updateModifiers, true);\n    this._events.on(document, 'click', this._findScrollParentAndTryClearOnEmptyClick);\n    this._events.on(document.body, 'touchstart', this._onTouchStartCapture, true);\n    this._events.on(document.body, 'touchend', this._onTouchStartCapture, true);\n\n    // Subscribe to the selection to keep modal state updated.\n    this._events.on(this.props.selection, 'change', this._onSelectionChange);\n  }\n\n  public render(): JSX.Element {\n    const { isModal } = this.state;\n\n    return (\n      <div\n        className={css('ms-SelectionZone', this.props.className, {\n          'ms-SelectionZone--modal': !!isModal,\n        })}\n        ref={this._root}\n        onKeyDown={this._onKeyDown}\n        onMouseDown={this._onMouseDown}\n        onKeyDownCapture={this._onKeyDownCapture}\n        onClick={this._onClick}\n        role=\"presentation\"\n        onDoubleClick={this._onDoubleClick}\n        onContextMenu={this._onContextMenu}\n        onMouseDownCapture={this._onMouseDownCapture}\n        onFocusCapture={this._onFocus}\n        data-selection-is-modal={isModal ? true : undefined}\n      >\n        {this.props.children}\n        <FocusRects />\n      </div>\n    );\n  }\n\n  public componentDidUpdate(previousProps: ISelectionZoneProps): void {\n    const { selection } = this.props;\n\n    if (selection !== previousProps.selection) {\n      // Whenever selection changes, update the subscripton to keep modal state updated.\n      this._events.off(previousProps.selection);\n      this._events.on(selection, 'change', this._onSelectionChange);\n    }\n  }\n\n  public componentWillUnmount(): void {\n    this._events.dispose();\n    this._async.dispose();\n  }\n\n  /**\n   * In some cases, the consuming scenario requires to set focus on a row without having SelectionZone\n   * react to the event. Note that focus events in IE \\<= 11 will occur asynchronously after .focus() has\n   * been called on an element, so we need a flag to store the idea that we will bypass the \"next\"\n   * focus event that occurs. This method does that.\n   */\n  public ignoreNextFocus = (): void => {\n    this._handleNextFocus(false);\n  };\n\n  private _onSelectionChange = (): void => {\n    const { selection } = this.props;\n\n    const isModal = selection.isModal && selection.isModal();\n\n    this.setState({\n      isModal,\n    });\n  };\n\n  private _onMouseDownCapture = (ev: React.MouseEvent<HTMLElement>): void => {\n    let target = ev.target as HTMLElement;\n\n    if (document.activeElement !== target && !elementContains(document.activeElement as HTMLElement, target)) {\n      this.ignoreNextFocus();\n      return;\n    }\n\n    if (!elementContains(target, this._root.current)) {\n      return;\n    }\n\n    while (target !== this._root.current) {\n      if (this._hasAttribute(target, SELECTION_INVOKE_ATTRIBUTE_NAME)) {\n        this.ignoreNextFocus();\n        break;\n      }\n\n      target = getParent(target) as HTMLElement;\n    }\n  };\n\n  /**\n   * When we focus an item, for single/multi select scenarios, we should try to select it immediately\n   * as long as the focus did not originate from a mouse down/touch event. For those cases, we handle them\n   * specially.\n   */\n  private _onFocus = (ev: React.FocusEvent<HTMLElement>): void => {\n    const target = ev.target as HTMLElement;\n    const { selection } = this.props;\n    const isToggleModifierPressed = this._isCtrlPressed || this._isMetaPressed;\n\n    const selectionMode = this._getSelectionMode();\n\n    if (this._shouldHandleFocus && selectionMode !== SelectionMode.none) {\n      const isToggle = this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME);\n      const itemRoot = this._findItemRoot(target);\n\n      if (!isToggle && itemRoot) {\n        const index = this._getItemIndex(itemRoot);\n\n        if (isToggleModifierPressed) {\n          // set anchor only.\n          selection.setIndexSelected(index, selection.isIndexSelected(index), true);\n          if (this.props.enterModalOnTouch && this._isTouch && selection.setModal) {\n            selection.setModal(true);\n            this._setIsTouch(false);\n          }\n        } else {\n          if (this.props.isSelectedOnFocus) {\n            this._onItemSurfaceClick(ev, index);\n          }\n        }\n      }\n    }\n\n    this._handleNextFocus(false);\n  };\n\n  private _onMouseDown = (ev: React.MouseEvent<HTMLElement>): void => {\n    this._updateModifiers(ev);\n\n    let target = ev.target as HTMLElement;\n    const itemRoot = this._findItemRoot(target);\n\n    // No-op if selection is disabled\n    if (this._isSelectionDisabled(target)) {\n      return;\n    }\n\n    while (target !== this._root.current) {\n      if (this._hasAttribute(target, SELECTALL_TOGGLE_ALL_ATTRIBUTE_NAME)) {\n        break;\n      } else if (itemRoot) {\n        if (this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME)) {\n          break;\n        } else if (this._hasAttribute(target, SELECTION_INVOKE_ATTRIBUTE_NAME)) {\n          break;\n        } else if (\n          (target === itemRoot || this._shouldAutoSelect(target)) &&\n          !this._isShiftPressed &&\n          !this._isCtrlPressed &&\n          !this._isMetaPressed\n        ) {\n          this._onInvokeMouseDown(ev, this._getItemIndex(itemRoot));\n          break;\n        } else if (\n          this.props.disableAutoSelectOnInputElements &&\n          (target.tagName === 'A' || target.tagName === 'BUTTON' || target.tagName === 'INPUT')\n        ) {\n          return;\n        }\n      }\n\n      target = getParent(target) as HTMLElement;\n    }\n  };\n\n  private _onTouchStartCapture = (ev: React.TouchEvent<HTMLElement>): void => {\n    this._setIsTouch(true);\n  };\n\n  private _onClick = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { enableTouchInvocationTarget = false } = this.props;\n\n    this._updateModifiers(ev);\n\n    let target = ev.target as HTMLElement;\n    const itemRoot = this._findItemRoot(target);\n\n    const isSelectionDisabled = this._isSelectionDisabled(target);\n\n    while (target !== this._root.current) {\n      if (this._hasAttribute(target, SELECTALL_TOGGLE_ALL_ATTRIBUTE_NAME)) {\n        if (!isSelectionDisabled) {\n          this._onToggleAllClick(ev);\n        }\n        break;\n      } else if (itemRoot) {\n        const index = this._getItemIndex(itemRoot);\n\n        if (this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME)) {\n          if (!isSelectionDisabled) {\n            if (this._isShiftPressed) {\n              this._onItemSurfaceClick(ev, index);\n            } else {\n              this._onToggleClick(ev, index);\n            }\n          }\n          break;\n        } else if (\n          (this._isTouch &&\n            enableTouchInvocationTarget &&\n            this._hasAttribute(target, SELECTION_INVOKE_TOUCH_ATTRIBUTE_NAME)) ||\n          this._hasAttribute(target, SELECTION_INVOKE_ATTRIBUTE_NAME)\n        ) {\n          // Items should be invokable even if selection is disabled.\n          this._onInvokeClick(ev, index);\n          break;\n        } else if (target === itemRoot) {\n          if (!isSelectionDisabled) {\n            this._onItemSurfaceClick(ev, index);\n          }\n          break;\n        } else if (target.tagName === 'A' || target.tagName === 'BUTTON' || target.tagName === 'INPUT') {\n          return;\n        }\n      }\n\n      target = getParent(target) as HTMLElement;\n    }\n  };\n\n  private _onContextMenu = (ev: React.MouseEvent<HTMLElement>): void => {\n    const target = ev.target as HTMLElement;\n\n    const { onItemContextMenu, selection } = this.props;\n    if (onItemContextMenu) {\n      const itemRoot = this._findItemRoot(target);\n\n      if (itemRoot) {\n        const index = this._getItemIndex(itemRoot);\n\n        this._onInvokeMouseDown(ev, index);\n\n        const skipPreventDefault = onItemContextMenu(selection.getItems()[index], index, ev.nativeEvent);\n\n        // In order to keep back compat, if the value here is undefined, then we should still\n        // call preventDefault(). Only in the case where true is explicitly returned should\n        // the call be skipped.\n        if (!skipPreventDefault) {\n          ev.preventDefault();\n        }\n      }\n    }\n  };\n\n  private _isSelectionDisabled(target: HTMLElement): boolean {\n    if (this._getSelectionMode() === SelectionMode.none) {\n      return true;\n    }\n\n    while (target !== this._root.current) {\n      if (this._hasAttribute(target, SELECTION_DISABLED_ATTRIBUTE_NAME)) {\n        return true;\n      }\n      target = getParent(target) as HTMLElement;\n    }\n\n    return false;\n  }\n\n  /**\n   * In multi selection, if you double click within an item's root (but not within the invoke element or\n   * input elements), we should execute the invoke handler.\n   */\n  private _onDoubleClick = (ev: React.MouseEvent<HTMLElement>): void => {\n    let target = ev.target as HTMLElement;\n\n    const { onItemInvoked } = this.props;\n    const itemRoot = this._findItemRoot(target);\n\n    if (itemRoot && onItemInvoked && !this._isInputElement(target)) {\n      const index = this._getItemIndex(itemRoot);\n\n      while (target !== this._root.current) {\n        if (\n          this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME) ||\n          this._hasAttribute(target, SELECTION_INVOKE_ATTRIBUTE_NAME)\n        ) {\n          break;\n        } else if (target === itemRoot) {\n          this._onInvokeClick(ev, index);\n          break;\n        }\n\n        target = getParent(target) as HTMLElement;\n      }\n\n      target = getParent(target) as HTMLElement;\n    }\n  };\n\n  private _onKeyDownCapture = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    this._updateModifiers(ev);\n\n    this._handleNextFocus(true);\n  };\n\n  private _onKeyDown = (ev: React.KeyboardEvent<HTMLElement>): boolean | undefined => {\n    this._updateModifiers(ev);\n\n    let target = ev.target as HTMLElement;\n\n    const isSelectionDisabled = this._isSelectionDisabled(target);\n\n    const { selection } = this.props;\n    // eslint-disable-next-line deprecation/deprecation\n    const isSelectAllKey = ev.which === KeyCodes.a && (this._isCtrlPressed || this._isMetaPressed);\n    // eslint-disable-next-line deprecation/deprecation\n    const isClearSelectionKey = ev.which === KeyCodes.escape;\n\n    // Ignore key downs from input elements.\n    if (this._isInputElement(target)) {\n      // A key was pressed while an item in this zone was focused.\n      return;\n    }\n\n    const selectionMode = this._getSelectionMode();\n\n    // If ctrl-a is pressed, select all (if all are not already selected.)\n    if (isSelectAllKey && selectionMode === SelectionMode.multiple && !selection.isAllSelected()) {\n      if (!isSelectionDisabled) {\n        selection.setAllSelected(true);\n      }\n      ev.stopPropagation();\n      ev.preventDefault();\n      return;\n    }\n\n    // If escape is pressed, clear selection (if any are selected.)\n    if (isClearSelectionKey && selection.getSelectedCount() > 0) {\n      if (!isSelectionDisabled) {\n        selection.setAllSelected(false);\n      }\n      ev.stopPropagation();\n      ev.preventDefault();\n      return;\n    }\n\n    const itemRoot = this._findItemRoot(target);\n\n    // If a key was pressed within an item, we should treat \"enters\" as invokes and \"space\" as toggle\n    if (itemRoot) {\n      const index = this._getItemIndex(itemRoot);\n\n      while (target !== this._root.current) {\n        if (this._hasAttribute(target, SELECTION_TOGGLE_ATTRIBUTE_NAME)) {\n          // For toggle elements, assuming they are rendered as buttons, they will generate a click event,\n          // so we can no-op for any keydowns in this case.\n          break;\n        } else if (this._shouldAutoSelect(target)) {\n          if (!isSelectionDisabled) {\n            // If the event went to an element which should trigger auto-select, select it and then let\n            // the default behavior kick in.\n            this._onInvokeMouseDown(ev, index);\n          }\n          break;\n        } else if (\n          // eslint-disable-next-line deprecation/deprecation\n          (ev.which === KeyCodes.enter || ev.which === KeyCodes.space) &&\n          (target.tagName === 'BUTTON' || target.tagName === 'A' || target.tagName === 'INPUT')\n        ) {\n          return false;\n        } else if (target === itemRoot) {\n          // eslint-disable-next-line deprecation/deprecation\n          if (ev.which === KeyCodes.enter) {\n            // Items should be invokable even if selection is disabled.\n            this._onInvokeClick(ev, index);\n            ev.preventDefault();\n            return;\n            // eslint-disable-next-line deprecation/deprecation\n          } else if (ev.which === KeyCodes.space) {\n            if (!isSelectionDisabled) {\n              this._onToggleClick(ev, index);\n            }\n            ev.preventDefault();\n            return;\n          }\n          break;\n        }\n\n        target = getParent(target) as HTMLElement;\n      }\n    }\n  };\n\n  private _onToggleAllClick(ev: React.MouseEvent<HTMLElement>): void {\n    const { selection } = this.props;\n\n    const selectionMode = this._getSelectionMode();\n\n    if (selectionMode === SelectionMode.multiple) {\n      selection.toggleAllSelected();\n      ev.stopPropagation();\n      ev.preventDefault();\n    }\n  }\n\n  private _onToggleClick(ev: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>, index: number): void {\n    const { selection } = this.props;\n\n    const selectionMode = this._getSelectionMode();\n\n    selection.setChangeEvents(false);\n\n    if (this.props.enterModalOnTouch && this._isTouch && !selection.isIndexSelected(index) && selection.setModal) {\n      selection.setModal(true);\n      this._setIsTouch(false);\n    }\n\n    if (selectionMode === SelectionMode.multiple) {\n      selection.toggleIndexSelected(index);\n    } else if (selectionMode === SelectionMode.single) {\n      const isSelected = selection.isIndexSelected(index);\n      const isModal = selection.isModal && selection.isModal();\n      selection.setAllSelected(false);\n      selection.setIndexSelected(index, !isSelected, true);\n      if (isModal && selection.setModal) {\n        // Since the above call to setAllSelected(false) clears modal state,\n        // restore it. This occurs because the SelectionMode of the Selection\n        // may differ from the SelectionZone.\n        selection.setModal(true);\n      }\n    } else {\n      selection.setChangeEvents(true);\n      return;\n    }\n\n    selection.setChangeEvents(true);\n\n    ev.stopPropagation();\n\n    // NOTE: ev.preventDefault is not called for toggle clicks, because this will kill the browser behavior\n    // for checkboxes if you use a checkbox for the toggle.\n  }\n\n  private _onInvokeClick(ev: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>, index: number): void {\n    const { selection, onItemInvoked } = this.props;\n\n    if (onItemInvoked) {\n      onItemInvoked(selection.getItems()[index], index, ev.nativeEvent);\n      ev.preventDefault();\n      ev.stopPropagation();\n    }\n  }\n\n  private _onItemSurfaceClick(ev: React.SyntheticEvent<HTMLElement>, index: number): void {\n    const { selection } = this.props;\n    const isToggleModifierPressed = this._isCtrlPressed || this._isMetaPressed;\n\n    const selectionMode = this._getSelectionMode();\n\n    if (selectionMode === SelectionMode.multiple) {\n      if (this._isShiftPressed && !this._isTabPressed) {\n        selection.selectToIndex(index, !isToggleModifierPressed);\n      } else if (isToggleModifierPressed) {\n        selection.toggleIndexSelected(index);\n      } else {\n        this._clearAndSelectIndex(index);\n      }\n    } else if (selectionMode === SelectionMode.single) {\n      this._clearAndSelectIndex(index);\n    }\n  }\n\n  private _onInvokeMouseDown(\n    ev: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>,\n    index: number,\n  ): void {\n    const { selection } = this.props;\n\n    // Only do work if item is not selected.\n    if (selection.isIndexSelected(index)) {\n      return;\n    }\n\n    this._clearAndSelectIndex(index);\n  }\n\n  /**\n   * To avoid high startup cost of traversing the DOM on component mount,\n   * defer finding the scrollable parent until a click interaction.\n   *\n   * The styles will probably already calculated since we're running in a click handler,\n   * so this is less likely to cause layout thrashing then doing it in mount.\n   */\n  private _findScrollParentAndTryClearOnEmptyClick(ev: MouseEvent) {\n    const scrollParent = findScrollableParent(this._root.current) as HTMLElement;\n    // unbind this handler and replace binding with a binding on the actual scrollable parent\n    this._events.off(document, 'click', this._findScrollParentAndTryClearOnEmptyClick);\n    this._events.on(scrollParent, 'click', this._tryClearOnEmptyClick);\n\n    // If we clicked inside the scrollable parent, call through to the handler on this click.\n    if ((scrollParent && ev.target instanceof Node && scrollParent.contains(ev.target)) || scrollParent === ev.target) {\n      this._tryClearOnEmptyClick(ev);\n    }\n  }\n\n  private _tryClearOnEmptyClick(ev: MouseEvent): void {\n    if (!this.props.selectionPreservedOnEmptyClick && this._isNonHandledClick(ev.target as HTMLElement)) {\n      this.props.selection.setAllSelected(false);\n    }\n  }\n\n  private _clearAndSelectIndex(index: number): void {\n    const { selection } = this.props;\n    const isAlreadySingleSelected = selection.getSelectedCount() === 1 && selection.isIndexSelected(index);\n\n    if (!isAlreadySingleSelected) {\n      const isModal = selection.isModal && selection.isModal();\n      selection.setChangeEvents(false);\n      selection.setAllSelected(false);\n      selection.setIndexSelected(index, true, true);\n      if (isModal || (this.props.enterModalOnTouch && this._isTouch)) {\n        if (selection.setModal) {\n          selection.setModal(true);\n        }\n        if (this._isTouch) {\n          this._setIsTouch(false);\n        }\n      }\n      selection.setChangeEvents(true);\n    }\n  }\n\n  /**\n   * We need to track the modifier key states so that when focus events occur, which do not contain\n   * modifier states in the Event object, we know how to behave.\n   */\n  private _updateModifiers(ev: React.KeyboardEvent<HTMLElement> | React.MouseEvent<HTMLElement>): void {\n    this._isShiftPressed = ev.shiftKey;\n    this._isCtrlPressed = ev.ctrlKey;\n    this._isMetaPressed = ev.metaKey;\n\n    const keyCode = (ev as React.KeyboardEvent<HTMLElement>).keyCode;\n    this._isTabPressed = keyCode ? keyCode === KeyCodes.tab : false;\n  }\n\n  private _findItemRoot(target: HTMLElement): HTMLElement | undefined {\n    const { selection } = this.props;\n\n    while (target !== this._root.current) {\n      const indexValue = target.getAttribute(SELECTION_INDEX_ATTRIBUTE_NAME);\n      const index = Number(indexValue);\n\n      if (indexValue !== null && index >= 0 && index < selection.getItems().length) {\n        break;\n      }\n\n      target = getParent(target) as HTMLElement;\n    }\n\n    if (target === this._root.current) {\n      return undefined;\n    }\n\n    return target;\n  }\n\n  private _getItemIndex(itemRoot: HTMLElement): number {\n    return Number(itemRoot.getAttribute(SELECTION_INDEX_ATTRIBUTE_NAME));\n  }\n\n  private _shouldAutoSelect(element: HTMLElement): boolean {\n    return this._hasAttribute(element, SELECTION_SELECT_ATTRIBUTE_NAME);\n  }\n\n  private _hasAttribute(element: HTMLElement, attributeName: string): boolean {\n    let isToggle = false;\n\n    while (!isToggle && element !== this._root.current) {\n      isToggle = element.getAttribute(attributeName) === 'true';\n      element = getParent(element) as HTMLElement;\n    }\n\n    return isToggle;\n  }\n\n  private _isInputElement(element: HTMLElement): boolean {\n    return element.tagName === 'INPUT' || element.tagName === 'TEXTAREA';\n  }\n\n  private _isNonHandledClick(element: HTMLElement): boolean {\n    const doc = getDocument();\n\n    if (doc && element) {\n      while (element && element !== doc.documentElement) {\n        if (isElementTabbable(element)) {\n          return false;\n        }\n\n        element = getParent(element) as HTMLElement;\n      }\n    }\n\n    return true;\n  }\n\n  private _handleNextFocus(handleFocus: boolean): void {\n    if (this._shouldHandleFocusTimeoutId) {\n      this._async.clearTimeout(this._shouldHandleFocusTimeoutId);\n      this._shouldHandleFocusTimeoutId = undefined;\n    }\n\n    this._shouldHandleFocus = handleFocus;\n\n    if (handleFocus) {\n      this._async.setTimeout(() => {\n        this._shouldHandleFocus = false;\n      }, 100);\n    }\n  }\n\n  private _setIsTouch(isTouch: boolean): void {\n    if (this._isTouchTimeoutId) {\n      this._async.clearTimeout(this._isTouchTimeoutId);\n      this._isTouchTimeoutId = undefined;\n    }\n\n    this._isTouch = true;\n\n    if (isTouch) {\n      this._async.setTimeout(() => {\n        this._isTouch = false;\n      }, 300);\n    }\n  }\n\n  private _getSelectionMode(): SelectionMode {\n    const { selection } = this.props;\n\n    const { selectionMode = selection ? selection.mode : SelectionMode.none } = this.props;\n\n    return selectionMode;\n  }\n}\n","import { IObjectWithKey, ISelection, SELECTION_CHANGE, SelectionMode } from './Selection.types';\nimport { EventGroup } from '../EventGroup';\n\n/**\n * {@docCategory Selection}\n */\nexport interface ISelectionOptions<TItem = IObjectWithKey> {\n  onSelectionChanged?: () => void;\n  /** Custom logic to generate item keys. Required if `TItem` does not have a `key` property. */\n  getKey?: (item: TItem, index?: number) => string | number;\n  canSelectItem?: (item: TItem, index?: number) => boolean;\n  selectionMode?: SelectionMode;\n  items?: TItem[];\n}\n\n/**\n * Selection options with required `getKey` property.\n * {@docCategory Selection}\n */\nexport type ISelectionOptionsWithRequiredGetKey<TItem> = ISelectionOptions<TItem> &\n  Required<Pick<ISelectionOptions<TItem>, 'getKey'>>;\n\n/**\n * {@docCategory Selection}\n */\nexport class Selection<TItem = IObjectWithKey> implements ISelection<TItem> {\n  /** Number of items selected. Do not modify. */\n  public count!: number;\n  public readonly mode!: SelectionMode;\n\n  private _getKey!: (item: TItem, index?: number) => string | number;\n  private _canSelectItem!: (item: TItem, index?: number) => boolean;\n\n  private _changeEventSuppressionCount: number;\n  private _items!: TItem[];\n  private _selectedItems!: TItem[] | null;\n  private _selectedIndices: number[] | undefined;\n  private _isAllSelected!: boolean;\n  private _exemptedIndices!: { [index: string]: boolean };\n  private _exemptedCount: number;\n  private _keyToIndexMap!: { [key: string]: number };\n  private _anchoredIndex: number;\n  private _onSelectionChanged: (() => void) | undefined;\n  private _hasChanged!: boolean;\n  private _unselectableIndices!: { [index: string]: boolean };\n  private _unselectableCount: number;\n  private _isModal: boolean;\n\n  /**\n   * Create a new Selection. If `TItem` does not have a `key` property, you must provide an options\n   * object with a `getKey` implementation. Providing options is optional otherwise.\n   * (At most one `options` object is accepted.)\n   */\n  constructor(\n    ...options: TItem extends IObjectWithKey // If the item type has a built-in key...\n      ? [] | [ISelectionOptions<TItem>] // Then the arguments can be empty or have the options without `getKey`\n      : [ISelectionOptionsWithRequiredGetKey<TItem>] // Otherwise, arguments require options with `getKey`.\n  ) {\n    const { onSelectionChanged, getKey, canSelectItem = () => true, items, selectionMode = SelectionMode.multiple } =\n      options[0] || ({} as ISelectionOptions<TItem>);\n\n    this.mode = selectionMode;\n\n    this._getKey = getKey || defaultGetKey;\n\n    this._changeEventSuppressionCount = 0;\n    this._exemptedCount = 0;\n    this._anchoredIndex = 0;\n    this._unselectableCount = 0;\n\n    this._onSelectionChanged = onSelectionChanged;\n    this._canSelectItem = canSelectItem;\n\n    this._isModal = false;\n\n    this.setItems(items || [], true);\n\n    this.count = this.getSelectedCount();\n  }\n\n  public canSelectItem(item: TItem, index?: number): boolean {\n    if (typeof index === 'number' && index < 0) {\n      return false;\n    }\n\n    return this._canSelectItem(item, index);\n  }\n\n  public getKey(item: TItem, index?: number): string {\n    const key = this._getKey(item, index);\n\n    return typeof key === 'number' || key ? `${key}` : '';\n  }\n\n  public setChangeEvents(isEnabled: boolean, suppressChange?: boolean): void {\n    this._changeEventSuppressionCount += isEnabled ? -1 : 1;\n\n    if (this._changeEventSuppressionCount === 0 && this._hasChanged) {\n      this._hasChanged = false;\n\n      if (!suppressChange) {\n        this._change();\n      }\n    }\n  }\n\n  public isModal(): boolean {\n    return this._isModal;\n  }\n\n  public setModal(isModal: boolean): void {\n    if (this._isModal !== isModal) {\n      this.setChangeEvents(false);\n\n      this._isModal = isModal;\n\n      if (!isModal) {\n        this.setAllSelected(false);\n      }\n\n      this._change();\n\n      this.setChangeEvents(true);\n    }\n  }\n\n  /**\n   * Selection needs the items, call this method to set them. If the set\n   * of items is the same, this will re-evaluate selection and index maps.\n   * Otherwise, shouldClear should be set to true, so that selection is\n   * cleared.\n   */\n  public setItems(items: TItem[], shouldClear: boolean = true): void {\n    const newKeyToIndexMap: { [key: string]: number } = {};\n    const newUnselectableIndices: { [key: string]: boolean } = {};\n    let hasSelectionChanged = false;\n\n    this.setChangeEvents(false);\n\n    // Reset the unselectable count.\n    this._unselectableCount = 0;\n\n    // Build lookup table for quick selection evaluation.\n    for (let i = 0; i < items.length; i++) {\n      const item = items[i];\n\n      if (item) {\n        const key = this.getKey(item, i);\n\n        if (key) {\n          newKeyToIndexMap[key] = i;\n        }\n      }\n\n      newUnselectableIndices[i] = item && !this.canSelectItem(item);\n      if (newUnselectableIndices[i]) {\n        this._unselectableCount++;\n      }\n    }\n\n    if (shouldClear || items.length === 0) {\n      this._setAllSelected(false, true);\n    }\n\n    // Check the exemption list for discrepencies.\n    const newExemptedIndicies: { [key: string]: boolean } = {};\n    let newExemptedCount = 0;\n\n    for (const indexProperty in this._exemptedIndices) {\n      if (this._exemptedIndices.hasOwnProperty(indexProperty)) {\n        const index = Number(indexProperty);\n        const item = this._items[index];\n        const exemptKey = item ? this.getKey(item, Number(index)) : undefined;\n        const newIndex = exemptKey ? newKeyToIndexMap[exemptKey] : index;\n\n        if (newIndex === undefined) {\n          // The item has likely been replaced or removed.\n          hasSelectionChanged = true;\n        } else {\n          // We know the new index of the item. update the existing exemption table.\n          newExemptedIndicies[newIndex] = true;\n          newExemptedCount++;\n          hasSelectionChanged = hasSelectionChanged || newIndex !== index;\n        }\n      }\n    }\n\n    if (this._items && this._exemptedCount === 0 && items.length !== this._items.length && this._isAllSelected) {\n      // If everything was selected but the number of items has changed, selection has changed.\n      hasSelectionChanged = true;\n    }\n\n    this._exemptedIndices = newExemptedIndicies;\n    this._exemptedCount = newExemptedCount;\n    this._keyToIndexMap = newKeyToIndexMap;\n    this._unselectableIndices = newUnselectableIndices;\n    this._items = items;\n    this._selectedItems = null;\n\n    if (hasSelectionChanged) {\n      this._updateCount();\n      this._change();\n    }\n\n    this.setChangeEvents(true);\n  }\n\n  public getItems(): TItem[] {\n    return this._items;\n  }\n\n  public getSelection(): TItem[] {\n    if (!this._selectedItems) {\n      this._selectedItems = [];\n\n      const items = this._items;\n\n      if (items) {\n        for (let i = 0; i < items.length; i++) {\n          if (this.isIndexSelected(i)) {\n            this._selectedItems.push(items[i]);\n          }\n        }\n      }\n    }\n\n    return this._selectedItems;\n  }\n\n  public getSelectedCount(): number {\n    return this._isAllSelected\n      ? this._items.length - this._exemptedCount - this._unselectableCount\n      : this._exemptedCount;\n  }\n\n  public getSelectedIndices(): number[] {\n    if (!this._selectedIndices) {\n      this._selectedIndices = [];\n\n      const items = this._items;\n\n      if (items) {\n        for (let i = 0; i < items.length; i++) {\n          if (this.isIndexSelected(i)) {\n            this._selectedIndices.push(i);\n          }\n        }\n      }\n    }\n\n    return this._selectedIndices;\n  }\n\n  public isRangeSelected(fromIndex: number, count: number): boolean {\n    if (count === 0) {\n      return false;\n    }\n\n    const endIndex = fromIndex + count;\n\n    for (let i = fromIndex; i < endIndex; i++) {\n      if (!this.isIndexSelected(i)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  public isAllSelected(): boolean {\n    let selectableCount = this._items.length - this._unselectableCount;\n\n    // In single mode, we can only have a max of 1 item.\n    if (this.mode === SelectionMode.single) {\n      selectableCount = Math.min(selectableCount, 1);\n    }\n\n    return (\n      (this.count > 0 && this._isAllSelected && this._exemptedCount === 0) ||\n      (!this._isAllSelected && this._exemptedCount === selectableCount && selectableCount > 0)\n    );\n  }\n\n  public isKeySelected(key: string): boolean {\n    const index = this._keyToIndexMap[key];\n\n    return this.isIndexSelected(index);\n  }\n\n  public isIndexSelected(index: number): boolean {\n    return !!(\n      (this.count > 0 && this._isAllSelected && !this._exemptedIndices[index] && !this._unselectableIndices[index]) ||\n      (!this._isAllSelected && this._exemptedIndices[index])\n    );\n  }\n\n  public setAllSelected(isAllSelected: boolean): void {\n    if (isAllSelected && this.mode !== SelectionMode.multiple) {\n      return;\n    }\n\n    const selectableCount = this._items ? this._items.length - this._unselectableCount : 0;\n\n    this.setChangeEvents(false);\n\n    if (selectableCount > 0 && (this._exemptedCount > 0 || isAllSelected !== this._isAllSelected)) {\n      this._exemptedIndices = {};\n\n      if (isAllSelected !== this._isAllSelected || this._exemptedCount > 0) {\n        this._exemptedCount = 0;\n        this._isAllSelected = isAllSelected;\n        this._change();\n      }\n\n      this._updateCount();\n    }\n\n    this.setChangeEvents(true);\n  }\n\n  public setKeySelected(key: string, isSelected: boolean, shouldAnchor: boolean): void {\n    const index = this._keyToIndexMap[key];\n\n    if (index >= 0) {\n      this.setIndexSelected(index, isSelected, shouldAnchor);\n    }\n  }\n\n  public setIndexSelected(index: number, isSelected: boolean, shouldAnchor: boolean): void {\n    if (this.mode === SelectionMode.none) {\n      return;\n    }\n\n    // Clamp the index.\n    index = Math.min(Math.max(0, index), this._items.length - 1);\n\n    // No-op on out of bounds selections.\n    if (index < 0 || index >= this._items.length) {\n      return;\n    }\n\n    this.setChangeEvents(false);\n\n    const isExempt = this._exemptedIndices[index];\n    const canSelect = !this._unselectableIndices[index];\n\n    if (canSelect) {\n      if (isSelected && this.mode === SelectionMode.single) {\n        // If this is single-select, the previous selection should be removed.\n        this._setAllSelected(false, true);\n      }\n\n      // Determine if we need to remove the exemption.\n      if (isExempt && ((isSelected && this._isAllSelected) || (!isSelected && !this._isAllSelected))) {\n        delete this._exemptedIndices[index];\n        this._exemptedCount--;\n      }\n\n      // Determine if we need to add the exemption.\n      if (!isExempt && ((isSelected && !this._isAllSelected) || (!isSelected && this._isAllSelected))) {\n        this._exemptedIndices[index] = true;\n        this._exemptedCount++;\n      }\n\n      if (shouldAnchor) {\n        this._anchoredIndex = index;\n      }\n    }\n\n    this._updateCount();\n\n    this.setChangeEvents(true);\n  }\n\n  public selectToKey(key: string, clearSelection?: boolean): void {\n    this.selectToIndex(this._keyToIndexMap[key], clearSelection);\n  }\n\n  public selectToIndex(index: number, clearSelection?: boolean): void {\n    if (this.mode === SelectionMode.none) {\n      return;\n    }\n\n    if (this.mode === SelectionMode.single) {\n      this.setIndexSelected(index, true, true);\n      return;\n    }\n\n    const anchorIndex = this._anchoredIndex || 0;\n    let startIndex = Math.min(index, anchorIndex);\n    const endIndex = Math.max(index, anchorIndex);\n\n    this.setChangeEvents(false);\n\n    if (clearSelection) {\n      this._setAllSelected(false, true);\n    }\n\n    for (; startIndex <= endIndex; startIndex++) {\n      this.setIndexSelected(startIndex, true, false);\n    }\n\n    this.setChangeEvents(true);\n  }\n\n  public toggleAllSelected(): void {\n    this.setAllSelected(!this.isAllSelected());\n  }\n\n  public toggleKeySelected(key: string): void {\n    this.setKeySelected(key, !this.isKeySelected(key), true);\n  }\n\n  public toggleIndexSelected(index: number): void {\n    this.setIndexSelected(index, !this.isIndexSelected(index), true);\n  }\n\n  public toggleRangeSelected(fromIndex: number, count: number): void {\n    if (this.mode === SelectionMode.none) {\n      return;\n    }\n\n    const isRangeSelected = this.isRangeSelected(fromIndex, count);\n    const endIndex = fromIndex + count;\n\n    if (this.mode === SelectionMode.single && count > 1) {\n      return;\n    }\n\n    this.setChangeEvents(false);\n    for (let i = fromIndex; i < endIndex; i++) {\n      this.setIndexSelected(i, !isRangeSelected, false);\n    }\n    this.setChangeEvents(true);\n  }\n\n  private _updateCount(preserveModalState: boolean = false): void {\n    const count = this.getSelectedCount();\n\n    if (count !== this.count) {\n      this.count = count;\n      this._change();\n    }\n\n    if (!this.count && !preserveModalState) {\n      this.setModal(false);\n    }\n  }\n\n  private _setAllSelected(isAllSelected: boolean, preserveModalState: boolean = false): void {\n    if (isAllSelected && this.mode !== SelectionMode.multiple) {\n      return;\n    }\n\n    const selectableCount = this._items ? this._items.length - this._unselectableCount : 0;\n\n    this.setChangeEvents(false);\n\n    if (selectableCount > 0 && (this._exemptedCount > 0 || isAllSelected !== this._isAllSelected)) {\n      this._exemptedIndices = {};\n\n      if (isAllSelected !== this._isAllSelected || this._exemptedCount > 0) {\n        this._exemptedCount = 0;\n        this._isAllSelected = isAllSelected;\n        this._change();\n      }\n\n      this._updateCount(preserveModalState);\n    }\n\n    this.setChangeEvents(true);\n  }\n\n  private _change(): void {\n    if (this._changeEventSuppressionCount === 0) {\n      this._selectedItems = null;\n      this._selectedIndices = undefined;\n\n      EventGroup.raise(this, SELECTION_CHANGE);\n\n      if (this._onSelectionChanged) {\n        this._onSelectionChanged();\n      }\n    } else {\n      this._hasChanged = true;\n    }\n  }\n}\n\nfunction defaultGetKey<TItem = IObjectWithKey>(item: TItem, index?: number): string | number {\n  // 0 may be used as a key\n  const { key = `${index}` } = (item || {}) as IObjectWithKey;\n  return key;\n}\n","import { IGroupedListStyleProps, IGroupedListStyles } from './GroupedList.types';\nimport { getGlobalClassNames, AnimationVariables } from '../../Styling';\n\nconst GlobalClassNames = {\n  root: 'ms-GroupedList',\n  compact: 'ms-GroupedList--Compact',\n  group: 'ms-GroupedList-group',\n  link: 'ms-Link',\n  listCell: 'ms-List-cell',\n};\n\nconst beziers = {\n  easeInOutSine: 'cubic-bezier(0.445, 0.050, 0.550, 0.950)',\n};\n\nexport const getStyles = (props: IGroupedListStyleProps): IGroupedListStyles => {\n  const { theme, className, compact } = props;\n  const { palette } = theme;\n  const classNames = getGlobalClassNames(GlobalClassNames, theme!);\n\n  return {\n    root: [\n      classNames.root,\n      theme.fonts.small,\n      {\n        position: 'relative',\n        selectors: {\n          [`.${classNames.listCell}`]: {\n            minHeight: 38, // be consistent with DetailsList styles\n          },\n        },\n      },\n      compact && [\n        classNames.compact,\n        {\n          selectors: {\n            [`.${classNames.listCell}`]: {\n              minHeight: 32, // be consistent with DetailsList styles\n            },\n          },\n        },\n      ],\n      className,\n    ],\n    group: [\n      classNames.group,\n      {\n        transition: `background-color ${AnimationVariables.durationValue2} ${beziers.easeInOutSine}`,\n      },\n    ],\n    groupIsDropping: {\n      backgroundColor: palette.neutralLight,\n    },\n  };\n};\n","import * as React from 'react';\nimport { ITheme, IStyle } from '../../Styling';\nimport { IRefObject, IStyleFunctionOrObject } from '../../Utilities';\n\n/**\n * {@docCategory Spinner}\n */\nexport interface ISpinner {}\n\n/**\n * Spinner component props.\n * {@docCategory Spinner}\n */\nexport interface ISpinnerProps extends React.HTMLAttributes<HTMLElement> {\n  /**\n   * Optional callback to access the ISpinner interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: IRefObject<ISpinner>;\n\n  /**\n   * @deprecated Use `size` instead. Will be removed at \\>= 2.0.0.\n   */\n  // eslint-disable-next-line deprecation/deprecation\n  type?: SpinnerType;\n\n  /**\n   * The size of Spinner to render.\n   * @defaultvalue SpinnerType.medium\n   */\n  size?: SpinnerSize;\n\n  /**\n   * The label to show next to the Spinner. Label updates will be announced to the screen readers.\n   * Use ariaLive to control politeness level.\n   */\n  label?: string;\n\n  /**\n   * Additional CSS class(es) to apply to the Spinner.\n   */\n  className?: string;\n\n  /**\n   * Politeness setting for label update announcement.\n   * @defaultvalue polite\n   */\n  ariaLive?: 'assertive' | 'polite' | 'off';\n\n  /**\n   * Alternative status label for screen reader\n   */\n  ariaLabel?: string;\n\n  /**\n   * Theme (provided through customization.)\n   */\n  theme?: ITheme;\n\n  /**\n   * Call to provide customized styling that will layer on top of the variant rules.\n   */\n  styles?: IStyleFunctionOrObject<ISpinnerStyleProps, ISpinnerStyles>;\n\n  /**\n   * The position of the label in regards of the spinner animation.\n   * @defaultvalue SpinnerLabelPosition.bottom\n   */\n  labelPosition?: SpinnerLabelPosition;\n}\n\n/**\n * Possible variations of the spinner circle size.\n * {@docCategory Spinner}\n */\nexport enum SpinnerSize {\n  /**\n   * 12px Spinner diameter\n   */\n  xSmall = 0,\n\n  /**\n   * 16px Spinner diameter\n   */\n  small = 1,\n\n  /**\n   * 20px Spinner diameter\n   */\n  medium = 2,\n\n  /**\n   * 28px Spinner diameter\n   */\n  large = 3,\n}\n\n/**\n * Possible locations of the label in regards to the spinner\n * {@docCategory Spinner}\n */\nexport type SpinnerLabelPosition = 'top' | 'right' | 'bottom' | 'left';\n\n/**\n * @deprecated Use `SpinnerSize` instead. Will be removed at \\>= 2.0.0.\n * {@docCategory Spinner}\n */\nexport enum SpinnerType {\n  /**\n   * @deprecated Use `SpinnerSize.medium` instead. Will be removed at \\>= 2.0.0.\n   */\n  normal = 0,\n\n  /**\n   * @deprecated Use `SpinnerSize.large` instead. Will be removed at \\>= 2.0.0.\n   */\n  large = 1,\n}\n\n/**\n * The props needed to construct styles.\n * This represents the simplified set of immutable things which control the class names.\n * {@docCategory Spinner}\n */\nexport interface ISpinnerStyleProps {\n  /** Theme provided by High-Order Component. */\n  theme: ITheme;\n\n  /** Size of the spinner animation. */\n  size?: SpinnerSize;\n\n  /** CSS class name for the component attached to the root stylable area. */\n  className?: string;\n\n  /** Position of the label in regards to the spinner animation. */\n  labelPosition?: SpinnerLabelPosition;\n}\n\n/**\n * Represents the stylable areas of the control.\n * {@docCategory Spinner}\n */\nexport interface ISpinnerStyles {\n  /** Styles for the root element. Refers to the wrapper containing both the circle and the label. */\n  root?: IStyle;\n\n  /** Styles for the spinner circle animation. */\n  circle?: IStyle;\n\n  /** Styles for the label accompanying the circle. */\n  label?: IStyle;\n\n  /** Styles for the hidden helper element to aid with screen readers. */\n  screenReaderText?: IStyle;\n}\n","import { IGroupHeaderStyleProps, IGroupHeaderStyles } from './GroupHeader.types';\nimport {\n  getGlobalClassNames,\n  getFocusStyle,\n  IStyle,\n  AnimationVariables,\n  FontWeights,\n  IconFontSizes,\n} from '../../Styling';\nimport { getRTL, IsFocusVisibleClassName } from '../../Utilities';\nimport { DEFAULT_CELL_STYLE_PROPS } from '../DetailsList/DetailsRow.styles';\nimport { CHECK_CELL_WIDTH } from '../DetailsList/DetailsRowCheck.styles';\n// For every group level there is a GroupSpacer added. Importing this const to have the source value in one place.\nimport { SPACER_WIDTH as EXPAND_BUTTON_WIDTH } from './GroupSpacer';\n\nconst GlobalClassNames = {\n  root: 'ms-GroupHeader',\n  compact: 'ms-GroupHeader--compact',\n  check: 'ms-GroupHeader-check',\n  dropIcon: 'ms-GroupHeader-dropIcon',\n  expand: 'ms-GroupHeader-expand',\n  isCollapsed: 'is-collapsed',\n  title: 'ms-GroupHeader-title',\n  isSelected: 'is-selected',\n  iconTag: 'ms-Icon--Tag',\n  group: 'ms-GroupedList-group',\n  isDropping: 'is-dropping',\n};\n\nconst beziers = {\n  easeOutCirc: 'cubic-bezier(0.075, 0.820, 0.165, 1.000)',\n  easeOutSine: 'cubic-bezier(0.390, 0.575, 0.565, 1.000)',\n  easeInBack: 'cubic-bezier(0.600, -0.280, 0.735, 0.045)',\n};\n\nconst DEFAULT_GROUP_HEADER_HEIGHT = 48;\nconst COMPACT_GROUP_HEADER_HEIGHT = 40;\n\nexport const getStyles = (props: IGroupHeaderStyleProps): IGroupHeaderStyles => {\n  const { theme, className, selected, isCollapsed, compact } = props;\n  // padding from the source to align GroupHeader title with DetailsRow's first cell.\n  const { cellLeftPadding } = DEFAULT_CELL_STYLE_PROPS;\n  const finalRowHeight = compact ? COMPACT_GROUP_HEADER_HEIGHT : DEFAULT_GROUP_HEADER_HEIGHT;\n\n  const { semanticColors, palette, fonts } = theme;\n\n  const classNames = getGlobalClassNames(GlobalClassNames, theme!);\n\n  const checkExpandResetStyles: IStyle = [\n    getFocusStyle(theme),\n    {\n      cursor: 'default',\n      background: 'none',\n      backgroundColor: 'transparent',\n      border: 'none',\n      padding: 0, // cancel default <button> padding\n    },\n  ];\n\n  return {\n    root: [\n      classNames.root,\n      getFocusStyle(theme),\n      theme.fonts.medium,\n      {\n        // keep the border for height but color it so it's invisible.\n        borderBottom: `1px solid ${semanticColors.listBackground}`,\n        cursor: 'default',\n        userSelect: 'none',\n        selectors: {\n          ':hover': {\n            background: semanticColors.listItemBackgroundHovered,\n            color: semanticColors.actionLinkHovered,\n          },\n          [`&:hover .${classNames.check}`]: {\n            opacity: 1,\n          },\n          [`.${IsFocusVisibleClassName} &:focus .${classNames.check}`]: {\n            opacity: 1,\n          },\n          [`:global(.${classNames.group}.${classNames.isDropping})`]: {\n            selectors: {\n              [`& > .${classNames.root} .${classNames.dropIcon}`]: {\n                transition:\n                  `transform ${AnimationVariables.durationValue4} ${beziers.easeOutCirc} ` +\n                  `opacity ${AnimationVariables.durationValue1} ${beziers.easeOutSine}`,\n                transitionDelay: AnimationVariables.durationValue3,\n                opacity: 1,\n                transform: `rotate(0.2deg) scale(1);`, // rotation prevents jittery motion in IE\n              },\n\n              [`.${classNames.check}`]: {\n                opacity: 0,\n              },\n            },\n          },\n        },\n      },\n      selected && [\n        classNames.isSelected,\n        {\n          background: semanticColors.listItemBackgroundChecked,\n          selectors: {\n            ':hover': {\n              background: semanticColors.listItemBackgroundCheckedHovered,\n            },\n            [`${classNames.check}`]: {\n              opacity: 1,\n            },\n          },\n        },\n      ],\n      compact && [classNames.compact, { border: 'none' }],\n      className,\n    ],\n    groupHeaderContainer: [\n      {\n        display: 'flex',\n        alignItems: 'center',\n        height: finalRowHeight,\n      },\n    ],\n    headerCount: [\n      {\n        padding: '0px 4px',\n      },\n    ],\n    check: [\n      classNames.check,\n      checkExpandResetStyles,\n      {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        // paddingTop and marginTop brought from the DetailsRow.styles.ts with explanation below.\n        // Ensure that the check cell covers the top border of the cell.\n        // This ensures the click target does not leave a spot which would\n        // cause other items to be deselected.\n        paddingTop: 1,\n        marginTop: -1,\n        opacity: 0,\n        width: CHECK_CELL_WIDTH,\n        height: finalRowHeight,\n        selectors: {\n          [`.${IsFocusVisibleClassName} &:focus`]: {\n            opacity: 1,\n          },\n        },\n      },\n    ],\n    expand: [\n      classNames.expand,\n      checkExpandResetStyles,\n      {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        fontSize: fonts.small.fontSize,\n        width: EXPAND_BUTTON_WIDTH,\n        height: finalRowHeight,\n        color: selected ? palette.neutralPrimary : palette.neutralSecondary,\n        selectors: {\n          ':hover': {\n            backgroundColor: selected ? palette.neutralQuaternary : palette.neutralLight,\n          },\n          ':active': {\n            backgroundColor: selected ? palette.neutralTertiaryAlt : palette.neutralQuaternaryAlt,\n          },\n        },\n      },\n    ],\n    expandIsCollapsed: [\n      isCollapsed\n        ? [\n            classNames.isCollapsed,\n            {\n              transform: 'rotate(0deg)',\n              transformOrigin: '50% 50%',\n              transition: 'transform .1s linear',\n            },\n          ]\n        : {\n            transform: getRTL(theme) ? 'rotate(-90deg)' : 'rotate(90deg)',\n            transformOrigin: '50% 50%',\n            transition: 'transform .1s linear',\n          },\n    ],\n    title: [\n      classNames.title,\n      {\n        paddingLeft: cellLeftPadding,\n        fontSize: compact ? fonts.medium.fontSize : fonts.mediumPlus.fontSize,\n        fontWeight: isCollapsed ? FontWeights.regular : FontWeights.semibold,\n        cursor: 'pointer',\n        outline: 0,\n        whiteSpace: 'nowrap',\n        textOverflow: 'ellipsis',\n      },\n    ],\n    dropIcon: [\n      classNames.dropIcon,\n      {\n        position: 'absolute',\n        left: -26,\n        fontSize: IconFontSizes.large,\n        color: palette.neutralSecondary,\n        transition:\n          `transform ${AnimationVariables.durationValue2} ${beziers.easeInBack}, ` +\n          `opacity ${AnimationVariables.durationValue4} ${beziers.easeOutSine}`,\n        opacity: 0,\n        transform: 'rotate(0.2deg) scale(0.65)', // rotation prevents jittery motion in IE\n        transformOrigin: '10px 10px',\n        selectors: {\n          [`:global(.${classNames.iconTag})`]: {\n            position: 'absolute',\n          },\n        },\n      },\n    ],\n  };\n};\n","import * as React from 'react';\nimport { ISpinnerProps, ISpinnerStyleProps, ISpinnerStyles, SpinnerType, SpinnerSize } from './Spinner.types';\nimport { classNamesFunction, DelayedRender, getNativeProps, divProperties } from '../../Utilities';\n\nconst getClassNames = classNamesFunction<ISpinnerStyleProps, ISpinnerStyles>();\n\nexport class SpinnerBase extends React.Component<ISpinnerProps, any> {\n  public static defaultProps: ISpinnerProps = {\n    size: SpinnerSize.medium,\n    ariaLive: 'polite',\n    labelPosition: 'bottom',\n  };\n\n  public render() {\n    // eslint-disable-next-line deprecation/deprecation\n    const { type, size, ariaLabel, ariaLive, styles, label, theme, className, labelPosition } = this.props;\n    const statusMessage = ariaLabel;\n    const nativeProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(this.props, divProperties, ['size']);\n\n    // SpinnerType is deprecated. If someone is still using this property, rather than putting the SpinnerType into the\n    // ISpinnerStyleProps, we'll map SpinnerType to its equivalent SpinnerSize and pass that in. Once SpinnerType\n    // finally goes away we should delete this.\n    let styleSize = size;\n    if (styleSize === undefined && type !== undefined) {\n      // eslint-disable-next-line deprecation/deprecation\n      styleSize = type === SpinnerType.large ? SpinnerSize.large : SpinnerSize.medium;\n    }\n\n    const classNames = getClassNames(styles!, {\n      theme: theme!,\n      size: styleSize,\n      className,\n      labelPosition,\n    });\n\n    return (\n      <div {...nativeProps} className={classNames.root}>\n        <div className={classNames.circle} />\n        {label && <div className={classNames.label}>{label}</div>}\n        {statusMessage && (\n          <div role=\"status\" aria-live={ariaLive}>\n            <DelayedRender>\n              <div className={classNames.screenReaderText}>{statusMessage}</div>\n            </DelayedRender>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","import { ISpinnerStyleProps, ISpinnerStyles, SpinnerSize } from './Spinner.types';\nimport {\n  hiddenContentStyle,\n  keyframes,\n  HighContrastSelector,\n  getGlobalClassNames,\n  getHighContrastNoAdjustStyle,\n} from '../../Styling';\nimport { memoizeFunction } from '../../Utilities';\n\nconst GlobalClassNames = {\n  root: 'ms-Spinner',\n  circle: 'ms-Spinner-circle',\n  label: 'ms-Spinner-label',\n};\n\nconst spinAnimation = memoizeFunction(() =>\n  keyframes({\n    '0%': {\n      transform: 'rotate(0deg)',\n    },\n    '100%': {\n      transform: 'rotate(360deg)',\n    },\n  }),\n);\n\nexport const getStyles = (props: ISpinnerStyleProps): ISpinnerStyles => {\n  const { theme, size, className, labelPosition } = props;\n\n  const { palette } = theme;\n\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  return {\n    root: [\n      classNames.root,\n      {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center',\n      },\n      labelPosition === 'top' && {\n        flexDirection: 'column-reverse',\n      },\n      labelPosition === 'right' && {\n        flexDirection: 'row',\n      },\n      labelPosition === 'left' && {\n        flexDirection: 'row-reverse',\n      },\n      className,\n    ],\n    circle: [\n      classNames.circle,\n      {\n        boxSizing: 'border-box',\n        borderRadius: '50%',\n        border: '1.5px solid ' + palette.themeLight,\n        borderTopColor: palette.themePrimary,\n        animationName: spinAnimation(),\n        animationDuration: '1.3s',\n        animationIterationCount: 'infinite',\n        animationTimingFunction: 'cubic-bezier(.53,.21,.29,.67)',\n        selectors: {\n          [HighContrastSelector]: {\n            borderTopColor: 'Highlight',\n            ...getHighContrastNoAdjustStyle(),\n          },\n        },\n      },\n      size === SpinnerSize.xSmall && [\n        'ms-Spinner--xSmall',\n        {\n          width: 12,\n          height: 12,\n        },\n      ],\n      size === SpinnerSize.small && [\n        'ms-Spinner--small',\n        {\n          width: 16,\n          height: 16,\n        },\n      ],\n      size === SpinnerSize.medium && [\n        'ms-Spinner--medium',\n        {\n          width: 20,\n          height: 20,\n        },\n      ],\n      size === SpinnerSize.large && [\n        'ms-Spinner--large',\n        {\n          width: 28,\n          height: 28,\n        },\n      ],\n    ],\n    label: [\n      classNames.label,\n      theme.fonts.small,\n      {\n        color: palette.themePrimary,\n        margin: '8px 0 0',\n        textAlign: 'center',\n      },\n      labelPosition === 'top' && {\n        margin: '0 0 8px',\n      },\n      labelPosition === 'right' && {\n        margin: '0 0 0 8px',\n      },\n      labelPosition === 'left' && {\n        margin: '0 8px 0 0',\n      },\n    ],\n    screenReaderText: hiddenContentStyle,\n  };\n};\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { SpinnerBase } from './Spinner.base';\nimport { getStyles } from './Spinner.styles';\nimport { ISpinnerProps, ISpinnerStyles, ISpinnerStyleProps } from './Spinner.types';\n\nexport const Spinner: React.FunctionComponent<ISpinnerProps> = styled<\n  ISpinnerProps,\n  ISpinnerStyleProps,\n  ISpinnerStyles\n>(SpinnerBase, getStyles, undefined, { scope: 'Spinner' });\n","import * as React from 'react';\nimport { IProcessedStyleSet, ITheme } from '../../Styling';\nimport { composeRenderFunction, classNamesFunction, getId, getRTL, getRTLSafeKeyCode, KeyCodes } from '../../Utilities';\nimport { SelectionMode } from '../../Selection';\nimport { Check } from '../../Check';\nimport { Icon } from '../../Icon';\nimport { GroupSpacer } from './GroupSpacer';\nimport { Spinner } from '../../Spinner';\nimport {\n  IGroupHeaderStyleProps,\n  IGroupHeaderStyles,\n  IGroupHeaderProps,\n  IGroupHeaderCheckboxProps,\n} from './GroupHeader.types';\nimport { CHECK_CELL_WIDTH } from '../DetailsList/DetailsRowCheck.styles';\n\nconst getClassNames = classNamesFunction<IGroupHeaderStyleProps, IGroupHeaderStyles>();\n\nexport interface IGroupHeaderState {\n  isCollapsed: boolean;\n  isLoadingVisible: boolean;\n}\n\nexport class GroupHeaderBase extends React.Component<IGroupHeaderProps, IGroupHeaderState> {\n  public static defaultProps: IGroupHeaderProps = {\n    expandButtonProps: { 'aria-label': 'expand collapse group' },\n  };\n\n  private _classNames: IProcessedStyleSet<IGroupHeaderStyles>;\n  private _id: string;\n\n  public static getDerivedStateFromProps(\n    nextProps: IGroupHeaderProps,\n    previousState: IGroupHeaderState,\n  ): IGroupHeaderState {\n    if (nextProps.group) {\n      const newCollapsed = nextProps.group.isCollapsed;\n      const isGroupLoading = nextProps.isGroupLoading;\n      const newLoadingVisible = !newCollapsed && isGroupLoading && isGroupLoading(nextProps.group);\n\n      return {\n        ...previousState,\n        isCollapsed: newCollapsed || false,\n        isLoadingVisible: newLoadingVisible || false,\n      };\n    }\n\n    return previousState;\n  }\n\n  constructor(props: IGroupHeaderProps) {\n    super(props);\n\n    this._id = getId('GroupHeader');\n\n    this.state = {\n      isCollapsed: (this.props.group && this.props.group.isCollapsed) as boolean,\n      isLoadingVisible: false,\n    };\n  }\n\n  public render(): JSX.Element | null {\n    const {\n      group,\n      groupLevel = 0,\n      viewport,\n      selectionMode,\n      loadingText,\n      // eslint-disable-next-line deprecation/deprecation\n      isSelected = false,\n      selected = false,\n      indentWidth,\n      onRenderTitle = this._onRenderTitle,\n      onRenderGroupHeaderCheckbox,\n      isCollapsedGroupSelectVisible = true,\n      expandButtonProps,\n      expandButtonIcon,\n      selectAllButtonProps,\n      theme,\n      styles,\n      className,\n      compact,\n      ariaPosInSet,\n      ariaSetSize,\n      ariaRowIndex,\n      useFastIcons,\n    } = this.props;\n\n    const defaultCheckboxRender = useFastIcons ? this._fastDefaultCheckboxRender : this._defaultCheckboxRender;\n\n    const onRenderCheckbox = onRenderGroupHeaderCheckbox\n      ? composeRenderFunction(onRenderGroupHeaderCheckbox, defaultCheckboxRender)\n      : defaultCheckboxRender;\n\n    const { isCollapsed, isLoadingVisible } = this.state;\n\n    const canSelectGroup = selectionMode === SelectionMode.multiple;\n    const isSelectionCheckVisible = canSelectGroup && (isCollapsedGroupSelectVisible || !(group && group.isCollapsed));\n    const currentlySelected = selected || isSelected;\n\n    const isRTL = getRTL(theme);\n\n    this._classNames = getClassNames(styles, {\n      theme: theme!,\n      className,\n      selected: currentlySelected,\n      isCollapsed,\n      compact,\n    });\n\n    if (!group) {\n      return null;\n    }\n\n    return (\n      <div\n        className={this._classNames.root}\n        style={viewport ? { minWidth: viewport.width } : {}}\n        onClick={this._onHeaderClick}\n        role=\"row\"\n        aria-setsize={ariaSetSize}\n        aria-posinset={ariaPosInSet}\n        aria-rowindex={ariaRowIndex}\n        data-is-focusable={true}\n        onKeyUp={this._onKeyUp}\n        aria-label={group.ariaLabel}\n        aria-labelledby={group.ariaLabel ? undefined : this._id}\n        aria-expanded={!this.state.isCollapsed}\n        aria-selected={canSelectGroup ? currentlySelected : undefined}\n        aria-level={groupLevel + 1}\n      >\n        <div className={this._classNames.groupHeaderContainer} role=\"presentation\">\n          {isSelectionCheckVisible ? (\n            <div role=\"gridcell\">\n              <button\n                data-is-focusable={false}\n                type=\"button\"\n                className={this._classNames.check}\n                role=\"checkbox\"\n                id={`${this._id}-check`}\n                aria-checked={currentlySelected}\n                aria-labelledby={`${this._id}-check ${this._id}`}\n                data-selection-toggle={true}\n                onClick={this._onToggleSelectGroupClick}\n                {...selectAllButtonProps}\n              >\n                {onRenderCheckbox({ checked: currentlySelected, theme }, onRenderCheckbox)}\n              </button>\n            </div>\n          ) : (\n            // To make the group header align properly with the column headers, this spacer\n            // needs to be the same width as the check cell in the column header.\n            selectionMode !== SelectionMode.none && <GroupSpacer indentWidth={CHECK_CELL_WIDTH} count={1} />\n          )}\n\n          <GroupSpacer indentWidth={indentWidth} count={groupLevel!} />\n\n          <div className={this._classNames.dropIcon} role=\"presentation\">\n            <Icon iconName=\"Tag\" />\n          </div>\n          <div role=\"gridcell\">\n            <button\n              data-is-focusable={false}\n              type=\"button\"\n              className={this._classNames.expand}\n              onClick={this._onToggleClick}\n              aria-expanded={!this.state.isCollapsed}\n              {...expandButtonProps}\n            >\n              <Icon\n                className={this._classNames.expandIsCollapsed}\n                iconName={expandButtonIcon || (isRTL ? 'ChevronLeftMed' : 'ChevronRightMed')}\n              />\n            </button>\n          </div>\n\n          {onRenderTitle(this.props, this._onRenderTitle)}\n          {isLoadingVisible && <Spinner label={loadingText} />}\n        </div>\n      </div>\n    );\n  }\n\n  private _toggleCollapse = () => {\n    const { group, onToggleCollapse, isGroupLoading } = this.props;\n    const { isCollapsed } = this.state;\n\n    const newCollapsed = !isCollapsed;\n    const newLoadingVisible = !newCollapsed && isGroupLoading && isGroupLoading(group!);\n\n    this.setState({\n      isCollapsed: newCollapsed,\n      isLoadingVisible: newLoadingVisible as boolean,\n    });\n    if (onToggleCollapse) {\n      onToggleCollapse(group!);\n    }\n  };\n\n  private _onKeyUp = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    const { group, onGroupHeaderKeyUp } = this.props;\n\n    if (onGroupHeaderKeyUp) {\n      onGroupHeaderKeyUp(ev, group);\n    }\n\n    if (!ev.defaultPrevented) {\n      // eslint-disable-next-line deprecation/deprecation\n      const shouldOpen = this.state.isCollapsed && ev.which === getRTLSafeKeyCode(KeyCodes.right, this.props.theme);\n      // eslint-disable-next-line deprecation/deprecation\n      const shouldClose = !this.state.isCollapsed && ev.which === getRTLSafeKeyCode(KeyCodes.left, this.props.theme);\n      if (shouldClose || shouldOpen) {\n        this._toggleCollapse();\n        ev.stopPropagation();\n        ev.preventDefault();\n      }\n    }\n  };\n\n  private _onToggleClick = (ev: React.MouseEvent<HTMLElement>): void => {\n    this._toggleCollapse();\n    ev.stopPropagation();\n    ev.preventDefault();\n  };\n\n  private _onToggleSelectGroupClick = (ev: React.MouseEvent<HTMLElement>): void => {\n    const { onToggleSelectGroup, group } = this.props;\n\n    if (onToggleSelectGroup) {\n      onToggleSelectGroup(group!);\n    }\n\n    ev.preventDefault();\n    ev.stopPropagation();\n  };\n\n  private _onHeaderClick = (): void => {\n    const { group, onGroupHeaderClick, onToggleSelectGroup } = this.props;\n\n    if (onGroupHeaderClick) {\n      onGroupHeaderClick(group!);\n    } else if (onToggleSelectGroup) {\n      onToggleSelectGroup(group!);\n    }\n  };\n\n  private _defaultCheckboxRender(checkboxProps: IGroupHeaderCheckboxProps) {\n    return <Check checked={checkboxProps.checked} />;\n  }\n\n  private _fastDefaultCheckboxRender(checkboxProps: IGroupHeaderCheckboxProps) {\n    return <FastCheck theme={checkboxProps.theme} checked={checkboxProps.checked} />;\n  }\n\n  private _onRenderTitle = (props: IGroupHeaderProps): JSX.Element | null => {\n    const { group, ariaColSpan } = props;\n\n    if (!group) {\n      return null;\n    }\n\n    return (\n      <div className={this._classNames.title} id={this._id} role=\"gridcell\" aria-colspan={ariaColSpan}>\n        <span>{group.name}</span>\n        {\n          // hasMoreData flag is set when grouping is throttled by SPO server which in turn resorts to regular\n          // sorting to simulate grouping behaviors, in which case group count is the number of items returned\n          // so far. That's the reason we need to use \"+\" to show we might have more items than count\n          // indicates.\n        }\n        <span className={this._classNames.headerCount}>\n          ({group.count}\n          {group.hasMoreData && '+'})\n        </span>\n      </div>\n    );\n  };\n}\n\nconst FastCheck = React.memo((props: { theme?: ITheme; checked?: boolean; className?: string }) => {\n  return <Check theme={props.theme} checked={props.checked} className={props.className} useFastIcons />;\n});\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { getStyles } from './GroupHeader.styles';\nimport { GroupHeaderBase } from './GroupHeader.base';\nimport { IGroupHeaderProps, IGroupHeaderStyles, IGroupHeaderStyleProps } from './GroupHeader.types';\nexport { IGroupHeaderProps };\n\nexport const GroupHeader: React.FunctionComponent<IGroupHeaderProps> = styled<\n  IGroupHeaderProps,\n  IGroupHeaderStyleProps,\n  IGroupHeaderStyles\n>(GroupHeaderBase, getStyles, undefined, {\n  scope: 'GroupHeader',\n});\n","import { IGroupShowAllProps, IGroupShowAllStyleProps, IGroupShowAllStyles } from './GroupShowAll.types';\nimport { getGlobalClassNames } from '../../Styling';\n\nexport { IGroupShowAllProps };\n\nconst GlobalClassNames = {\n  root: 'ms-GroupShowAll',\n  link: 'ms-Link',\n};\n\nexport const getStyles = (props: IGroupShowAllStyleProps): IGroupShowAllStyles => {\n  const { theme } = props;\n  const { fonts } = theme;\n\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  return {\n    root: [\n      classNames.root,\n      {\n        position: 'relative',\n        padding: '10px 84px',\n        cursor: 'pointer',\n        selectors: {\n          [`.${classNames.link}`]: {\n            fontSize: fonts.small.fontSize,\n          },\n        },\n      },\n    ],\n  };\n};\n","import * as React from 'react';\nimport { useCallback } from 'react';\nimport { classNamesFunction } from '../../Utilities';\nimport { Link } from '../../Link';\nimport { IGroupShowAllProps } from './GroupShowAll.types';\nimport { IGroupShowAllStyleProps, IGroupShowAllStyles } from './GroupShowAll.types';\nimport { GroupSpacer } from './GroupSpacer';\n\nconst getClassNames = classNamesFunction<IGroupShowAllStyleProps, IGroupShowAllStyles>();\n\nexport const GroupShowAllBase: React.FunctionComponent<IGroupShowAllProps> = props => {\n  const { group, groupLevel, showAllLinkText = 'Show All', styles, theme, onToggleSummarize } = props;\n  const classNames = getClassNames(styles, { theme: theme! });\n\n  const memoizedOnClick = useCallback(\n    (ev: React.MouseEvent<HTMLElement>) => {\n      onToggleSummarize!(group!);\n\n      ev.stopPropagation();\n      ev.preventDefault();\n    },\n    [onToggleSummarize, group],\n  );\n\n  if (group) {\n    return (\n      <div className={classNames.root}>\n        <GroupSpacer count={groupLevel!} />\n        <Link onClick={memoizedOnClick}>{showAllLinkText}</Link>\n      </div>\n    );\n  }\n\n  return null;\n};\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { getStyles } from './GroupShowAll.styles';\nimport { GroupShowAllBase } from './GroupShowAll.base';\nimport { IGroupShowAllProps, IGroupShowAllStyleProps, IGroupShowAllStyles } from './GroupShowAll.types';\nexport { IGroupShowAllProps };\n\nexport const GroupShowAll: React.FunctionComponent<IGroupShowAllProps> = styled<\n  IGroupShowAllProps,\n  IGroupShowAllStyleProps,\n  IGroupShowAllStyles\n>(GroupShowAllBase, getStyles, undefined, { scope: 'GroupShowAll' });\n","import { IGroupFooterStyleProps, IGroupFooterStyles } from './GroupFooter.types';\nimport { getGlobalClassNames } from '../../Styling';\n\nconst GlobalClassNames = {\n  root: 'ms-groupFooter',\n};\n\nexport const getStyles = (props: IGroupFooterStyleProps): IGroupFooterStyles => {\n  const { theme, className } = props;\n  const classNames = getGlobalClassNames(GlobalClassNames, theme!);\n\n  return {\n    root: [\n      theme.fonts.medium,\n      classNames.root,\n      {\n        position: 'relative',\n        padding: '5px 38px',\n      },\n      className,\n    ],\n  };\n};\n","import * as React from 'react';\nimport { classNamesFunction } from '../../Utilities';\nimport { GroupSpacer } from './GroupSpacer';\nimport { IGroupFooterStyleProps, IGroupFooterStyles, IGroupFooterProps } from './GroupFooter.types';\nconst getClassNames = classNamesFunction<IGroupFooterStyleProps, IGroupFooterStyles>();\n\nexport const GroupFooterBase: React.FunctionComponent<IGroupFooterProps> = props => {\n  const { group, groupLevel, footerText, indentWidth, styles, theme } = props;\n  const classNames = getClassNames(styles, { theme: theme! });\n\n  if (group && footerText) {\n    return (\n      <div className={classNames.root}>\n        <GroupSpacer indentWidth={indentWidth} count={groupLevel!} />\n        {footerText}\n      </div>\n    );\n  }\n\n  return null;\n};\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { getStyles } from './GroupFooter.styles';\nimport { GroupFooterBase } from './GroupFooter.base';\nimport { IGroupFooterProps, IGroupFooterStyles, IGroupFooterStyleProps } from './GroupFooter.types';\nexport { IGroupFooterProps };\n\nexport const GroupFooter: React.FunctionComponent<IGroupFooterProps> = styled<\n  IGroupFooterProps,\n  IGroupFooterStyleProps,\n  IGroupFooterStyles\n>(GroupFooterBase, getStyles, undefined, {\n  scope: 'GroupFooter',\n});\n","import * as React from 'react';\nimport { IRefObject, IRectangle, IRenderFunction } from '../../Utilities';\nimport { List } from './List';\n\n/**\n * {@docCategory List}\n */\nexport const ScrollToMode = {\n  /**\n   * Does not make any consideration to where in the viewport the item should align to.\n   */\n  auto: 0 as 0,\n  /**\n   * Attempts to scroll the list so the top of the desired item is aligned with the top of the viewport.\n   */\n  top: 1 as 1,\n  /**\n   * Attempts to scroll the list so the bottom of the desired item is aligned with the bottom of the viewport.\n   */\n  bottom: 2 as 2,\n  /**\n   * Attempts to scroll the list so the desired item is in the exact center of the viewport.\n   */\n  center: 3 as 3,\n};\n\n/**\n * {@docCategory List}\n */\nexport type ScrollToMode = typeof ScrollToMode[keyof typeof ScrollToMode];\n\n/**\n * Props passed to the render override for the list root.\n * {@docCategory List}\n */\nexport interface IListOnRenderRootProps<T> {\n  /**\n   * The ref to be applied to the list root.\n   * The `List` uses this element to track scroll position and sizing.\n   */\n  rootRef: React.Ref<HTMLDivElement>;\n  /**\n   * Props to apply to the list root element.\n   */\n  divProps: React.HTMLAttributes<HTMLDivElement>;\n  /**\n   * The active pages to be rendered into the list.\n   * These will have been rendered using `onRenderPage`.\n   */\n  pages: IPage<T>[];\n  /**\n   * The content to be rendered as the list surface element.\n   * This will have been rendered using `onRenderSurface`.\n   */\n  surfaceElement: JSX.Element | null;\n}\n\n/**\n * Props passed to the render override for the list surface.\n * {@docCategory List}\n */\nexport interface IListOnRenderSurfaceProps<T> {\n  /**\n   * A ref to be applied to the surface element.\n   * The `List` uses this element to track content size and focus.\n   */\n  surfaceRef: React.Ref<HTMLDivElement>;\n  /**\n   * Props to apply to the list surface element.\n   */\n  divProps: React.HTMLAttributes<HTMLDivElement>;\n  /**\n   * The active pages to be rendered into the list.\n   * These will have been rendered using `onRenderPage`.\n   */\n  pages: IPage<T>[];\n  /**\n   * The content to be rendered representing all active pages.\n   */\n  pageElements: JSX.Element[];\n}\n\n/**\n * {@docCategory List}\n */\nexport interface IList {\n  /**\n   * Force the component to update.\n   */\n  forceUpdate: () => void;\n\n  /**\n   * Get the current height the list and it's pages.\n   */\n  getTotalListHeight?: () => number;\n\n  /**\n   * Scroll to the given index. By default will bring the page the specified item is on into the view. If a callback\n   * to measure the height of an individual item is specified, will only scroll to bring the specific item into view.\n   *\n   * Note: with items of variable height and no passed in `getPageHeight` method, the list might jump after scrolling\n   * when windows before/ahead are being rendered, and the estimated height is replaced using actual elements.\n   *\n   * @param index - Index of item to scroll to\n   * @param measureItem - Optional callback to measure the height of an individual item\n   * @param scrollToMode - Optional defines the behavior of the scrolling alignment. Defaults to auto.\n   *  Note: The scrollToMode requires the measureItem callback is provided to function.\n   */\n  scrollToIndex: (index: number, measureItem?: (itemIndex: number) => number, scrollToMode?: ScrollToMode) => void;\n\n  /**\n   * Get the start index of the page that is currently in view\n   */\n  getStartItemIndexInView: () => number;\n}\n\n/**\n * {@docCategory List}\n */\nexport interface IListProps<T = any> extends React.HTMLAttributes<List<T> | HTMLDivElement> {\n  /**\n   * Optional callback to access the IList interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: IRefObject<IList>;\n\n  /** Optional classname to append to root list. */\n  className?: string;\n\n  /** Items to render. */\n  items?: T[];\n\n  /**\n   * Method to call when trying to render an item.\n   * @param item - The data associated with the cell that is being rendered.\n   * @param index - The index of the cell being rendered.\n   * @param isScrolling - True if the list is being scrolled. May be useful for rendering a placeholder if your cells\n   * are complex.\n   */\n  onRenderCell?: (item?: T, index?: number, isScrolling?: boolean) => React.ReactNode;\n\n  /**\n   * Optional callback invoked when List rendering completed.\n   * This can be on initial mount or on re-render due to scrolling.\n   * This method will be called as a result of changes in List pages (added or removed),\n   * and after ALL the changes complete.\n   * To track individual page Add / Remove use onPageAdded / onPageRemoved instead.\n   * @param pages - The current array of pages in the List.\n   */\n  onPagesUpdated?: (pages: IPage<T>[]) => void;\n\n  /** Optional callback for monitoring when a page is added. */\n  onPageAdded?: (page: IPage<T>) => void;\n\n  /** Optional callback for monitoring when a page is removed. */\n  onPageRemoved?: (page: IPage<T>) => void;\n\n  /** Optional callback to get the item key, to be used on render. */\n  getKey?: (item: T, index?: number) => string;\n\n  /**\n   * Called by the list to get the specification for a page.\n   * Use this method to provide an allocation of items per page,\n   * as well as an estimated rendered height for the page.\n   * The list will use this to optimize virtualization.\n   */\n  getPageSpecification?: (itemIndex?: number, visibleRect?: IRectangle) => IPageSpecification;\n\n  /**\n   * Method called by the list to get how many items to render per page from specified index.\n   * In general, use `getPageSpecification` instead.\n   */\n  getItemCountForPage?: (itemIndex?: number, visibleRect?: IRectangle) => number;\n\n  /**\n   * Method called by the list to get the pixel height for a given page. By default, we measure the first\n   * page's height and default all other pages to that height when calculating the surface space. It is\n   * ideal to be able to adequately predict page heights in order to keep the surface space from jumping\n   * in pixels, which has been seen to cause browser performance issues.\n   * In general, use `getPageSpecification` instead.\n   */\n  getPageHeight?: (itemIndex?: number, visibleRect?: IRectangle, itemCount?: number) => number;\n\n  /**\n   * Method called by the list to derive the page style object. For spacer pages, the list will derive\n   * the height and passed in heights will be ignored.\n   */\n  getPageStyle?: (page: IPage<T>) => any;\n\n  /**\n   * In addition to the visible window, how many windowHeights should we render ahead.\n   * @defaultvalue 2\n   */\n  renderedWindowsAhead?: number;\n\n  /**\n   * In addition to the visible window, how many windowHeights should we render behind.\n   * @defaultvalue 2\n   */\n  renderedWindowsBehind?: number;\n\n  /**\n   * Index in `items` array to start rendering from.\n   * @default 0\n   */\n  startIndex?: number;\n\n  /**\n   * Number of items to render.\n   * @default items.length\n   */\n  renderCount?: number;\n\n  /**\n   * Boolean value to enable render page caching. This is an experimental performance optimization\n   * that is off by default.\n   * @defaultvalue false\n   */\n  usePageCache?: boolean;\n\n  /**\n   * Optional callback to determine whether the list should be rendered in full, or virtualized.\n   * Virtualization will add and remove pages of items as the user scrolls them into the visible range.\n   * This benefits larger list scenarios by reducing the DOM on the screen, but can negatively affect performance for\n   * smaller lists.\n   * The default implementation will virtualize when this callback is not provided.\n   */\n  onShouldVirtualize?: (props: IListProps<T>) => boolean;\n\n  /**\n   * The role to assign to the list root element.\n   * Use this to override the default assignment of 'list' to the root and 'listitem' to the cells.\n   */\n  role?: string;\n\n  /**\n   * Called when the List will render a page.\n   * Override this to control how cells are rendered within a page.\n   */\n  onRenderPage?: IRenderFunction<IPageProps<T>>;\n\n  /**\n   * Render override for the element at the root of the `List`.\n   * Use this to apply some final attributes or structure to the content\n   * each time the list is updated with new active pages or items.\n   */\n  onRenderRoot?: IRenderFunction<IListOnRenderRootProps<T>>;\n\n  /**\n   * Render override for the element representing the surface of the `List`.\n   * Use this to alter the structure of the rendered content if necessary on each update.\n   */\n  onRenderSurface?: IRenderFunction<IListOnRenderSurfaceProps<T>>;\n\n  /**\n   * For perf reasons, List avoids re-rendering unless certain props have changed.\n   * Use this prop if you need to force it to re-render in other cases. You can pass any type of\n   * value as long as it only changes (`===` comparison) when a re-render should happen.\n   */\n  version?: any;\n\n  /**\n   * Whether to disable scroll state updates. This causes the isScrolling arg in onRenderCell to always be undefined.\n   * This is a performance optimization to let List skip a render cycle by not updating its scrolling state.\n   */\n  ignoreScrollingState?: boolean;\n}\n\n/**\n * {@docCategory List}\n */\nexport interface IPage<T = any> {\n  key: string;\n  items: T[] | undefined;\n  startIndex: number;\n  itemCount: number;\n  style: React.CSSProperties;\n  top: number;\n  height: number;\n  data?: any;\n  isSpacer?: boolean;\n  isVisible?: boolean;\n}\n\n/**\n * {@docCategory List}\n */\nexport interface IPageProps<T = any>\n  extends React.HTMLAttributes<HTMLDivElement>,\n    React.ClassAttributes<HTMLDivElement> {\n  /**\n   * The role being assigned to the rendered page element by the list.\n   */\n  role?: string;\n  /**\n   * The allocation data for the page.\n   */\n  page: IPage<T>;\n}\n\n/**\n * {@docCategory List}\n */\nexport interface IPageSpecification {\n  /**\n   * The number of items to allocate to the page.\n   */\n  itemCount?: number;\n  /**\n   * The estimated pixel height of the page.\n   */\n  height?: number;\n  /**\n   * Data to pass through to the page when rendering.\n   */\n  data?: any;\n  /**\n   * The key to use when creating the page.\n   */\n  key?: string;\n}\n","import * as React from 'react';\nimport {\n  Async,\n  EventGroup,\n  IRectangle,\n  IRenderFunction,\n  css,\n  divProperties,\n  findIndex,\n  findScrollableParent,\n  getNativeProps,\n  getParent,\n  getWindow,\n  initializeComponentRef,\n} from '../../Utilities';\nimport {\n  IList,\n  IListProps,\n  IPage,\n  IPageProps,\n  ScrollToMode,\n  IListOnRenderSurfaceProps,\n  IListOnRenderRootProps,\n} from './List.types';\nimport { composeRenderFunction } from '../../Utilities';\n\nconst RESIZE_DELAY = 16;\nconst MIN_SCROLL_UPDATE_DELAY = 100;\nconst MAX_SCROLL_UPDATE_DELAY = 500;\nconst IDLE_DEBOUNCE_DELAY = 200;\n// The amount of time to wait before declaring that the list isn't scrolling\nconst DONE_SCROLLING_WAIT = 500;\nconst DEFAULT_ITEMS_PER_PAGE = 10;\nconst DEFAULT_PAGE_HEIGHT = 30;\nconst DEFAULT_RENDERED_WINDOWS_BEHIND = 2;\nconst DEFAULT_RENDERED_WINDOWS_AHEAD = 2;\nconst PAGE_KEY_PREFIX = 'page-';\nconst SPACER_KEY_PREFIX = 'spacer-';\n\nexport interface IListState<T = any> {\n  pages?: IPage<T>[];\n\n  /** The last versionstamp for  */\n  measureVersion?: number;\n  isScrolling?: boolean;\n  getDerivedStateFromProps(nextProps: IListProps<T>, previousState: IListState<T>): IListState<T>;\n}\n\ninterface IPageCacheItem<T> {\n  page: IPage<T>;\n  pageElement?: JSX.Element;\n}\n\ninterface IPageCache<T> {\n  [key: string]: IPageCacheItem<T>;\n}\n\nconst EMPTY_RECT = {\n  top: -1,\n  bottom: -1,\n  left: -1,\n  right: -1,\n  width: 0,\n  height: 0,\n};\n\n// Naming expensive measures so that they're named in profiles.\nconst _measurePageRect = (element: HTMLElement) => element.getBoundingClientRect();\nconst _measureSurfaceRect = _measurePageRect;\nconst _measureScrollRect = _measurePageRect;\n\n/**\n * The List renders virtualized pages of items. Each page's item count is determined by the getItemCountForPage callback\n * if provided by the caller, or 10 as default. Each page's height is determined by the getPageHeight callback if\n * provided by the caller, or by cached measurements if available, or by a running average, or a default fallback.\n *\n * The algorithm for rendering pages works like this:\n *\n * 1. Predict visible pages based on \"current measure data\" (page heights, surface position, visible window)\n * 2. If changes are necessary, apply changes (add/remove pages)\n * 3. For pages that are added, measure the page heights if we need to using getBoundingClientRect\n * 4. If measurements don't match predictions, update measure data and goto step 1 asynchronously\n *\n * Measuring too frequently can pull performance down significantly. To compensate, we cache measured values so that\n * we can avoid re-measuring during operations that should not alter heights, like scrolling.\n *\n * To optimize glass rendering performance, onShouldVirtualize can be set. When onShouldVirtualize return false,\n * List will run in fast mode (not virtualized) to render all items without any measurements to improve page load time.\n * And we start doing measurements and rendering in virtualized mode when items grows larger than this threshold.\n *\n * However, certain operations can make measure data stale. For example, resizing the list, or passing in new props,\n * or forcing an update change cause pages to shrink/grow. When these operations occur, we increment a measureVersion\n * number, which we associate with cached measurements and use to determine if a remeasure should occur.\n */\nexport class List<T = any> extends React.Component<IListProps<T>, IListState<T>> implements IList {\n  public static defaultProps = {\n    startIndex: 0,\n    onRenderCell: (item: any, index: number, containsFocus: boolean) => <>{(item && item.name) || ''}</>,\n    renderedWindowsAhead: DEFAULT_RENDERED_WINDOWS_AHEAD,\n    renderedWindowsBehind: DEFAULT_RENDERED_WINDOWS_BEHIND,\n  };\n\n  private _root = React.createRef<HTMLDivElement>();\n  private _surface = React.createRef<HTMLDivElement>();\n  private _pageRefs: Record<string, unknown> = {};\n  private _async: Async;\n  private _events: EventGroup;\n  private _estimatedPageHeight: number;\n  private _totalEstimates: number;\n  private _cachedPageHeights: {\n    [key: string]: {\n      height: number;\n      measureVersion: number;\n    };\n  };\n  private _focusedIndex: number;\n  private _scrollElement?: HTMLElement;\n  private _hasCompletedFirstRender: boolean;\n\n  // surface rect relative to window\n  private _surfaceRect: IRectangle | undefined;\n\n  // The visible rect that we're required to render given the current list state.\n  private _requiredRect: IRectangle | null;\n\n  // The visible rect that we're allowed to keep rendered. Pages outside of this rect will be removed.\n  private _allowedRect: IRectangle;\n\n  // The rect that is visible to the user\n  private _visibleRect: IRectangle | undefined;\n\n  // materialized rect around visible items, relative to surface\n  private _materializedRect: IRectangle | null;\n\n  private _requiredWindowsAhead: number;\n  private _requiredWindowsBehind: number;\n\n  private _measureVersion: number;\n  private _scrollHeight?: number;\n  private _scrollTop: number;\n  private _pageCache: IPageCache<T>;\n\n  public static getDerivedStateFromProps<U = any>(\n    nextProps: IListProps<U>,\n    previousState: IListState<U>,\n  ): IListState<U> {\n    return previousState.getDerivedStateFromProps(nextProps, previousState);\n  }\n\n  constructor(props: IListProps<T>) {\n    super(props);\n\n    initializeComponentRef(this);\n\n    this.state = {\n      pages: [],\n      isScrolling: false,\n      getDerivedStateFromProps: this._getDerivedStateFromProps,\n    };\n\n    this._async = new Async(this);\n    this._events = new EventGroup(this);\n    this._estimatedPageHeight = 0;\n    this._totalEstimates = 0;\n    this._requiredWindowsAhead = 0;\n    this._requiredWindowsBehind = 0;\n\n    // Track the measure version for everything.\n    this._measureVersion = 0;\n\n    // Ensure that scrolls are lazy updated.\n    this._onAsyncScroll = this._async.debounce(this._onAsyncScroll, MIN_SCROLL_UPDATE_DELAY, {\n      leading: false,\n      maxWait: MAX_SCROLL_UPDATE_DELAY,\n    });\n\n    this._onAsyncIdle = this._async.debounce(this._onAsyncIdle, IDLE_DEBOUNCE_DELAY, {\n      leading: false,\n    });\n\n    this._onAsyncResize = this._async.debounce(this._onAsyncResize, RESIZE_DELAY, {\n      leading: false,\n    });\n\n    this._onScrollingDone = this._async.debounce(this._onScrollingDone, DONE_SCROLLING_WAIT, {\n      leading: false,\n    });\n\n    this._cachedPageHeights = {};\n    this._estimatedPageHeight = 0;\n    this._focusedIndex = -1;\n    this._pageCache = {};\n  }\n\n  public get pageRefs(): Readonly<Record<string, unknown>> {\n    return this._pageRefs;\n  }\n\n  /**\n   * Scroll to the given index. By default will bring the page the specified item is on into the view. If a callback\n   * to measure the height of an individual item is specified, will only scroll to bring the specific item into view.\n   *\n   * Note: with items of variable height and no passed in `getPageHeight` method, the list might jump after scrolling\n   * when windows before/ahead are being rendered, and the estimated height is replaced using actual elements.\n   *\n   * @param index - Index of item to scroll to\n   * @param measureItem - Optional callback to measure the height of an individual item\n   * @param scrollToMode - Optional defines where in the window the item should be positioned to when scrolling\n   */\n  public scrollToIndex(\n    index: number,\n    measureItem?: (itemIndex: number) => number,\n    scrollToMode: ScrollToMode = ScrollToMode.auto,\n  ): void {\n    const startIndex = this.props.startIndex as number;\n    const renderCount = this._getRenderCount();\n    const endIndex = startIndex + renderCount;\n\n    const allowedRect = this._allowedRect;\n\n    let scrollTop = 0;\n\n    let itemsPerPage = 1;\n    for (let itemIndex = startIndex; itemIndex < endIndex; itemIndex += itemsPerPage) {\n      const pageSpecification = this._getPageSpecification(itemIndex, allowedRect);\n\n      const pageHeight = pageSpecification.height;\n      itemsPerPage = pageSpecification.itemCount;\n\n      const requestedIndexIsInPage = itemIndex <= index && itemIndex + itemsPerPage > index;\n      if (requestedIndexIsInPage) {\n        // We have found the page. If the user provided a way to measure an individual item, we will try to scroll in\n        // just the given item, otherwise we'll only bring the page into view\n        if (measureItem && this._scrollElement) {\n          const scrollRect = _measureScrollRect(this._scrollElement);\n          const scrollWindow = {\n            top: this._scrollElement.scrollTop,\n            bottom: this._scrollElement.scrollTop + scrollRect.height,\n          };\n\n          // Adjust for actual item position within page\n          const itemPositionWithinPage = index - itemIndex;\n          for (let itemIndexInPage = 0; itemIndexInPage < itemPositionWithinPage; ++itemIndexInPage) {\n            scrollTop += measureItem(itemIndex + itemIndexInPage);\n          }\n          const scrollBottom = scrollTop + measureItem(index);\n\n          // If scrollToMode is set to something other than auto, we always want to\n          // scroll the item into a specific position on the page.\n          switch (scrollToMode) {\n            case ScrollToMode.top:\n              this._scrollElement.scrollTop = scrollTop;\n              return;\n            case ScrollToMode.bottom:\n              this._scrollElement.scrollTop = scrollBottom - scrollRect.height;\n              return;\n            case ScrollToMode.center:\n              this._scrollElement.scrollTop = (scrollTop + scrollBottom - scrollRect.height) / 2;\n              return;\n            case ScrollToMode.auto:\n            default:\n              break;\n          }\n\n          const itemIsFullyVisible = scrollTop >= scrollWindow.top && scrollBottom <= scrollWindow.bottom;\n          if (itemIsFullyVisible) {\n            // Item is already visible, do nothing.\n            return;\n          }\n\n          const itemIsPartiallyAbove = scrollTop < scrollWindow.top;\n          const itemIsPartiallyBelow = scrollBottom > scrollWindow.bottom;\n\n          if (itemIsPartiallyAbove) {\n            //  We will just scroll to 'scrollTop'\n            //  .------.   - scrollTop\n            //  |Item  |\n            //  | .----|-. - scrollWindow.top\n            //  '------' |\n            //    |      |\n            //    '------'\n          } else if (itemIsPartiallyBelow) {\n            //  Adjust scrollTop position to just bring in the element\n            // .------.  - scrollTop\n            // |      |\n            // | .------.\n            // '-|----' | - scrollWindow.bottom\n            //   | Item |\n            //   '------' - scrollBottom\n            scrollTop = scrollBottom - scrollRect.height;\n          }\n        }\n\n        if (this._scrollElement) {\n          this._scrollElement.scrollTop = scrollTop;\n        }\n        return;\n      }\n\n      scrollTop += pageHeight;\n    }\n  }\n\n  public getStartItemIndexInView(measureItem?: (itemIndex: number) => number): number {\n    const pages = this.state.pages || [];\n    for (const page of pages) {\n      const isPageVisible =\n        !page.isSpacer && (this._scrollTop || 0) >= page.top && (this._scrollTop || 0) <= page.top + page.height;\n      if (isPageVisible) {\n        if (!measureItem) {\n          const rowHeight = Math.floor(page.height / page.itemCount);\n          return page.startIndex + Math.floor((this._scrollTop - page.top) / rowHeight);\n        } else {\n          let totalRowHeight = 0;\n          for (let itemIndex = page.startIndex; itemIndex < page.startIndex + page.itemCount; itemIndex++) {\n            const rowHeight = measureItem(itemIndex);\n            if (\n              page.top + totalRowHeight <= this._scrollTop &&\n              this._scrollTop < page.top + totalRowHeight + rowHeight\n            ) {\n              return itemIndex;\n            } else {\n              totalRowHeight += rowHeight;\n            }\n          }\n        }\n      }\n    }\n    return 0;\n  }\n\n  public componentDidMount(): void {\n    this.setState(this._updatePages(this.props, this.state));\n    this._measureVersion++;\n    this._scrollElement = findScrollableParent(this._root.current) as HTMLElement;\n\n    this._events.on(window, 'resize', this._onAsyncResize);\n    if (this._root.current) {\n      this._events.on(this._root.current, 'focus', this._onFocus, true);\n    }\n    if (this._scrollElement) {\n      this._events.on(this._scrollElement, 'scroll', this._onScroll);\n      this._events.on(this._scrollElement, 'scroll', this._onAsyncScroll);\n    }\n  }\n\n  public componentDidUpdate(): void {\n    // Multiple updates may have been queued, so the callback will reflect all of them.\n    // Re-fetch the current props and states to avoid using a stale props or state captured in the closure.\n    const finalProps = this.props;\n    const finalState = this.state;\n\n    // If we weren't provided with the page height, measure the pages\n    if (!finalProps.getPageHeight) {\n      // If measured version is invalid since we've updated the DOM\n      const heightsChanged = this._updatePageMeasurements(finalState.pages!);\n\n      // On first render, we should re-measure so that we don't get a visual glitch.\n      if (heightsChanged) {\n        this._materializedRect = null;\n        if (!this._hasCompletedFirstRender) {\n          this._hasCompletedFirstRender = true;\n          this.setState(this._updatePages(finalProps, finalState));\n        } else {\n          this._onAsyncScroll();\n        }\n      } else {\n        // Enqueue an idle bump.\n        this._onAsyncIdle();\n      }\n    } else {\n      // Enqueue an idle bump\n      this._onAsyncIdle();\n    }\n\n    // Notify the caller that rendering the new pages has completed\n    if (finalProps.onPagesUpdated) {\n      finalProps.onPagesUpdated(finalState.pages as IPage<T>[]);\n    }\n  }\n\n  public componentWillUnmount(): void {\n    this._async.dispose();\n    this._events.dispose();\n\n    delete this._scrollElement;\n  }\n\n  public shouldComponentUpdate(newProps: IListProps<T>, newState: IListState<T>): boolean {\n    const { pages: oldPages } = this.state;\n    const { pages: newPages } = newState;\n    let shouldComponentUpdate = false;\n\n    // Update if the page stops scrolling\n    if (!newState.isScrolling && this.state.isScrolling) {\n      return true;\n    }\n\n    if (newProps.version !== this.props.version) {\n      return true;\n    }\n\n    if (newProps.items === this.props.items && oldPages!.length === newPages!.length) {\n      for (let i = 0; i < oldPages!.length; i++) {\n        const oldPage = oldPages![i];\n        const newPage = newPages![i];\n\n        if (oldPage.key !== newPage.key || oldPage.itemCount !== newPage.itemCount) {\n          shouldComponentUpdate = true;\n          break;\n        }\n      }\n    } else {\n      shouldComponentUpdate = true;\n    }\n\n    return shouldComponentUpdate;\n  }\n\n  public forceUpdate(): void {\n    this._invalidatePageCache();\n    // Ensure that when the list is force updated we update the pages first before render.\n    this._updateRenderRects(this.props, this.state, true);\n    this.setState(this._updatePages(this.props, this.state));\n    this._measureVersion++;\n\n    super.forceUpdate();\n  }\n\n  /**\n   * Get the current height the list and it's pages.\n   */\n  public getTotalListHeight(): number {\n    return this._surfaceRect!.height;\n  }\n\n  public render(): JSX.Element | null {\n    const { className, role = 'list', onRenderSurface, onRenderRoot } = this.props;\n    const { pages = [] } = this.state;\n    const pageElements: JSX.Element[] = [];\n    const divProps = getNativeProps<React.HTMLAttributes<HTMLDivElement>>(this.props, divProperties);\n\n    for (const page of pages) {\n      pageElements.push(this._renderPage(page));\n    }\n\n    const finalOnRenderSurface = onRenderSurface\n      ? composeRenderFunction(onRenderSurface, this._onRenderSurface)\n      : this._onRenderSurface;\n\n    const finalOnRenderRoot = onRenderRoot\n      ? composeRenderFunction(onRenderRoot, this._onRenderRoot)\n      : this._onRenderRoot;\n\n    return finalOnRenderRoot({\n      rootRef: this._root,\n      pages,\n      surfaceElement: finalOnRenderSurface({\n        surfaceRef: this._surface,\n        pages,\n        pageElements,\n        divProps: {\n          role: 'presentation',\n          className: 'ms-List-surface',\n        },\n      }),\n      divProps: {\n        ...divProps,\n        className: css('ms-List', className),\n        role: pageElements.length > 0 ? role : undefined,\n      },\n    });\n  }\n\n  private _getDerivedStateFromProps = (nextProps: IListProps<T>, previousState: IListState<T>): IListState<T> => {\n    if (\n      nextProps.items !== this.props.items ||\n      nextProps.renderCount !== this.props.renderCount ||\n      nextProps.startIndex !== this.props.startIndex ||\n      nextProps.version !== this.props.version\n    ) {\n      // We have received new items so we want to make sure that initially we only render a single window to\n      // fill the currently visible rect, and then later render additional windows.\n      this._resetRequiredWindows();\n      this._requiredRect = null;\n\n      this._measureVersion++;\n      this._invalidatePageCache();\n\n      return this._updatePages(nextProps, previousState);\n    }\n\n    return previousState;\n  };\n\n  private _shouldVirtualize(props: IListProps<T> = this.props): boolean {\n    const { onShouldVirtualize } = props;\n    return !onShouldVirtualize || onShouldVirtualize(props);\n  }\n\n  /**\n   * when props.items change or forceUpdate called, throw away cached pages\n   */\n  private _invalidatePageCache(): void {\n    this._pageCache = {};\n  }\n\n  private _renderPage(page: IPage<T>): JSX.Element {\n    const { usePageCache } = this.props;\n    let cachedPage;\n    // if usePageCache is set and cached page element can be found, just return cached page\n    if (usePageCache) {\n      cachedPage = this._pageCache[page.key];\n      if (cachedPage && cachedPage.pageElement) {\n        return cachedPage.pageElement;\n      }\n    }\n\n    const pageStyle = this._getPageStyle(page);\n\n    const { onRenderPage = this._onRenderPage } = this.props;\n\n    const pageElement = onRenderPage(\n      {\n        page: page,\n        className: 'ms-List-page',\n        key: page.key,\n        ref: (newRef: unknown) => {\n          this._pageRefs[page.key] = newRef;\n        },\n        style: pageStyle,\n        role: 'presentation',\n      },\n      this._onRenderPage,\n    );\n\n    // cache the first page for now since it is re-rendered a lot times unnecessarily.\n    // todo: a more aggresive caching mechanism is to cache pages constaining the items not changed.\n    // now we re-render pages too frequently, for example, props.items increased from 30 to 60, although the\n    // first 30 items did not change, we still re-rendered all of them in this props.items change.\n    if (usePageCache && page.startIndex === 0) {\n      this._pageCache[page.key] = {\n        page: page,\n        pageElement: pageElement,\n      };\n    }\n    return pageElement;\n  }\n\n  private _onRenderRoot = (props: IListOnRenderRootProps<T>): JSX.Element => {\n    const { rootRef, surfaceElement, divProps } = props;\n\n    return (\n      <div ref={rootRef} {...divProps}>\n        {surfaceElement}\n      </div>\n    );\n  };\n\n  private _onRenderSurface = (props: IListOnRenderSurfaceProps<T>): JSX.Element => {\n    const { surfaceRef, pageElements, divProps } = props;\n\n    return (\n      <div ref={surfaceRef} {...divProps}>\n        {pageElements}\n      </div>\n    );\n  };\n\n  /** Generate the style object for the page. */\n  private _getPageStyle(page: IPage<T>): React.StyleHTMLAttributes<HTMLDivElement> {\n    const { getPageStyle } = this.props;\n\n    return {\n      ...(getPageStyle ? getPageStyle(page) : {}),\n      ...(!page.items\n        ? {\n            height: page.height,\n          }\n        : {}),\n    };\n  }\n\n  private _onRenderPage = (pageProps: IPageProps<T>, defaultRender?: IRenderFunction<IPageProps<T>>): any => {\n    const { onRenderCell, role } = this.props;\n\n    const {\n      page: { items = [], startIndex },\n      ...divProps\n    } = pageProps;\n\n    // only assign list item role if no role is assigned\n    const cellRole = role === undefined ? 'listitem' : 'presentation';\n    const cells: React.ReactNode[] = [];\n\n    for (let i = 0; i < items.length; i++) {\n      const index = startIndex + i;\n      const item = items[i];\n\n      let itemKey = this.props.getKey ? this.props.getKey(item, index) : item && (item as any).key;\n\n      if (itemKey === null || itemKey === undefined) {\n        itemKey = index;\n      }\n\n      cells.push(\n        <div\n          role={cellRole}\n          className={'ms-List-cell'}\n          key={itemKey}\n          data-list-index={index}\n          data-automationid=\"ListCell\"\n        >\n          {onRenderCell &&\n            onRenderCell(item, index, !this.props.ignoreScrollingState ? this.state.isScrolling : undefined)}\n        </div>,\n      );\n    }\n\n    return <div {...divProps}>{cells}</div>;\n  };\n\n  /** Track the last item index focused so that we ensure we keep it rendered. */\n  private _onFocus(ev: any): void {\n    let target = ev.target as HTMLElement;\n\n    while (target !== this._surface.current) {\n      const indexString = target.getAttribute('data-list-index');\n\n      if (indexString) {\n        this._focusedIndex = Number(indexString);\n        break;\n      }\n\n      target = getParent(target) as HTMLElement;\n    }\n  }\n\n  /**\n   * Called synchronously to reset the required render range to 0 on scrolling. After async scroll has executed,\n   * we will call onAsyncIdle which will reset it back to it's correct value.\n   */\n  private _onScroll(): void {\n    if (!this.state.isScrolling && !this.props.ignoreScrollingState) {\n      this.setState({ isScrolling: true });\n    }\n    this._resetRequiredWindows();\n    this._onScrollingDone();\n  }\n\n  private _resetRequiredWindows(): void {\n    this._requiredWindowsAhead = 0;\n    this._requiredWindowsBehind = 0;\n  }\n\n  /**\n   * Debounced method to asynchronously update the visible region on a scroll event.\n   */\n  private _onAsyncScroll(): void {\n    this._updateRenderRects(this.props, this.state);\n\n    // Only update pages when the visible rect falls outside of the materialized rect.\n    if (!this._materializedRect || !_isContainedWithin(this._requiredRect as IRectangle, this._materializedRect)) {\n      this.setState(this._updatePages(this.props, this.state));\n    } else {\n      // console.log('requiredRect contained in materialized', this._requiredRect, this._materializedRect);\n    }\n  }\n\n  /**\n   * This is an async debounced method that will try and increment the windows we render. If we can increment\n   * either, we increase the amount we render and re-evaluate.\n   */\n  private _onAsyncIdle(): void {\n    const { renderedWindowsAhead, renderedWindowsBehind } = this.props;\n    const { _requiredWindowsAhead: requiredWindowsAhead, _requiredWindowsBehind: requiredWindowsBehind } = this;\n    const windowsAhead = Math.min(renderedWindowsAhead as number, requiredWindowsAhead + 1);\n    const windowsBehind = Math.min(renderedWindowsBehind as number, requiredWindowsBehind + 1);\n\n    if (windowsAhead !== requiredWindowsAhead || windowsBehind !== requiredWindowsBehind) {\n      // console.log('idling', windowsBehind, windowsAhead);\n\n      this._requiredWindowsAhead = windowsAhead;\n      this._requiredWindowsBehind = windowsBehind;\n      this._updateRenderRects(this.props, this.state);\n      this.setState(this._updatePages(this.props, this.state));\n    }\n\n    if (renderedWindowsAhead! > windowsAhead || renderedWindowsBehind! > windowsBehind) {\n      // Async increment on next tick.\n      this._onAsyncIdle();\n    }\n  }\n\n  /**\n   * Function to call when the list is done scrolling.\n   * This function is debounced.\n   */\n  private _onScrollingDone(): void {\n    if (!this.props.ignoreScrollingState) {\n      this.setState({ isScrolling: false });\n    }\n  }\n\n  private _onAsyncResize(): void {\n    this.forceUpdate();\n  }\n\n  private _updatePages(nextProps: IListProps<T>, previousState: IListState<T>): IListState<T> {\n    // console.log('updating pages');\n\n    if (!this._requiredRect) {\n      this._updateRenderRects(nextProps, previousState);\n    }\n\n    const newListState = this._buildPages(nextProps, previousState);\n    const oldListPages = previousState.pages!;\n\n    this._notifyPageChanges(oldListPages, newListState.pages!, this.props);\n\n    return {\n      ...previousState,\n      ...newListState,\n    };\n  }\n\n  /**\n   * Notify consumers that the rendered pages have changed\n   * @param oldPages - The old pages\n   * @param newPages - The new pages\n   * @param props - The props to use\n   */\n  private _notifyPageChanges(oldPages: IPage<T>[], newPages: IPage<T>[], props: IListProps<T>): void {\n    const { onPageAdded, onPageRemoved } = props;\n\n    if (onPageAdded || onPageRemoved) {\n      const renderedIndexes: {\n        [index: number]: IPage<T>;\n      } = {};\n\n      for (const page of oldPages) {\n        if (page.items) {\n          renderedIndexes[page.startIndex] = page;\n        }\n      }\n\n      for (const page of newPages) {\n        if (page.items) {\n          if (!renderedIndexes[page.startIndex]) {\n            this._onPageAdded(page);\n          } else {\n            delete renderedIndexes[page.startIndex];\n          }\n        }\n      }\n\n      for (const index in renderedIndexes) {\n        if (renderedIndexes.hasOwnProperty(index)) {\n          this._onPageRemoved(renderedIndexes[index]);\n        }\n      }\n    }\n  }\n\n  private _updatePageMeasurements(pages: IPage<T>[]): boolean {\n    let heightChanged = false;\n\n    // when not in virtualize mode, we render all the items without page measurement\n    if (!this._shouldVirtualize()) {\n      return heightChanged;\n    }\n\n    for (let i = 0; i < pages.length; i++) {\n      const page = pages[i];\n\n      if (page.items) {\n        heightChanged = this._measurePage(page) || heightChanged;\n      }\n    }\n\n    return heightChanged;\n  }\n\n  /**\n   * Given a page, measure its dimensions, update cache.\n   * @returns True if the height has changed.\n   */\n  private _measurePage(page: IPage<T>): boolean {\n    let hasChangedHeight = false;\n    const pageElement = this._pageRefs[page.key] as HTMLElement;\n    const cachedHeight = this._cachedPageHeights[page.startIndex];\n\n    // console.log('   * measure attempt', page.startIndex, cachedHeight);\n\n    if (\n      pageElement &&\n      this._shouldVirtualize() &&\n      (!cachedHeight || cachedHeight.measureVersion !== this._measureVersion)\n    ) {\n      const newClientRect = {\n        width: pageElement.clientWidth,\n        height: pageElement.clientHeight,\n      };\n\n      if (newClientRect.height || newClientRect.width) {\n        hasChangedHeight = page.height !== newClientRect.height;\n\n        // console.warn(' *** expensive page measure', page.startIndex, page.height, newClientRect.height);\n\n        page.height = newClientRect.height;\n\n        this._cachedPageHeights[page.startIndex] = {\n          height: newClientRect.height,\n          measureVersion: this._measureVersion,\n        };\n\n        this._estimatedPageHeight = Math.round(\n          (this._estimatedPageHeight * this._totalEstimates + newClientRect.height) / (this._totalEstimates + 1),\n        );\n\n        this._totalEstimates++;\n      }\n    }\n\n    return hasChangedHeight;\n  }\n\n  /** Called when a page has been added to the DOM. */\n  private _onPageAdded(page: IPage<T>): void {\n    const { onPageAdded } = this.props;\n\n    // console.log('page added', page.startIndex, this.state.pages.map(page => page.key).join(', '));\n\n    if (onPageAdded) {\n      onPageAdded(page);\n    }\n  }\n\n  /** Called when a page has been removed from the DOM. */\n  private _onPageRemoved(page: IPage<T>): void {\n    const { onPageRemoved } = this.props;\n\n    // console.log('  --- page removed', page.startIndex, this.state.pages.map(page => page.key).join(', '));\n\n    if (onPageRemoved) {\n      onPageRemoved(page);\n    }\n  }\n\n  /** Build up the pages that should be rendered. */\n  private _buildPages(props: IListProps<T>, state: IListState<T>): IListState<T> {\n    let { renderCount } = props;\n    const { items, startIndex, getPageHeight } = props;\n\n    renderCount = this._getRenderCount(props);\n\n    const materializedRect = { ...EMPTY_RECT };\n    const pages: IPage<T>[] = [];\n\n    let itemsPerPage = 1;\n    let pageTop = 0;\n    let currentSpacer = null;\n    const focusedIndex = this._focusedIndex;\n    const endIndex = startIndex! + renderCount;\n    const shouldVirtualize = this._shouldVirtualize(props);\n\n    // First render is very important to track; when we render cells, we have no idea of estimated page height.\n    // So we should default to rendering only the first page so that we can get information.\n    // However if the user provides a measure function, let's just assume they know the right heights.\n    const isFirstRender = this._estimatedPageHeight === 0 && !getPageHeight;\n\n    const allowedRect = this._allowedRect;\n\n    for (let itemIndex = startIndex!; itemIndex < endIndex; itemIndex += itemsPerPage) {\n      const pageSpecification = this._getPageSpecification(itemIndex, allowedRect);\n      const pageHeight = pageSpecification.height;\n      const pageData = pageSpecification.data;\n      const key = pageSpecification.key;\n\n      itemsPerPage = pageSpecification.itemCount;\n\n      const pageBottom = pageTop + pageHeight - 1;\n\n      const isPageRendered =\n        findIndex(state.pages as IPage<T>[], (page: IPage<T>) => !!page.items && page.startIndex === itemIndex) > -1;\n      const isPageInAllowedRange = !allowedRect || (pageBottom >= allowedRect.top && pageTop <= allowedRect.bottom!);\n      const isPageInRequiredRange =\n        !this._requiredRect || (pageBottom >= this._requiredRect.top && pageTop <= this._requiredRect.bottom!);\n      const isPageVisible =\n        (!isFirstRender && (isPageInRequiredRange || (isPageInAllowedRange && isPageRendered))) || !shouldVirtualize;\n      const isPageFocused = focusedIndex >= itemIndex && focusedIndex < itemIndex + itemsPerPage;\n      const isFirstPage = itemIndex === startIndex;\n\n      // console.log('building page', itemIndex, 'pageTop: ' + pageTop, 'inAllowed: ' +\n      // isPageInAllowedRange, 'inRequired: ' + isPageInRequiredRange);\n\n      // Only render whats visible, focused, or first page,\n      // or when running in fast rendering mode (not in virtualized mode), we render all current items in pages\n      if (isPageVisible || isPageFocused || isFirstPage) {\n        if (currentSpacer) {\n          pages.push(currentSpacer);\n          currentSpacer = null;\n        }\n\n        const itemsInPage = Math.min(itemsPerPage, endIndex - itemIndex);\n        const newPage = this._createPage(\n          key,\n          items!.slice(itemIndex, itemIndex + itemsInPage),\n          itemIndex,\n          undefined,\n          undefined,\n          pageData,\n        );\n\n        newPage.top = pageTop;\n        newPage.height = pageHeight;\n        if (this._visibleRect && this._visibleRect.bottom) {\n          newPage.isVisible = pageBottom >= this._visibleRect.top && pageTop <= this._visibleRect.bottom;\n        }\n\n        pages.push(newPage);\n\n        if (isPageInRequiredRange && this._allowedRect) {\n          _mergeRect(materializedRect, {\n            top: pageTop,\n            bottom: pageBottom,\n            height: pageHeight,\n            left: allowedRect.left,\n            right: allowedRect.right,\n            width: allowedRect.width,\n          });\n        }\n      } else {\n        if (!currentSpacer) {\n          currentSpacer = this._createPage(\n            SPACER_KEY_PREFIX + itemIndex,\n            undefined,\n            itemIndex,\n            0,\n            undefined,\n            pageData,\n            true /*isSpacer*/,\n          );\n        }\n        currentSpacer.height = (currentSpacer.height || 0) + (pageBottom - pageTop) + 1;\n        currentSpacer.itemCount += itemsPerPage;\n      }\n      pageTop += pageBottom - pageTop + 1;\n\n      // in virtualized mode, we render need to render first page then break and measure,\n      // otherwise, we render all items without measurement to make rendering fast\n      if (isFirstRender && shouldVirtualize) {\n        break;\n      }\n    }\n\n    if (currentSpacer) {\n      currentSpacer.key = SPACER_KEY_PREFIX + 'end';\n      pages.push(currentSpacer);\n    }\n\n    this._materializedRect = materializedRect;\n\n    // console.log('materialized: ', materializedRect);\n    return {\n      ...state,\n      pages: pages,\n      measureVersion: this._measureVersion,\n    };\n  }\n\n  private _getPageSpecification(\n    itemIndex: number,\n    visibleRect: IRectangle,\n  ): {\n    // These return values are now no longer optional.\n    itemCount: number;\n    height: number;\n    data?: any;\n    key?: string;\n  } {\n    const { getPageSpecification } = this.props;\n    if (getPageSpecification) {\n      const pageData = getPageSpecification(itemIndex, visibleRect);\n\n      const { itemCount = this._getItemCountForPage(itemIndex, visibleRect) } = pageData;\n\n      const { height = this._getPageHeight(itemIndex, visibleRect, itemCount) } = pageData;\n\n      return {\n        itemCount: itemCount,\n        height: height,\n        data: pageData.data,\n        key: pageData.key,\n      };\n    } else {\n      const itemCount = this._getItemCountForPage(itemIndex, visibleRect);\n\n      return {\n        itemCount: itemCount,\n        height: this._getPageHeight(itemIndex, visibleRect, itemCount),\n      };\n    }\n  }\n\n  /**\n   * Get the pixel height of a give page. Will use the props getPageHeight first, and if not provided, fallback to\n   * cached height, or estimated page height, or default page height.\n   */\n  private _getPageHeight(itemIndex: number, visibleRect: IRectangle, itemsPerPage: number): number {\n    if (this.props.getPageHeight) {\n      return this.props.getPageHeight(itemIndex, visibleRect, itemsPerPage);\n    } else {\n      const cachedHeight = this._cachedPageHeights[itemIndex];\n\n      return cachedHeight ? cachedHeight.height : this._estimatedPageHeight || DEFAULT_PAGE_HEIGHT;\n    }\n  }\n\n  private _getItemCountForPage(itemIndex: number, visibileRect: IRectangle): number {\n    const itemsPerPage = this.props.getItemCountForPage\n      ? this.props.getItemCountForPage(itemIndex, visibileRect)\n      : DEFAULT_ITEMS_PER_PAGE;\n\n    return itemsPerPage ? itemsPerPage : DEFAULT_ITEMS_PER_PAGE;\n  }\n\n  private _createPage(\n    pageKey: string | undefined,\n    items: any[] | undefined,\n    startIndex: number = -1,\n    count: number = items ? items.length : 0,\n    style: React.CSSProperties = {},\n    data?: any,\n    isSpacer?: boolean,\n  ): IPage<T> {\n    pageKey = pageKey || PAGE_KEY_PREFIX + startIndex;\n    const cachedPage = this._pageCache[pageKey];\n    if (cachedPage && cachedPage.page) {\n      return cachedPage.page;\n    }\n\n    return {\n      key: pageKey,\n      startIndex: startIndex,\n      itemCount: count,\n      items: items,\n      style: style,\n      top: 0,\n      height: 0,\n      data: data,\n      isSpacer: isSpacer || false,\n    };\n  }\n\n  private _getRenderCount(props?: IListProps<T>): number {\n    const { items, startIndex, renderCount } = props || this.props;\n\n    return renderCount === undefined ? (items ? items.length - startIndex! : 0) : renderCount;\n  }\n\n  /** Calculate the visible rect within the list where top: 0 and left: 0 is the top/left of the list. */\n  private _updateRenderRects(props: IListProps<T>, state: IListState<T>, forceUpdate?: boolean): void {\n    const { renderedWindowsAhead, renderedWindowsBehind } = props;\n    const { pages } = state;\n    // when not in virtualize mode, we render all items without measurement to optimize page rendering perf\n    if (!this._shouldVirtualize(props)) {\n      return;\n    }\n\n    let surfaceRect = this._surfaceRect || { ...EMPTY_RECT };\n    const scrollHeight = this._scrollElement && this._scrollElement.scrollHeight;\n    const scrollTop = this._scrollElement ? this._scrollElement.scrollTop : 0;\n\n    // WARNING: EXPENSIVE CALL! We need to know the surface top relative to the window.\n    // This needs to be called to recalculate when new pages should be loaded.\n    // We check to see how far we've scrolled and if it's further than a third of a page we run it again.\n    if (\n      this._surface.current &&\n      (forceUpdate ||\n        !pages ||\n        !this._surfaceRect ||\n        !scrollHeight ||\n        scrollHeight !== this._scrollHeight ||\n        Math.abs(this._scrollTop - scrollTop) > this._estimatedPageHeight / 3)\n    ) {\n      surfaceRect = this._surfaceRect = _measureSurfaceRect(this._surface.current);\n      this._scrollTop = scrollTop;\n    }\n\n    // If the scroll height has changed, something in the container likely resized and\n    // we should redo the page heights incase their content resized.\n    if (forceUpdate || !scrollHeight || scrollHeight !== this._scrollHeight) {\n      this._measureVersion++;\n    }\n\n    this._scrollHeight = scrollHeight || 0;\n\n    // If the surface is above the container top or below the container bottom, or if this is not the first\n    // render return empty rect.\n    // The first time the list gets rendered we need to calculate the rectangle. The width of the list is\n    // used to calculate the width of the list items.\n    const visibleTop = Math.max(0, -surfaceRect.top);\n    const win = getWindow(this._root.current);\n    const visibleRect = {\n      top: visibleTop,\n      left: surfaceRect.left,\n      bottom: visibleTop + win!.innerHeight,\n      right: surfaceRect.right,\n      width: surfaceRect.width,\n      height: win!.innerHeight,\n    };\n\n    // The required/allowed rects are adjusted versions of the visible rect.\n    this._requiredRect = _expandRect(visibleRect, this._requiredWindowsBehind, this._requiredWindowsAhead);\n    this._allowedRect = _expandRect(visibleRect, renderedWindowsBehind!, renderedWindowsAhead!);\n\n    // store the visible rect for later use.\n    this._visibleRect = visibleRect;\n  }\n}\n\nfunction _expandRect(rect: IRectangle, pagesBefore: number, pagesAfter: number): IRectangle {\n  const top = rect.top - pagesBefore * rect.height;\n  const height = rect.height + (pagesBefore + pagesAfter) * rect.height;\n\n  return {\n    top: top,\n    bottom: top + height,\n    height: height,\n    left: rect.left,\n    right: rect.right,\n    width: rect.width,\n  };\n}\n\nfunction _isContainedWithin(innerRect: IRectangle, outerRect: IRectangle): boolean {\n  return (\n    innerRect.top >= outerRect.top &&\n    innerRect.left >= outerRect.left &&\n    innerRect.bottom! <= outerRect.bottom! &&\n    innerRect.right! <= outerRect.right!\n  );\n}\n\nfunction _mergeRect(targetRect: IRectangle, newRect: IRectangle): IRectangle {\n  targetRect.top = newRect.top < targetRect.top || targetRect.top === -1 ? newRect.top : targetRect.top;\n  targetRect.left = newRect.left < targetRect.left || targetRect.left === -1 ? newRect.left : targetRect.left;\n  targetRect.bottom =\n    newRect.bottom! > targetRect.bottom! || targetRect.bottom === -1 ? newRect.bottom : targetRect.bottom;\n  targetRect.right = newRect.right! > targetRect.right! || targetRect.right === -1 ? newRect.right : targetRect.right;\n  targetRect.width = targetRect.right! - targetRect.left + 1;\n  targetRect.height = targetRect.bottom! - targetRect.top + 1;\n\n  return targetRect;\n}\n","import * as React from 'react';\nimport { IGroup, IGroupDividerProps, IGroupRenderProps, IGroupedListStyles } from './GroupedList.types';\nimport { IGroupHeaderProps } from './GroupHeader.types';\nimport { IGroupFooterProps } from './GroupFooter.types';\nimport { IGroupShowAllProps } from './GroupShowAll.types';\n\nimport { IDragDropContext, IDragDropEvents, IDragDropHelper, IDragDropOptions } from '../../DragDrop';\n\nimport { IProcessedStyleSet } from '../../Styling';\nimport { initializeComponentRef, IRenderFunction, IDisposable, css, getId, EventGroup } from '../../Utilities';\n\nimport { ISelection, SelectionMode, SELECTION_CHANGE } from '../../Selection';\n\nimport { GroupHeader } from './GroupHeader';\nimport { GroupShowAll } from './GroupShowAll';\nimport { GroupFooter } from './GroupFooter';\n\nimport { List, IListProps } from '../../List';\nimport { IViewport } from '../../utilities/decorators/withViewport';\n\nexport interface IGroupedListSectionProps extends React.ClassAttributes<GroupedListSection> {\n  /** GroupedList resolved class names */\n  groupedListClassNames?: IProcessedStyleSet<IGroupedListStyles>;\n\n  /**\n   * Gets the component ref.\n   */\n  componentRef?: () => void;\n\n  /** Whether to render in compact mode */\n  compact?: boolean;\n\n  /** Map of callback functions related to drag and drop functionality. */\n  dragDropEvents?: IDragDropEvents;\n\n  /** helper to manage drag/drop across item rows and groups */\n  dragDropHelper?: IDragDropHelper;\n\n  /** Event names and corresponding callbacks that will be registered to the group and the rendered elements */\n  eventsToRegister?: { eventName: string; callback: (context: IDragDropContext, event?: any) => void }[];\n\n  /** Information to pass in to the group footer. */\n  footerProps?: IGroupFooterProps;\n\n  /** Grouping item limit. */\n  getGroupItemLimit?: (group: IGroup) => number;\n\n  /** Optional grouping instructions. */\n  groupIndex?: number;\n\n  /** Optional group nesting level. */\n  groupNestingDepth?: number;\n\n  /** Optional grouping instructions. */\n  group?: IGroup;\n\n  /** Optional override properties to render groups. */\n  groupProps?: IGroupRenderProps;\n\n  /** Information to pass in to the group header. */\n  headerProps?: IGroupHeaderProps;\n\n  /** List of items to render. */\n  items: any[];\n\n  /** Optional list props to pass to list renderer.  */\n  listProps?: IListProps;\n\n  /** Rendering callback to render the group items. */\n  onRenderCell: (nestingDepth?: number, item?: any, index?: number) => React.ReactNode;\n\n  /** Optional selection model to track selection state.  */\n  selection?: ISelection;\n\n  /** Controls how/if the details list manages selection. */\n  selectionMode?: SelectionMode;\n\n  /** Information to pass in to the group Show All footer. */\n  showAllProps?: IGroupShowAllProps;\n\n  /** Optional Viewport, provided by the parent component. */\n  viewport?: IViewport;\n\n  /** Override for rendering the group header. */\n  onRenderGroupHeader?: IRenderFunction<IGroupHeaderProps>;\n\n  /** Override for rendering the group Show All link. */\n  onRenderGroupShowAll?: IRenderFunction<IGroupShowAllProps>;\n\n  /** Override for rendering the group footer. */\n  onRenderGroupFooter?: IRenderFunction<IGroupFooterProps>;\n\n  /**\n   * Optional callback to determine whether the list should be rendered in full, or virtualized.\n   * Virtualization will add and remove pages of items as the user scrolls them into the visible range.\n   * This benefits larger list scenarios by reducing the DOM on the screen, but can negatively affect performance for\n   * smaller lists.\n   * The default implementation will virtualize when this callback is not provided.\n   */\n  onShouldVirtualize?: (props: IListProps) => boolean;\n\n  /** Stores parent group's children. */\n  groups?: IGroup[];\n}\n\nexport interface IGroupedListSectionState {\n  isDropping?: boolean;\n  isSelected?: boolean;\n}\n\nconst DEFAULT_DROPPING_CSS_CLASS = 'is-dropping';\n\nexport class GroupedListSection extends React.Component<IGroupedListSectionProps, IGroupedListSectionState> {\n  private _root = React.createRef<HTMLDivElement>();\n  private _list = React.createRef<List>();\n  private _subGroupRefs: Record<string, GroupedListSection | null> = {};\n  private _id: string;\n  private _events: EventGroup;\n\n  private _dragDropSubscription?: IDisposable;\n  private _droppingClassName: string = '';\n\n  constructor(props: IGroupedListSectionProps) {\n    super(props);\n\n    const { selection, group } = props;\n\n    initializeComponentRef(this);\n\n    this._id = getId('GroupedListSection');\n\n    this.state = {\n      isDropping: false,\n      isSelected: selection && group ? selection.isRangeSelected(group.startIndex, group.count) : false,\n    };\n\n    this._events = new EventGroup(this);\n  }\n\n  public componentDidMount(): void {\n    const { dragDropHelper, selection } = this.props;\n\n    if (dragDropHelper && this._root.current) {\n      this._dragDropSubscription = dragDropHelper.subscribe(\n        this._root.current,\n        this._events,\n        this._getGroupDragDropOptions(),\n      );\n    }\n\n    if (selection) {\n      this._events.on(selection, SELECTION_CHANGE, this._onSelectionChange);\n    }\n  }\n\n  public componentWillUnmount() {\n    this._events.dispose();\n\n    if (this._dragDropSubscription) {\n      this._dragDropSubscription.dispose();\n    }\n  }\n\n  public componentDidUpdate(previousProps: IGroupedListSectionProps) {\n    if (\n      this.props.group !== previousProps.group ||\n      this.props.groupIndex !== previousProps.groupIndex ||\n      this.props.dragDropHelper !== previousProps.dragDropHelper\n    ) {\n      if (this._dragDropSubscription) {\n        this._dragDropSubscription.dispose();\n        delete this._dragDropSubscription;\n      }\n\n      if (this.props.dragDropHelper && this._root.current) {\n        this._dragDropSubscription = this.props.dragDropHelper.subscribe(\n          this._root.current,\n          this._events,\n          this._getGroupDragDropOptions(),\n        );\n      }\n    }\n  }\n\n  public render(): JSX.Element {\n    const {\n      getGroupItemLimit,\n      group,\n      groupIndex,\n      headerProps,\n      showAllProps,\n      footerProps,\n      viewport,\n      selectionMode,\n      onRenderGroupHeader = this._onRenderGroupHeader,\n      onRenderGroupShowAll = this._onRenderGroupShowAll,\n      onRenderGroupFooter = this._onRenderGroupFooter,\n      onShouldVirtualize,\n      groupedListClassNames,\n      groups,\n      compact,\n      listProps = {},\n    } = this.props;\n    const { isSelected } = this.state;\n    const renderCount = group && getGroupItemLimit ? getGroupItemLimit(group) : Infinity;\n    const isShowAllVisible =\n      group &&\n      !group.children &&\n      !group.isCollapsed &&\n      !group.isShowingAll &&\n      (group.count > renderCount || group.hasMoreData);\n    const hasNestedGroups = group && group.children && group.children.length > 0;\n\n    const { version } = listProps;\n\n    const dividerProps: IGroupDividerProps = {\n      group,\n      groupIndex,\n      groupLevel: group ? group.level : 0,\n      isSelected,\n      selected: isSelected,\n      viewport,\n      selectionMode,\n      groups,\n      compact,\n    };\n\n    const ariaControlsProps: IGroupHeaderProps = {\n      groupedListId: this._id,\n      ariaSetSize: groups ? groups.length : undefined,\n      ariaPosInSet: groupIndex !== undefined ? groupIndex + 1 : undefined,\n    };\n\n    const groupHeaderProps: IGroupHeaderProps = { ...headerProps, ...dividerProps, ...ariaControlsProps };\n    const groupShowAllProps: IGroupShowAllProps = { ...showAllProps, ...dividerProps };\n    const groupFooterProps: IGroupFooterProps = { ...footerProps, ...dividerProps };\n\n    const isDraggable: boolean =\n      !!this.props.dragDropHelper &&\n      this._getGroupDragDropOptions().canDrag!(group) &&\n      !!this.props.dragDropEvents!.canDragGroups;\n\n    return (\n      <div\n        ref={this._root}\n        {...(isDraggable && { draggable: true })}\n        className={css(groupedListClassNames && groupedListClassNames.group, this._getDroppingClassName())}\n        role=\"presentation\"\n      >\n        {onRenderGroupHeader(groupHeaderProps, this._onRenderGroupHeader)}\n        {group && group.isCollapsed ? null : hasNestedGroups ? (\n          <List\n            role=\"presentation\"\n            ref={this._list}\n            items={group ? group.children : []}\n            onRenderCell={this._renderSubGroup}\n            getItemCountForPage={this._returnOne}\n            onShouldVirtualize={onShouldVirtualize}\n            version={version}\n            id={this._id}\n          />\n        ) : (\n          this._onRenderGroup(renderCount)\n        )}\n        {group && group.isCollapsed\n          ? null\n          : isShowAllVisible && onRenderGroupShowAll(groupShowAllProps, this._onRenderGroupShowAll)}\n        {onRenderGroupFooter(groupFooterProps, this._onRenderGroupFooter)}\n      </div>\n    );\n  }\n\n  public forceUpdate() {\n    super.forceUpdate();\n    this.forceListUpdate();\n  }\n\n  public forceListUpdate() {\n    const { group } = this.props;\n\n    if (this._list.current) {\n      this._list.current.forceUpdate();\n\n      if (group && group.children && group.children.length > 0) {\n        const subGroupCount = group.children.length;\n\n        for (let i = 0; i < subGroupCount; i++) {\n          const subGroup = this._list.current.pageRefs['subGroup_' + String(i)] as GroupedListSection;\n\n          if (subGroup) {\n            subGroup.forceListUpdate();\n          }\n        }\n      }\n    } else {\n      const subGroup = this._subGroupRefs['subGroup_' + String(0)];\n\n      if (subGroup) {\n        subGroup.forceListUpdate();\n      }\n    }\n  }\n\n  private _onRenderGroupHeader = (props: IGroupHeaderProps): JSX.Element => {\n    return <GroupHeader {...props} />;\n  };\n\n  private _onRenderGroupShowAll = (props: IGroupShowAllProps): JSX.Element => {\n    return <GroupShowAll {...props} />;\n  };\n\n  private _onRenderGroupFooter = (props: IGroupFooterProps): JSX.Element => {\n    return <GroupFooter {...props} />;\n  };\n\n  private _onSelectionChange(): void {\n    const { group, selection } = this.props;\n    if (selection && group) {\n      const isSelected = selection.isRangeSelected(group.startIndex, group.count);\n\n      if (isSelected !== this.state.isSelected) {\n        this.setState({ isSelected });\n      }\n    }\n  }\n\n  private _onRenderGroupCell(\n    onRenderCell: any,\n    groupNestingDepth: number | undefined,\n    group: IGroup | undefined,\n  ): (item: any, itemIndex: number | undefined) => React.ReactNode {\n    return (item: any, itemIndex: number | undefined): React.ReactNode => {\n      return onRenderCell(groupNestingDepth, item, itemIndex, group);\n    };\n  }\n\n  private _onRenderGroup(renderCount: number): JSX.Element {\n    const { group, items, onRenderCell, listProps, groupNestingDepth, onShouldVirtualize, groupProps } = this.props;\n    const count = group && !group.isShowingAll ? group.count : items.length;\n    const startIndex = group ? group.startIndex : 0;\n\n    return (\n      <List\n        role={groupProps && groupProps.role ? groupProps.role : 'rowgroup'}\n        aria-label={group?.name}\n        items={items}\n        onRenderCell={this._onRenderGroupCell(onRenderCell, groupNestingDepth, group)}\n        ref={this._list}\n        renderCount={Math.min(count, renderCount)}\n        startIndex={startIndex}\n        onShouldVirtualize={onShouldVirtualize}\n        id={this._id}\n        {...listProps}\n      />\n    );\n  }\n\n  private _renderSubGroup = (subGroup: IGroup, subGroupIndex: number): JSX.Element | null => {\n    const {\n      dragDropEvents,\n      dragDropHelper,\n      eventsToRegister,\n      getGroupItemLimit,\n      groupNestingDepth,\n      groupProps,\n      items,\n      headerProps,\n      showAllProps,\n      footerProps,\n      listProps,\n      onRenderCell,\n      selection,\n      selectionMode,\n      viewport,\n      onRenderGroupHeader,\n      onRenderGroupShowAll,\n      onRenderGroupFooter,\n      onShouldVirtualize,\n      group,\n      compact,\n    } = this.props;\n\n    const nestingDepth = subGroup.level ? subGroup.level + 1 : groupNestingDepth;\n\n    return !subGroup || subGroup.count > 0 || (groupProps && groupProps.showEmptyGroups) ? (\n      <GroupedListSection\n        ref={ref => (this._subGroupRefs['subGroup_' + subGroupIndex] = ref)}\n        key={this._getGroupKey(subGroup, subGroupIndex)}\n        dragDropEvents={dragDropEvents}\n        dragDropHelper={dragDropHelper}\n        eventsToRegister={eventsToRegister}\n        footerProps={footerProps}\n        getGroupItemLimit={getGroupItemLimit}\n        group={subGroup}\n        groupIndex={subGroupIndex}\n        groupNestingDepth={nestingDepth}\n        groupProps={groupProps}\n        headerProps={headerProps}\n        items={items}\n        listProps={listProps}\n        onRenderCell={onRenderCell}\n        selection={selection}\n        selectionMode={selectionMode}\n        showAllProps={showAllProps}\n        viewport={viewport}\n        onRenderGroupHeader={onRenderGroupHeader}\n        onRenderGroupShowAll={onRenderGroupShowAll}\n        onRenderGroupFooter={onRenderGroupFooter}\n        onShouldVirtualize={onShouldVirtualize}\n        groups={group ? group.children : []}\n        compact={compact}\n      />\n    ) : null;\n  };\n\n  private _returnOne(): number {\n    return 1;\n  }\n\n  private _getGroupKey(group: IGroup, index: number): string {\n    return 'group-' + (group && group.key ? group.key : String(group.level) + String(index));\n  }\n\n  /**\n   * collect all the data we need to enable drag/drop for a group\n   */\n  private _getGroupDragDropOptions = (): IDragDropOptions => {\n    const { group, groupIndex, dragDropEvents, eventsToRegister } = this.props;\n    const options = {\n      eventMap: eventsToRegister,\n      selectionIndex: -1,\n      context: { data: group, index: groupIndex, isGroup: true },\n      updateDropState: this._updateDroppingState,\n      canDrag: dragDropEvents!.canDrag,\n      canDrop: dragDropEvents!.canDrop,\n      onDrop: dragDropEvents!.onDrop,\n      onDragStart: dragDropEvents!.onDragStart,\n      onDragEnter: dragDropEvents!.onDragEnter,\n      onDragLeave: dragDropEvents!.onDragLeave,\n      onDragEnd: dragDropEvents!.onDragEnd,\n      onDragOver: dragDropEvents!.onDragOver,\n    };\n    return options as IDragDropOptions;\n  };\n\n  /**\n   * update groupIsDropping state based on the input value, which is used to change style during drag and drop\n   *\n   * @param newValue - new isDropping state value\n   * @param event - the event trigger dropping state change which can be dragenter, dragleave etc\n   */\n  private _updateDroppingState = (newIsDropping: boolean, event: DragEvent): void => {\n    const { isDropping } = this.state;\n    const { dragDropEvents, group } = this.props;\n\n    if (isDropping !== newIsDropping) {\n      if (isDropping) {\n        if (dragDropEvents && dragDropEvents.onDragLeave) {\n          dragDropEvents.onDragLeave(group, event);\n        }\n      } else {\n        if (dragDropEvents && dragDropEvents.onDragEnter) {\n          this._droppingClassName = dragDropEvents.onDragEnter(group, event);\n        }\n      }\n\n      this.setState({ isDropping: newIsDropping });\n    }\n  };\n\n  /**\n   * get the correct css class to reflect the dropping state for a given group\n   *\n   * If the group is the current drop target, return the default dropping class name\n   * Otherwise, return '';\n   *\n   */\n  private _getDroppingClassName(): string {\n    let { isDropping } = this.state;\n    const { group, groupedListClassNames } = this.props;\n\n    isDropping = !!(group && isDropping);\n\n    return css(\n      isDropping && this._droppingClassName,\n      isDropping && DEFAULT_DROPPING_CSS_CLASS,\n      isDropping && groupedListClassNames && groupedListClassNames.groupIsDropping,\n    );\n  }\n}\n","import * as React from 'react';\nimport { IProcessedStyleSet } from '../../Styling';\nimport {\n  IGroupedList,\n  IGroupedListProps,\n  IGroup,\n  IGroupedListStyleProps,\n  IGroupedListStyles,\n} from './GroupedList.types';\nimport { initializeComponentRef, classNamesFunction, KeyCodes, getRTLSafeKeyCode, css } from '../../Utilities';\nimport { GroupedListSection } from './GroupedListSection';\nimport { List, ScrollToMode, IListProps } from '../../List';\nimport { SelectionMode } from '../../Selection';\nimport { DEFAULT_ROW_HEIGHTS } from '../DetailsList/DetailsRow.styles';\nimport { IGroupHeaderProps } from './GroupHeader';\nimport { IGroupShowAllProps } from './GroupShowAll.styles';\nimport { IGroupFooterProps } from './GroupFooter.types';\nimport { FocusZone, FocusZoneDirection } from '../../FocusZone';\n\nconst getClassNames = classNamesFunction<IGroupedListStyleProps, IGroupedListStyles>();\nconst { rowHeight: ROW_HEIGHT, compactRowHeight: COMPACT_ROW_HEIGHT } = DEFAULT_ROW_HEIGHTS;\n\nexport interface IGroupedListState {\n  selectionMode?: IGroupedListProps['selectionMode'];\n  compact?: IGroupedListProps['compact'];\n  groups?: IGroup[];\n  items?: IGroupedListProps['items'];\n  listProps?: IGroupedListProps['listProps'];\n  version: {};\n}\n\nexport class GroupedListBase extends React.Component<IGroupedListProps, IGroupedListState> implements IGroupedList {\n  public static defaultProps = {\n    selectionMode: SelectionMode.multiple,\n    isHeaderVisible: true,\n    groupProps: {},\n    compact: false,\n  };\n\n  private _classNames: IProcessedStyleSet<IGroupedListStyles>;\n\n  private _list = React.createRef<List>();\n\n  private _isSomeGroupExpanded: boolean;\n\n  public static getDerivedStateFromProps(\n    nextProps: IGroupedListProps,\n    previousState: IGroupedListState,\n  ): IGroupedListState {\n    const { groups, selectionMode, compact, items, listProps } = nextProps;\n    const listVersion = listProps && listProps.version;\n\n    let nextState = {\n      ...previousState,\n      selectionMode,\n      compact,\n      groups,\n      listProps,\n    };\n\n    let shouldForceUpdates = false;\n\n    const previousListVersion = previousState.listProps && previousState.listProps.version;\n\n    if (\n      listVersion !== previousListVersion ||\n      items !== previousState.items ||\n      groups !== previousState.groups ||\n      selectionMode !== previousState.selectionMode ||\n      compact !== previousState.compact\n    ) {\n      // If there are any props not passed explicitly to `List` which have an impact on the behavior of `onRenderCell`,\n      // these need to 'force-update' this component by revving the version. Otherwise, the List might render with stale\n      // data.\n      shouldForceUpdates = true;\n    }\n\n    if (groups !== previousState.groups) {\n      nextState = {\n        ...nextState,\n        groups,\n      };\n    }\n\n    if (selectionMode !== previousState.selectionMode || compact !== previousState.compact) {\n      shouldForceUpdates = true;\n    }\n\n    if (shouldForceUpdates) {\n      nextState = {\n        ...nextState,\n        version: {},\n      };\n    }\n\n    return nextState;\n  }\n\n  constructor(props: IGroupedListProps) {\n    super(props);\n\n    initializeComponentRef(this);\n\n    this._isSomeGroupExpanded = this._computeIsSomeGroupExpanded(props.groups);\n\n    const { listProps: { version = {} } = {} } = props;\n\n    this.state = {\n      groups: props.groups,\n      items: props.items,\n      listProps: props.listProps,\n      version,\n    };\n  }\n\n  public scrollToIndex(index: number, measureItem?: (itemIndex: number) => number, scrollToMode?: ScrollToMode): void {\n    if (this._list.current) {\n      this._list.current.scrollToIndex(index, measureItem, scrollToMode);\n    }\n  }\n\n  public getStartItemIndexInView(): number {\n    return this._list.current!.getStartItemIndexInView() || 0;\n  }\n\n  public componentDidMount() {\n    const { groupProps, groups = [] } = this.props;\n\n    if (groupProps && groupProps.isAllGroupsCollapsed) {\n      this._setGroupsCollapsedState(groups, groupProps.isAllGroupsCollapsed);\n    }\n  }\n\n  public render(): JSX.Element {\n    const {\n      className,\n      usePageCache,\n      onShouldVirtualize,\n      theme,\n      role = 'treegrid',\n      styles,\n      compact,\n      focusZoneProps = {},\n      rootListProps = {},\n    } = this.props;\n    const { groups, version } = this.state;\n\n    this._classNames = getClassNames(styles, {\n      theme: theme!,\n      className,\n      compact: compact,\n    });\n\n    const { shouldEnterInnerZone = this._isInnerZoneKeystroke } = focusZoneProps;\n\n    return (\n      <FocusZone\n        direction={FocusZoneDirection.vertical}\n        data-automationid=\"GroupedList\"\n        data-is-scrollable=\"false\"\n        role=\"presentation\"\n        {...focusZoneProps}\n        shouldEnterInnerZone={shouldEnterInnerZone}\n        className={css(this._classNames.root, focusZoneProps.className)}\n      >\n        {!groups ? (\n          this._renderGroup(undefined, 0)\n        ) : (\n          <List\n            ref={this._list}\n            role={role}\n            items={groups}\n            onRenderCell={this._renderGroup}\n            getItemCountForPage={this._returnOne}\n            getPageHeight={this._getPageHeight}\n            getPageSpecification={this._getPageSpecification}\n            usePageCache={usePageCache}\n            onShouldVirtualize={onShouldVirtualize}\n            version={version}\n            {...rootListProps}\n          />\n        )}\n      </FocusZone>\n    );\n  }\n\n  public forceUpdate() {\n    super.forceUpdate();\n    this._forceListUpdates();\n  }\n\n  public toggleCollapseAll(allCollapsed: boolean): void {\n    const { groups = [] } = this.state;\n    const { groupProps } = this.props;\n    const onToggleCollapseAll = groupProps && groupProps.onToggleCollapseAll;\n\n    if (groups.length > 0) {\n      if (onToggleCollapseAll) {\n        onToggleCollapseAll(allCollapsed);\n      }\n\n      this._setGroupsCollapsedState(groups, allCollapsed);\n\n      this._updateIsSomeGroupExpanded();\n\n      this.forceUpdate();\n    }\n  }\n\n  private _setGroupsCollapsedState(groups: IGroup[], isCollapsed: boolean): void {\n    for (let groupIndex = 0; groupIndex < groups.length; groupIndex++) {\n      groups[groupIndex].isCollapsed = isCollapsed;\n    }\n  }\n\n  private _renderGroup = (group: IGroup | undefined, groupIndex: number): React.ReactNode => {\n    const {\n      dragDropEvents,\n      dragDropHelper,\n      eventsToRegister,\n      groupProps,\n      items,\n      listProps,\n      onRenderCell,\n      selectionMode,\n      selection,\n      viewport,\n      onShouldVirtualize,\n      groups,\n      compact,\n    } = this.props;\n\n    // override group header/footer props as needed\n    const dividerProps = {\n      onToggleSelectGroup: this._onToggleSelectGroup,\n      onToggleCollapse: this._onToggleCollapse,\n      onToggleSummarize: this._onToggleSummarize,\n    };\n\n    const headerProps: IGroupHeaderProps = { ...groupProps!.headerProps, ...dividerProps };\n    const showAllProps: IGroupShowAllProps = { ...groupProps!.showAllProps, ...dividerProps };\n    const footerProps: IGroupFooterProps = { ...groupProps!.footerProps, ...dividerProps };\n    const groupNestingDepth = this._getGroupNestingDepth();\n\n    if (!groupProps!.showEmptyGroups && group && group.count === 0) {\n      return null;\n    }\n\n    const finalListProps: IListProps = {\n      ...(listProps || {}),\n      version: this.state.version,\n    };\n\n    return (\n      <GroupedListSection\n        key={this._getGroupKey(group, groupIndex)}\n        dragDropEvents={dragDropEvents}\n        dragDropHelper={dragDropHelper}\n        eventsToRegister={eventsToRegister}\n        footerProps={footerProps}\n        getGroupItemLimit={groupProps && groupProps.getGroupItemLimit}\n        group={group}\n        groupIndex={groupIndex}\n        groupNestingDepth={groupNestingDepth}\n        groupProps={groupProps}\n        headerProps={headerProps}\n        listProps={finalListProps}\n        items={items}\n        onRenderCell={onRenderCell}\n        onRenderGroupHeader={groupProps!.onRenderHeader}\n        onRenderGroupShowAll={groupProps!.onRenderShowAll}\n        onRenderGroupFooter={groupProps!.onRenderFooter}\n        selectionMode={selectionMode}\n        selection={selection}\n        showAllProps={showAllProps}\n        viewport={viewport}\n        onShouldVirtualize={onShouldVirtualize}\n        groupedListClassNames={this._classNames}\n        groups={groups}\n        compact={compact}\n      />\n    );\n  };\n\n  private _returnOne(): number {\n    return 1;\n  }\n\n  private _getDefaultGroupItemLimit = (group: IGroup): number => {\n    return group.children && group.children.length > 0 ? group.children.length : group.count;\n  };\n\n  private _getGroupItemLimit = (group: IGroup): number => {\n    const { groupProps } = this.props;\n    const getGroupItemLimit =\n      groupProps && groupProps.getGroupItemLimit ? groupProps.getGroupItemLimit : this._getDefaultGroupItemLimit;\n\n    return getGroupItemLimit(group);\n  };\n\n  private _getGroupHeight = (group: IGroup): number => {\n    const rowHeight = this.props.compact ? COMPACT_ROW_HEIGHT : ROW_HEIGHT;\n\n    return rowHeight + (group.isCollapsed ? 0 : rowHeight * this._getGroupItemLimit(group));\n  };\n\n  private _getPageHeight: IListProps['getPageHeight'] = (itemIndex: number) => {\n    const { groups } = this.state;\n    const { getGroupHeight = this._getGroupHeight } = this.props;\n    const pageGroup = groups && groups[itemIndex];\n\n    if (pageGroup) {\n      return getGroupHeight(pageGroup, itemIndex);\n    } else {\n      return 0;\n    }\n  };\n\n  private _getGroupKey(group: IGroup | undefined, index: number): string {\n    return 'group-' + (group && group.key ? group.key : String(index));\n  }\n\n  private _getGroupNestingDepth(): number {\n    const { groups } = this.state;\n    let level = 0;\n    let groupsInLevel = groups;\n\n    while (groupsInLevel && groupsInLevel.length > 0) {\n      level++;\n      groupsInLevel = groupsInLevel[0].children;\n    }\n\n    return level;\n  }\n\n  private _onToggleCollapse = (group: IGroup): void => {\n    const { groupProps } = this.props;\n    const onToggleCollapse = groupProps && groupProps.headerProps && groupProps.headerProps.onToggleCollapse;\n\n    if (group) {\n      if (onToggleCollapse) {\n        onToggleCollapse(group);\n      }\n\n      group.isCollapsed = !group.isCollapsed;\n      this._updateIsSomeGroupExpanded();\n      this.forceUpdate();\n    }\n  };\n\n  private _onToggleSelectGroup = (group: IGroup): void => {\n    const { selection, selectionMode } = this.props;\n\n    if (group && selection && selectionMode === SelectionMode.multiple) {\n      selection.toggleRangeSelected(group.startIndex, group.count);\n    }\n  };\n\n  private _isInnerZoneKeystroke = (ev: React.KeyboardEvent<HTMLElement>): boolean => {\n    // eslint-disable-next-line deprecation/deprecation\n    return ev.which === getRTLSafeKeyCode(KeyCodes.right);\n  };\n\n  private _forceListUpdates(groups?: IGroup[]): void {\n    this.setState({\n      version: {},\n    });\n  }\n\n  private _onToggleSummarize = (group: IGroup): void => {\n    const { groupProps } = this.props;\n    const onToggleSummarize = groupProps && groupProps.showAllProps && groupProps.showAllProps.onToggleSummarize;\n\n    if (onToggleSummarize) {\n      onToggleSummarize(group);\n    } else {\n      if (group) {\n        group.isShowingAll = !group.isShowingAll;\n      }\n\n      this.forceUpdate();\n    }\n  };\n\n  private _getPageSpecification = (\n    itemIndex: number,\n  ): {\n    key?: string;\n  } => {\n    const groups = this.state.groups;\n    const pageGroup = groups && groups[itemIndex];\n    return {\n      key: pageGroup && pageGroup.key,\n    };\n  };\n\n  private _computeIsSomeGroupExpanded(groups: IGroup[] | undefined): boolean {\n    return !!(\n      groups &&\n      groups.some(group => (group.children ? this._computeIsSomeGroupExpanded(group.children) : !group.isCollapsed))\n    );\n  }\n\n  private _updateIsSomeGroupExpanded(): void {\n    const { groups } = this.state;\n    const { onGroupExpandStateChanged } = this.props;\n\n    const newIsSomeGroupExpanded = this._computeIsSomeGroupExpanded(groups);\n    if (this._isSomeGroupExpanded !== newIsSomeGroupExpanded) {\n      if (onGroupExpandStateChanged) {\n        onGroupExpandStateChanged(newIsSomeGroupExpanded);\n      }\n      this._isSomeGroupExpanded = newIsSomeGroupExpanded;\n    }\n  }\n}\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { getStyles } from './GroupedList.styles';\nimport { GroupedListBase } from './GroupedList.base';\nimport { IGroupedListProps, IGroupedListStyles, IGroupedListStyleProps } from './GroupedList.types';\nexport { IGroupedListProps };\n\nexport const GroupedList: React.FunctionComponent<IGroupedListProps> = styled<\n  IGroupedListProps,\n  IGroupedListStyleProps,\n  IGroupedListStyles\n>(GroupedListBase, getStyles, undefined, {\n  scope: 'GroupedList',\n});\n","import { IRectangle } from '../IRectangle';\n/**\n * Helper to get bounding client rect. Passing in window will get the window size.\n *\n * @public\n */\nexport function getRect(element: HTMLElement | Window | null): IRectangle | undefined {\n  let rect: IRectangle | undefined;\n  if (element) {\n    if (element === window) {\n      rect = {\n        left: 0,\n        top: 0,\n        width: window.innerWidth,\n        height: window.innerHeight,\n        right: window.innerWidth,\n        bottom: window.innerHeight,\n      };\n    } else if ((element as { getBoundingClientRect?: unknown }).getBoundingClientRect) {\n      rect = (element as HTMLElement).getBoundingClientRect();\n    }\n  }\n  return rect;\n}\n","import * as React from 'react';\nimport { BaseDecorator } from './BaseDecorator';\nimport { findScrollableParent, getRect, getWindow, Async, EventGroup } from '../../Utilities';\n\n/**\n * Viewport rectangle dimensions.\n *\n * {@docCategory DetailsList}\n */\nexport interface IViewport {\n  /**\n   * Width in pixels.\n   */\n  width: number;\n  /**\n   * Height in pixels.\n   */\n  height: number;\n}\n\nexport interface IWithViewportState {\n  viewport?: IViewport;\n}\n\n/**\n * Props interface for the withViewport component.\n *\n * {@docCategory DetailsList}\n */\nexport interface IWithViewportProps {\n  /**\n   * Whether or not `withViewport` should disable its viewport measurements, effectively making this decorator\n   * pass-through with no impact on the rendered component.\n   *\n   * Since `withViewport` measures the `viewport` on mount, after each React update, and in response to events,\n   * it may cause a component which does not currently need this information due to its configuration to re-render\n   * too often. `skipViewportMeasures` may be toggled on and off based on current state, and will suspend and resume\n   * measurement as-needed.\n   *\n   * For example, when this wraps `DetailsList`, set `skipViewportMeasures` to `true` when the `layoutMode` is\n   * `fixedColumns`, since the `DetailsList` does not use the viewport size in any calculations.\n   *\n   * In addition, consider setting `skipViewportMeasures` to `true` when running within a React test renderer, to avoid\n   * direct DOM dependencies.\n   */\n  skipViewportMeasures?: boolean;\n  /**\n   * Whether or not to explicitly disable usage of the `ResizeObserver` in favor of a `'resize'` event on `window`,\n   * even if the browser supports `ResizeObserver`. This may be necessary if use of `ResizeObserver` results in too\n   * many re-renders of the wrapped component due to the frequency at which events are fired.\n   *\n   * This has no impact if `skipViewportMeasures` is `true`, as no viewport measurement strategy is used.\n   */\n  disableResizeObserver?: boolean;\n}\n\nconst RESIZE_DELAY = 500;\nconst MAX_RESIZE_ATTEMPTS = 3;\n\n/**\n * A decorator to update decorated component on viewport or window resize events.\n *\n * @param ComposedComponent decorated React component reference.\n */\nexport function withViewport<TProps extends { viewport?: IViewport }, TState>(\n  ComposedComponent: new (props: TProps, ...args: any[]) => React.Component<TProps, TState>,\n): any {\n  return class WithViewportComponent extends BaseDecorator<TProps, IWithViewportState> {\n    private _root = React.createRef<HTMLDivElement>();\n    private _resizeAttempts: number;\n    private _viewportResizeObserver: any;\n    private _async: Async;\n    private _events: EventGroup;\n\n    constructor(props: TProps) {\n      super(props);\n\n      this._async = new Async(this);\n      this._events = new EventGroup(this);\n      this._resizeAttempts = 0;\n\n      this.state = {\n        viewport: {\n          width: 0,\n          height: 0,\n        },\n      };\n    }\n\n    public componentDidMount(): void {\n      const { skipViewportMeasures, disableResizeObserver } = this.props as IWithViewportProps;\n      const win = getWindow(this._root.current);\n\n      this._onAsyncResize = this._async.debounce(this._onAsyncResize, RESIZE_DELAY, {\n        leading: false,\n      });\n\n      if (!skipViewportMeasures) {\n        if (!disableResizeObserver && this._isResizeObserverAvailable()) {\n          this._registerResizeObserver();\n        } else {\n          this._events.on(win, 'resize', this._onAsyncResize);\n        }\n\n        this._updateViewport();\n      }\n    }\n\n    public componentDidUpdate(previousProps: TProps) {\n      const { skipViewportMeasures: previousSkipViewportMeasures } = previousProps as IWithViewportProps;\n      const { skipViewportMeasures, disableResizeObserver } = this.props as IWithViewportProps;\n      const win = getWindow(this._root.current);\n\n      if (skipViewportMeasures !== previousSkipViewportMeasures) {\n        if (!skipViewportMeasures) {\n          if (!disableResizeObserver && this._isResizeObserverAvailable()) {\n            if (!this._viewportResizeObserver) {\n              this._registerResizeObserver();\n            }\n          } else {\n            this._events.on(win, 'resize', this._onAsyncResize);\n          }\n\n          this._updateViewport();\n        } else {\n          this._unregisterResizeObserver();\n          this._events.off(win, 'resize', this._onAsyncResize);\n        }\n      }\n    }\n\n    public componentWillUnmount(): void {\n      this._events.dispose();\n      this._async.dispose();\n      this._unregisterResizeObserver();\n    }\n\n    public render(): JSX.Element {\n      const { viewport } = this.state;\n      const newViewport = viewport!.width > 0 && viewport!.height > 0 ? viewport : undefined;\n\n      return (\n        <div className=\"ms-Viewport\" ref={this._root} style={{ minWidth: 1, minHeight: 1 }}>\n          <ComposedComponent ref={this._updateComposedComponentRef} viewport={newViewport} {...(this.props as any)} />\n        </div>\n      );\n    }\n\n    public forceUpdate(): void {\n      this._updateViewport(true);\n    }\n\n    private _onAsyncResize(): void {\n      this._updateViewport();\n    }\n\n    private _isResizeObserverAvailable(): boolean {\n      const win = getWindow(this._root.current);\n\n      return win && (win as any).ResizeObserver;\n    }\n\n    private _registerResizeObserver = () => {\n      const win = getWindow(this._root.current);\n\n      this._viewportResizeObserver = new (win as any).ResizeObserver(this._onAsyncResize);\n      this._viewportResizeObserver.observe(this._root.current);\n    };\n\n    private _unregisterResizeObserver = () => {\n      if (this._viewportResizeObserver) {\n        this._viewportResizeObserver.disconnect();\n        delete this._viewportResizeObserver;\n      }\n    };\n\n    /* Note: using lambda here because decorators don't seem to work in decorators. */\n    private _updateViewport = (withForceUpdate?: boolean) => {\n      const { viewport } = this.state;\n      const viewportElement = this._root.current;\n      const scrollElement = findScrollableParent(viewportElement) as HTMLElement;\n      const scrollRect = getRect(scrollElement);\n      const clientRect = getRect(viewportElement);\n      const updateComponent = () => {\n        if (withForceUpdate && this._composedComponentInstance) {\n          this._composedComponentInstance.forceUpdate();\n        }\n      };\n\n      const isSizeChanged =\n        (clientRect && clientRect.width) !== viewport!.width || (scrollRect && scrollRect.height) !== viewport!.height;\n\n      if (isSizeChanged && this._resizeAttempts < MAX_RESIZE_ATTEMPTS && clientRect && scrollRect) {\n        this._resizeAttempts++;\n        this.setState(\n          {\n            viewport: {\n              width: clientRect.width,\n              height: scrollRect.height,\n            },\n          },\n          () => {\n            this._updateViewport(withForceUpdate);\n          },\n        );\n      } else {\n        this._resizeAttempts = 0;\n        updateComponent();\n      }\n    };\n  };\n}\n","import { IGroup } from '../../components/GroupedList/GroupedList.types';\n\n/**\n * Takes an array of groups and returns a count of the groups and all descendant groups.\n * @param groups - The array of groups to count.\n */\nexport const GetGroupCount = (groups: IGroup[] | undefined): number => {\n  let total = 0;\n\n  if (groups) {\n    const remainingGroups = [...groups];\n    let currentGroup: IGroup;\n\n    while (remainingGroups && remainingGroups.length > 0) {\n      ++total;\n\n      currentGroup = remainingGroups.pop() as IGroup;\n\n      if (currentGroup && currentGroup.children) {\n        remainingGroups.push(...currentGroup.children);\n      }\n    }\n  }\n\n  return total;\n};\n","import * as React from 'react';\n\nimport {\n  initializeComponentRef,\n  FocusRects,\n  Async,\n  KeyCodes,\n  elementContains,\n  getRTLSafeKeyCode,\n  IRenderFunction,\n  classNamesFunction,\n  memoizeFunction,\n} from '../../Utilities';\nimport {\n  CheckboxVisibility,\n  ColumnActionsMode,\n  ConstrainMode,\n  DetailsListLayoutMode,\n  IColumn,\n  IDetailsList,\n  IDetailsListProps,\n  IDetailsListStyles,\n  IDetailsListStyleProps,\n  ColumnDragEndLocation,\n} from '../DetailsList/DetailsList.types';\nimport { DetailsHeader } from '../DetailsList/DetailsHeader';\nimport {\n  IDetailsHeader,\n  SelectAllVisibility,\n  IDetailsHeaderProps,\n  IColumnReorderHeaderProps,\n} from '../DetailsList/DetailsHeader.types';\nimport { IDetailsFooterProps } from '../DetailsList/DetailsFooter.types';\nimport { DetailsRowBase } from '../DetailsList/DetailsRow.base';\nimport { DetailsRow } from '../DetailsList/DetailsRow';\nimport { IDetailsRowProps } from '../DetailsList/DetailsRow.types';\nimport { IFocusZone, FocusZone, FocusZoneDirection, IFocusZoneProps } from '../../FocusZone';\nimport { IObjectWithKey, ISelection, Selection, SelectionMode, SelectionZone } from '../../Selection';\n\nimport { DragDropHelper } from '../../DragDrop';\nimport { IGroupedList, GroupedList, IGroupDividerProps, IGroupRenderProps } from '../../GroupedList';\nimport { List, IListProps, ScrollToMode } from '../../List';\nimport { withViewport } from '../../utilities/decorators/withViewport';\nimport { GetGroupCount } from '../../utilities/groupedList/GroupedListUtility';\nimport { DEFAULT_CELL_STYLE_PROPS } from './DetailsRow.styles';\nimport { CHECK_CELL_WIDTH as CHECKBOX_WIDTH } from './DetailsRowCheck.styles';\n// For every group level there is a GroupSpacer added. Importing this const to have the source value in one place.\nimport { SPACER_WIDTH as GROUP_EXPAND_WIDTH } from '../GroupedList/GroupSpacer';\nimport { composeRenderFunction, getId } from '@fluentui/utilities';\nimport { useConst } from '@fluentui/react-hooks';\nimport { IGroup } from '../GroupedList/index';\n\nconst getClassNames = classNamesFunction<IDetailsListStyleProps, IDetailsListStyles>();\n\nexport interface IDetailsListState {\n  focusedItemIndex: number;\n  lastWidth?: number;\n  lastSelectionMode?: SelectionMode;\n  adjustedColumns: IColumn[];\n  isCollapsed?: boolean;\n  isSizing?: boolean;\n  isSomeGroupExpanded?: boolean;\n  /**\n   * A unique object used to force-update the List when it changes.\n   */\n  version: {};\n  getDerivedStateFromProps(nextProps: IDetailsListProps, previousState: IDetailsListState): IDetailsListState;\n}\n\nconst MIN_COLUMN_WIDTH = 100; // this is the global min width\n\nconst DEFAULT_RENDERED_WINDOWS_AHEAD = 2;\nconst DEFAULT_RENDERED_WINDOWS_BEHIND = 2;\n\ntype IDetailsListInnerProps = Omit<IDetailsListProps, 'selection'> &\n  IDetailsListState & {\n    selection: ISelection;\n    dragDropHelper: DragDropHelper | undefined;\n    rootRef: React.RefObject<HTMLDivElement>;\n    listRef: React.RefObject<List>;\n    groupedListRef: React.RefObject<IGroupedList>;\n    focusZoneRef: React.RefObject<IFocusZone>;\n    headerRef: React.RefObject<IDetailsHeader>;\n    selectionZoneRef: React.RefObject<SelectionZone>;\n    onGroupExpandStateChanged: (isSomeGroupExpanded: boolean) => void;\n    onColumnIsSizingChanged: (column: IColumn, isSizing: boolean) => void;\n    onRowDidMount: (row: DetailsRowBase) => void;\n    onRowWillUnmount: (row: DetailsRowBase) => void;\n    onColumnResized: (resizingColumn: IColumn, newWidth: number, resizingColumnIndex: number) => void;\n    onColumnAutoResized: (column: IColumn, columnIndex: number) => void;\n    onToggleCollapse: (collapsed: boolean) => void;\n    onActiveRowChanged: (el?: HTMLElement, ev?: React.FocusEvent<HTMLElement>) => void;\n    onBlur: (event: React.FocusEvent<HTMLElement>) => void;\n    onRenderDefaultRow: (detailsRowProps: IDetailsRowProps) => JSX.Element;\n  };\n\n/**\n * Hooks-based implementation of DetailsList.\n * Since many existing consumers of DetailsList expect `ref` to return a `DetailsList`,\n * this inner component handles rendering while the outer maintains compatibility.\n */\nconst DetailsListInner: React.ComponentType<IDetailsListInnerProps> = (\n  props: IDetailsListInnerProps,\n): JSX.Element | null => {\n  const { selection } = props;\n\n  const {\n    ariaLabelForListHeader,\n    ariaLabelForSelectAllCheckbox,\n    ariaLabelForSelectionColumn,\n    className,\n    checkboxVisibility,\n    compact,\n    constrainMode,\n    dragDropEvents,\n    groups,\n    groupProps,\n    indentWidth,\n    items,\n    isPlaceholderData,\n    isHeaderVisible,\n    layoutMode,\n    onItemInvoked,\n    onItemContextMenu,\n    onColumnHeaderClick,\n    onColumnHeaderContextMenu,\n    selectionMode = selection.mode,\n    selectionPreservedOnEmptyClick,\n    selectionZoneProps,\n    ariaLabel,\n    ariaLabelForGrid,\n    rowElementEventMap,\n    shouldApplyApplicationRole = false,\n    getKey,\n    listProps,\n    usePageCache,\n    onShouldVirtualize,\n    viewport,\n    minimumPixelsForDrag,\n    getGroupHeight,\n    styles,\n    theme,\n    cellStyleProps = DEFAULT_CELL_STYLE_PROPS,\n    onRenderCheckbox,\n    useFastIcons,\n    dragDropHelper,\n    adjustedColumns,\n    isCollapsed,\n    isSizing,\n    isSomeGroupExpanded,\n    version,\n    rootRef,\n    listRef,\n    focusZoneRef,\n    columnReorderOptions,\n    groupedListRef,\n    headerRef,\n    onGroupExpandStateChanged,\n    onColumnIsSizingChanged,\n    onRowDidMount,\n    onRowWillUnmount,\n    disableSelectionZone,\n    onColumnResized,\n    onColumnAutoResized,\n    onToggleCollapse,\n    onActiveRowChanged,\n    onBlur,\n    rowElementEventMap: eventsToRegister,\n    onRenderMissingItem,\n    onRenderItemColumn,\n    getCellValueKey,\n    getRowAriaLabel,\n    getRowAriaDescribedBy,\n    checkButtonAriaLabel,\n    checkButtonGroupAriaLabel,\n    checkboxCellClassName,\n    useReducedRowRenderer,\n    enableUpdateAnimations,\n    enterModalSelectionOnTouch,\n    onRenderDefaultRow,\n    selectionZoneRef,\n  } = props;\n\n  const defaultRole = 'grid';\n  const role = props.role ? props.role : defaultRole;\n\n  const rowId = getId('row');\n\n  const groupNestingDepth = getGroupNestingDepth(groups);\n  const groupedDetailsListIndexMap = useGroupedDetailsListIndexMap(groups);\n\n  const additionalListProps = React.useMemo((): IListProps => {\n    return {\n      renderedWindowsAhead: isSizing ? 0 : DEFAULT_RENDERED_WINDOWS_AHEAD,\n      renderedWindowsBehind: isSizing ? 0 : DEFAULT_RENDERED_WINDOWS_BEHIND,\n      getKey,\n      version,\n      ...listProps,\n    };\n  }, [isSizing, getKey, version, listProps]);\n\n  let selectAllVisibility = SelectAllVisibility.none; // for SelectionMode.none\n  if (selectionMode === SelectionMode.single) {\n    selectAllVisibility = SelectAllVisibility.hidden;\n  }\n  if (selectionMode === SelectionMode.multiple) {\n    // if isCollapsedGroupSelectVisible is false, disable select all when the list has all collapsed groups\n    let isCollapsedGroupSelectVisible =\n      groupProps && groupProps.headerProps && groupProps.headerProps.isCollapsedGroupSelectVisible;\n    if (isCollapsedGroupSelectVisible === undefined) {\n      isCollapsedGroupSelectVisible = true;\n    }\n    const isSelectAllVisible = isCollapsedGroupSelectVisible || !groups || isSomeGroupExpanded;\n    selectAllVisibility = isSelectAllVisible ? SelectAllVisibility.visible : SelectAllVisibility.hidden;\n  }\n\n  if (checkboxVisibility === CheckboxVisibility.hidden) {\n    selectAllVisibility = SelectAllVisibility.none;\n  }\n\n  const defaultOnRenderDetailsHeader = React.useCallback(\n    (detailsHeaderProps: IDetailsHeaderProps): JSX.Element | null => {\n      return <DetailsHeader {...detailsHeaderProps} />;\n    },\n    [],\n  );\n\n  const defaultOnRenderDetailsFooter = React.useCallback((): JSX.Element | null => {\n    return null;\n  }, []);\n\n  const propsOnRenderDetailsHeader = props.onRenderDetailsHeader;\n\n  const onRenderDetailsHeader = React.useMemo(() => {\n    return propsOnRenderDetailsHeader\n      ? composeRenderFunction(propsOnRenderDetailsHeader, defaultOnRenderDetailsHeader)\n      : defaultOnRenderDetailsHeader;\n  }, [propsOnRenderDetailsHeader, defaultOnRenderDetailsHeader]);\n\n  const propsOnRenderDetailsFooter = props.onRenderDetailsFooter;\n\n  const onRenderDetailsFooter = React.useMemo(() => {\n    return propsOnRenderDetailsFooter\n      ? composeRenderFunction(propsOnRenderDetailsFooter, defaultOnRenderDetailsFooter)\n      : defaultOnRenderDetailsFooter;\n  }, [propsOnRenderDetailsFooter, defaultOnRenderDetailsFooter]);\n\n  const detailsFooterProps = React.useMemo((): IDetailsFooterProps => {\n    return {\n      columns: adjustedColumns,\n      groupNestingDepth,\n      selection,\n      selectionMode,\n      viewport,\n      checkboxVisibility,\n      indentWidth,\n      cellStyleProps,\n    };\n  }, [\n    adjustedColumns,\n    groupNestingDepth,\n    selection,\n    selectionMode,\n    viewport,\n    checkboxVisibility,\n    indentWidth,\n    cellStyleProps,\n  ]);\n\n  const columnReorderOnDragEnd = columnReorderOptions && columnReorderOptions.onDragEnd;\n\n  const onColumnDragEnd = React.useCallback(\n    (\n      {\n        dropLocation,\n      }: {\n        dropLocation?: ColumnDragEndLocation;\n      },\n      event: MouseEvent,\n    ): void => {\n      let finalDropLocation: ColumnDragEndLocation = ColumnDragEndLocation.outside;\n      if (columnReorderOnDragEnd) {\n        if (dropLocation && dropLocation !== ColumnDragEndLocation.header) {\n          finalDropLocation = dropLocation;\n        } else if (rootRef.current) {\n          const clientRect = rootRef.current.getBoundingClientRect();\n          if (\n            event.clientX > clientRect.left &&\n            event.clientX < clientRect.right &&\n            event.clientY > clientRect.top &&\n            event.clientY < clientRect.bottom\n          ) {\n            finalDropLocation = ColumnDragEndLocation.surface;\n          }\n        }\n        columnReorderOnDragEnd(finalDropLocation);\n      }\n    },\n    [columnReorderOnDragEnd, rootRef],\n  );\n\n  const columnReorderProps = React.useMemo((): IColumnReorderHeaderProps | undefined => {\n    if (columnReorderOptions) {\n      return {\n        ...columnReorderOptions,\n        onColumnDragEnd,\n      };\n    }\n  }, [columnReorderOptions, onColumnDragEnd]);\n\n  const rowCount = (isHeaderVisible ? 1 : 0) + GetGroupCount(groups) + (items ? items.length : 0);\n  const colCount =\n    (selectAllVisibility !== SelectAllVisibility.none ? 1 : 0) +\n    (adjustedColumns ? adjustedColumns.length : 0) +\n    (groups ? 1 : 0);\n\n  const classNames = React.useMemo(() => {\n    return getClassNames(styles, {\n      theme: theme!,\n      compact,\n      isFixed: layoutMode === DetailsListLayoutMode.fixedColumns,\n      isHorizontalConstrained: constrainMode === ConstrainMode.horizontalConstrained,\n      className,\n    });\n  }, [styles, theme, compact, layoutMode, constrainMode, className]);\n\n  const onRenderDetailsGroupFooter = groupProps && groupProps.onRenderFooter;\n\n  const finalOnRenderDetailsGroupFooter = React.useMemo(() => {\n    return onRenderDetailsGroupFooter\n      ? (groupFooterProps: IGroupDividerProps, defaultRender?: IRenderFunction<IGroupDividerProps>) => {\n          return onRenderDetailsGroupFooter(\n            {\n              ...groupFooterProps,\n              columns: adjustedColumns,\n              groupNestingDepth,\n              indentWidth,\n              selection,\n              selectionMode,\n              viewport,\n              checkboxVisibility,\n              cellStyleProps,\n            },\n            defaultRender,\n          );\n        }\n      : undefined;\n  }, [\n    onRenderDetailsGroupFooter,\n    adjustedColumns,\n    groupNestingDepth,\n    indentWidth,\n    selection,\n    selectionMode,\n    viewport,\n    checkboxVisibility,\n    cellStyleProps,\n  ]);\n\n  const onRenderDetailsGroupHeader = groupProps && groupProps.onRenderHeader;\n\n  const finalOnRenderDetailsGroupHeader = React.useMemo(() => {\n    return onRenderDetailsGroupHeader\n      ? (groupHeaderProps: IGroupDividerProps, defaultRender?: IRenderFunction<IGroupDividerProps>) => {\n          const { groupIndex } = groupHeaderProps;\n          const groupKey: string | undefined =\n            groupIndex !== undefined ? groupHeaderProps.groups?.[groupIndex]?.key : undefined;\n          const totalRowCount: number =\n            groupKey !== undefined && groupedDetailsListIndexMap[groupKey]\n              ? groupedDetailsListIndexMap[groupKey].totalRowCount\n              : 0;\n\n          return onRenderDetailsGroupHeader(\n            {\n              ...groupHeaderProps,\n              columns: adjustedColumns,\n              groupNestingDepth,\n              indentWidth,\n              selection,\n              selectionMode: checkboxVisibility !== CheckboxVisibility.hidden ? selectionMode : SelectionMode.none,\n              viewport,\n              checkboxVisibility,\n              cellStyleProps,\n              ariaColSpan: adjustedColumns.length,\n              ariaPosInSet: undefined,\n              ariaSetSize: undefined,\n              ariaRowCount: undefined,\n              ariaRowIndex: groupIndex !== undefined ? totalRowCount + (isHeaderVisible ? 1 : 0) : undefined,\n            },\n            defaultRender,\n          );\n        }\n      : (groupHeaderProps: IGroupDividerProps, defaultRender: IRenderFunction<IGroupDividerProps>) => {\n          const { groupIndex } = groupHeaderProps;\n          const groupKey: string | undefined =\n            groupIndex !== undefined ? groupHeaderProps.groups?.[groupIndex]?.key : undefined;\n          const totalRowCount: number =\n            groupKey !== undefined && groupedDetailsListIndexMap[groupKey]\n              ? groupedDetailsListIndexMap[groupKey].totalRowCount\n              : 0;\n\n          return defaultRender({\n            ...groupHeaderProps,\n            ariaColSpan: adjustedColumns.length,\n            ariaPosInSet: undefined,\n            ariaSetSize: undefined,\n            ariaRowCount: undefined,\n            ariaRowIndex: groupIndex !== undefined ? totalRowCount + (isHeaderVisible ? 1 : 0) : undefined,\n          });\n        };\n  }, [\n    onRenderDetailsGroupHeader,\n    adjustedColumns,\n    groupNestingDepth,\n    indentWidth,\n    isHeaderVisible,\n    selection,\n    selectionMode,\n    viewport,\n    checkboxVisibility,\n    cellStyleProps,\n    groupedDetailsListIndexMap,\n  ]);\n\n  const finalGroupProps = React.useMemo((): IGroupRenderProps | undefined => {\n    return {\n      ...groupProps,\n      role: role === defaultRole ? 'rowgroup' : 'presentation',\n      onRenderFooter: finalOnRenderDetailsGroupFooter,\n      onRenderHeader: finalOnRenderDetailsGroupHeader,\n      // pass through custom group header checkbox label\n      headerProps: {\n        selectAllButtonProps: {\n          'aria-label': checkButtonGroupAriaLabel,\n        },\n        ...groupProps?.headerProps,\n      },\n    };\n  }, [groupProps, finalOnRenderDetailsGroupFooter, finalOnRenderDetailsGroupHeader, checkButtonGroupAriaLabel, role]);\n\n  const sumColumnWidths = useConst(() =>\n    memoizeFunction((columns: IColumn[]) => {\n      let totalWidth: number = 0;\n\n      columns.forEach((column: IColumn) => (totalWidth += column.calculatedWidth || column.minWidth));\n\n      return totalWidth;\n    }),\n  );\n\n  const collapseAllVisibility = groupProps && groupProps.collapseAllVisibility;\n\n  const rowWidth = React.useMemo(() => {\n    return sumColumnWidths(adjustedColumns);\n  }, [adjustedColumns, sumColumnWidths]);\n\n  const onRenderCell = React.useCallback(\n    (nestingDepth: number, item: any, index: number, group?: IGroup): React.ReactNode => {\n      const finalOnRenderRow = props.onRenderRow\n        ? composeRenderFunction(props.onRenderRow, onRenderDefaultRow)\n        : onRenderDefaultRow;\n\n      const groupKey: string | undefined = group ? group.key : undefined;\n      const numOfGroupHeadersBeforeItem: number =\n        groupKey && groupedDetailsListIndexMap[groupKey]\n          ? groupedDetailsListIndexMap[groupKey].numOfGroupHeadersBeforeItem\n          : 0;\n\n      const rowRole = role === defaultRole ? undefined : 'presentation';\n\n      const rowProps: IDetailsRowProps = {\n        item: item,\n        itemIndex: index,\n        flatIndexOffset: (isHeaderVisible ? 2 : 1) + numOfGroupHeadersBeforeItem,\n        compact,\n        columns: adjustedColumns,\n        groupNestingDepth: nestingDepth,\n        id: `${rowId}-${index}`,\n        selectionMode,\n        selection,\n        onDidMount: onRowDidMount,\n        onWillUnmount: onRowWillUnmount,\n        onRenderItemColumn,\n        getCellValueKey,\n        eventsToRegister,\n        dragDropEvents,\n        dragDropHelper,\n        viewport,\n        checkboxVisibility,\n        collapseAllVisibility,\n        getRowAriaLabel,\n        getRowAriaDescribedBy,\n        checkButtonAriaLabel,\n        checkboxCellClassName,\n        useReducedRowRenderer,\n        indentWidth,\n        cellStyleProps,\n        onRenderDetailsCheckbox: onRenderCheckbox,\n        enableUpdateAnimations,\n        rowWidth,\n        useFastIcons,\n        role: rowRole,\n      };\n\n      if (!item) {\n        if (onRenderMissingItem) {\n          return onRenderMissingItem(index, rowProps);\n        }\n\n        return null;\n      }\n\n      return finalOnRenderRow(rowProps);\n    },\n    [\n      compact,\n      adjustedColumns,\n      selectionMode,\n      selection,\n      rowId,\n      onRowDidMount,\n      onRowWillUnmount,\n      onRenderItemColumn,\n      getCellValueKey,\n      eventsToRegister,\n      dragDropEvents,\n      dragDropHelper,\n      viewport,\n      checkboxVisibility,\n      collapseAllVisibility,\n      getRowAriaLabel,\n      getRowAriaDescribedBy,\n      isHeaderVisible,\n      checkButtonAriaLabel,\n      checkboxCellClassName,\n      useReducedRowRenderer,\n      indentWidth,\n      cellStyleProps,\n      onRenderCheckbox,\n      enableUpdateAnimations,\n      useFastIcons,\n      onRenderDefaultRow,\n      onRenderMissingItem,\n      props.onRenderRow,\n      rowWidth,\n      role,\n      groupedDetailsListIndexMap,\n    ],\n  );\n\n  const onRenderListCell = React.useCallback(\n    (nestingDepth: number): ((item: any, itemIndex: number) => React.ReactNode) => {\n      return (item: any, itemIndex: number): React.ReactNode => {\n        return onRenderCell(nestingDepth, item, itemIndex);\n      };\n    },\n    [onRenderCell],\n  );\n\n  const isRightArrow = React.useCallback(\n    (event: React.KeyboardEvent<HTMLElement>) => {\n      // eslint-disable-next-line deprecation/deprecation\n      return event.which === getRTLSafeKeyCode(KeyCodes.right, theme);\n    },\n    [theme],\n  );\n\n  const focusZoneProps: IFocusZoneProps = {\n    componentRef: focusZoneRef,\n    className: classNames.focusZone,\n    direction: FocusZoneDirection.vertical,\n    shouldEnterInnerZone: isRightArrow,\n    onActiveElementChanged: onActiveRowChanged,\n    shouldRaiseClicks: false,\n    onBlur: onBlur,\n  };\n\n  const list = groups ? (\n    <GroupedList\n      focusZoneProps={focusZoneProps}\n      componentRef={groupedListRef}\n      groups={groups}\n      groupProps={finalGroupProps}\n      items={items}\n      onRenderCell={onRenderCell}\n      role=\"presentation\"\n      selection={selection}\n      selectionMode={checkboxVisibility !== CheckboxVisibility.hidden ? selectionMode : SelectionMode.none}\n      dragDropEvents={dragDropEvents}\n      dragDropHelper={dragDropHelper}\n      eventsToRegister={rowElementEventMap}\n      listProps={additionalListProps}\n      onGroupExpandStateChanged={onGroupExpandStateChanged}\n      usePageCache={usePageCache}\n      onShouldVirtualize={onShouldVirtualize}\n      getGroupHeight={getGroupHeight}\n      compact={compact}\n    />\n  ) : (\n    <FocusZone {...focusZoneProps}>\n      <List\n        ref={listRef}\n        role=\"presentation\"\n        items={items}\n        onRenderCell={onRenderListCell(0)}\n        usePageCache={usePageCache}\n        onShouldVirtualize={onShouldVirtualize}\n        {...additionalListProps}\n      />\n    </FocusZone>\n  );\n\n  const onHeaderKeyDown = React.useCallback(\n    (ev: React.KeyboardEvent<HTMLElement>): void => {\n      // eslint-disable-next-line deprecation/deprecation\n      if (ev.which === KeyCodes.down) {\n        if (focusZoneRef.current && focusZoneRef.current.focus()) {\n          // select the first item in list after down arrow key event\n          // only if nothing was selected; otherwise start with the already-selected item\n          if (selection.getSelectedIndices().length === 0) {\n            selection.setIndexSelected(0, true, false);\n          }\n\n          ev.preventDefault();\n          ev.stopPropagation();\n        }\n      }\n    },\n    [selection, focusZoneRef],\n  );\n\n  const onContentKeyDown = React.useCallback(\n    (ev: React.KeyboardEvent<HTMLElement>): void => {\n      // eslint-disable-next-line deprecation/deprecation\n      if (ev.which === KeyCodes.up && !ev.altKey) {\n        if (headerRef.current && headerRef.current.focus()) {\n          ev.preventDefault();\n          ev.stopPropagation();\n        }\n      }\n    },\n    [headerRef],\n  );\n\n  return (\n    // If shouldApplyApplicationRole is true, role application will be applied to make arrow keys work\n    // with JAWS.\n    <div\n      ref={rootRef}\n      className={classNames.root}\n      data-automationid=\"DetailsList\"\n      data-is-scrollable=\"false\"\n      aria-label={ariaLabel}\n      {...(shouldApplyApplicationRole ? { role: 'application' } : {})}\n    >\n      <FocusRects />\n      <div\n        role={role}\n        aria-label={ariaLabelForGrid}\n        aria-rowcount={isPlaceholderData ? -1 : rowCount}\n        aria-colcount={colCount}\n        aria-readonly=\"true\"\n        aria-busy={isPlaceholderData}\n      >\n        <div onKeyDown={onHeaderKeyDown} role=\"presentation\" className={classNames.headerWrapper}>\n          {isHeaderVisible &&\n            onRenderDetailsHeader(\n              {\n                componentRef: headerRef,\n                selectionMode: selectionMode,\n                layoutMode: layoutMode!,\n                selection: selection,\n                columns: adjustedColumns,\n                onColumnClick: onColumnHeaderClick,\n                onColumnContextMenu: onColumnHeaderContextMenu,\n                onColumnResized: onColumnResized,\n                onColumnIsSizingChanged: onColumnIsSizingChanged,\n                onColumnAutoResized: onColumnAutoResized,\n                groupNestingDepth: groupNestingDepth,\n                isAllCollapsed: isCollapsed,\n                onToggleCollapseAll: onToggleCollapse,\n                ariaLabel: ariaLabelForListHeader,\n                ariaLabelForSelectAllCheckbox: ariaLabelForSelectAllCheckbox,\n                ariaLabelForSelectionColumn: ariaLabelForSelectionColumn,\n                selectAllVisibility: selectAllVisibility,\n                collapseAllVisibility: groupProps && groupProps.collapseAllVisibility,\n                viewport: viewport,\n                columnReorderProps: columnReorderProps,\n                minimumPixelsForDrag: minimumPixelsForDrag,\n                cellStyleProps: cellStyleProps,\n                checkboxVisibility,\n                indentWidth,\n                onRenderDetailsCheckbox: onRenderCheckbox,\n                rowWidth: sumColumnWidths(adjustedColumns),\n                useFastIcons,\n              },\n              onRenderDetailsHeader,\n            )}\n        </div>\n        <div onKeyDown={onContentKeyDown} role=\"presentation\" className={classNames.contentWrapper}>\n          {!disableSelectionZone ? (\n            <SelectionZone\n              ref={selectionZoneRef}\n              selection={selection}\n              selectionPreservedOnEmptyClick={selectionPreservedOnEmptyClick}\n              selectionMode={selectionMode}\n              onItemInvoked={onItemInvoked}\n              onItemContextMenu={onItemContextMenu}\n              enterModalOnTouch={enterModalSelectionOnTouch}\n              {...(selectionZoneProps || {})}\n            >\n              {list}\n            </SelectionZone>\n          ) : (\n            list\n          )}\n        </div>\n        {onRenderDetailsFooter({\n          ...detailsFooterProps,\n        })}\n      </div>\n    </div>\n  );\n};\n\n@withViewport\nexport class DetailsListBase extends React.Component<IDetailsListProps, IDetailsListState> implements IDetailsList {\n  public static defaultProps = {\n    layoutMode: DetailsListLayoutMode.justified,\n    selectionMode: SelectionMode.multiple,\n    constrainMode: ConstrainMode.horizontalConstrained,\n    checkboxVisibility: CheckboxVisibility.onHover,\n    isHeaderVisible: true,\n    compact: false,\n    useFastIcons: true,\n  };\n\n  // References\n  private _async: Async;\n  private _root = React.createRef<HTMLDivElement>();\n  private _header = React.createRef<IDetailsHeader>();\n  private _groupedList = React.createRef<IGroupedList>();\n  private _list = React.createRef<List>();\n  private _focusZone = React.createRef<IFocusZone>();\n  private _selectionZone = React.createRef<SelectionZone>();\n\n  private _selection: ISelection;\n  private _activeRows: { [key: string]: DetailsRowBase };\n  private _dragDropHelper: DragDropHelper | undefined;\n  private _initialFocusedIndex: number | undefined;\n\n  private _columnOverrides: {\n    [key: string]: IColumn;\n  };\n\n  public static getDerivedStateFromProps(\n    nextProps: IDetailsListProps,\n    previousState: IDetailsListState,\n  ): IDetailsListState {\n    return previousState.getDerivedStateFromProps(nextProps, previousState);\n  }\n\n  constructor(props: IDetailsListProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this._async = new Async(this);\n\n    this._activeRows = {};\n    this._columnOverrides = {};\n\n    this.state = {\n      focusedItemIndex: -1,\n      lastWidth: 0,\n      adjustedColumns: this._getAdjustedColumns(props, undefined),\n      isSizing: false,\n      isCollapsed: props.groupProps && props.groupProps.isAllGroupsCollapsed,\n      isSomeGroupExpanded: props.groupProps && !props.groupProps.isAllGroupsCollapsed,\n      version: {},\n      getDerivedStateFromProps: this._getDerivedStateFromProps,\n    };\n\n    this._selection =\n      props.selection ||\n      new Selection({\n        onSelectionChanged: undefined,\n        getKey: props.getKey,\n        selectionMode: props.selectionMode,\n      });\n\n    if (!this.props.disableSelectionZone) {\n      this._selection.setItems(props.items as IObjectWithKey[], false);\n    }\n\n    this._dragDropHelper = props.dragDropEvents\n      ? new DragDropHelper({\n          selection: this._selection,\n          minimumPixelsForDrag: props.minimumPixelsForDrag,\n        })\n      : undefined;\n    this._initialFocusedIndex = props.initialFocusedIndex;\n  }\n\n  public scrollToIndex(index: number, measureItem?: (itemIndex: number) => number, scrollToMode?: ScrollToMode): void {\n    this._list.current && this._list.current.scrollToIndex(index, measureItem, scrollToMode);\n    this._groupedList.current && this._groupedList.current.scrollToIndex(index, measureItem, scrollToMode);\n  }\n\n  public focusIndex(\n    index: number,\n    forceIntoFirstElement: boolean = false,\n    measureItem?: (itemIndex: number) => number,\n    scrollToMode?: ScrollToMode,\n  ): void {\n    const item = this.props.items[index];\n    if (item) {\n      this.scrollToIndex(index, measureItem, scrollToMode);\n\n      const itemKey = this._getItemKey(item, index);\n      const row = this._activeRows[itemKey];\n      if (row) {\n        this._setFocusToRow(row, forceIntoFirstElement);\n      }\n    }\n  }\n\n  public getStartItemIndexInView(): number {\n    if (this._list && this._list.current) {\n      return this._list.current.getStartItemIndexInView();\n    } else if (this._groupedList && this._groupedList.current) {\n      return this._groupedList.current.getStartItemIndexInView();\n    }\n    return 0;\n  }\n\n  public componentWillUnmount(): void {\n    if (this._dragDropHelper) {\n      // TODO If the DragDropHelper was passed via props, this will dispose it, which is incorrect behavior.\n      this._dragDropHelper.dispose();\n    }\n    this._async.dispose();\n  }\n\n  public componentDidUpdate(prevProps: IDetailsListProps, prevState: IDetailsListState) {\n    this._notifyColumnsResized();\n\n    if (this._initialFocusedIndex !== undefined) {\n      const item = this.props.items[this._initialFocusedIndex];\n      if (item) {\n        const itemKey = this._getItemKey(item, this._initialFocusedIndex);\n        const row = this._activeRows[itemKey];\n        if (row) {\n          this._setFocusToRowIfPending(row);\n        }\n      }\n    }\n\n    if (\n      this.props.items !== prevProps.items &&\n      this.props.items.length > 0 &&\n      this.state.focusedItemIndex !== -1 &&\n      !elementContains(this._root.current, document.activeElement as HTMLElement, false)\n    ) {\n      // Item set has changed and previously-focused item is gone.\n      // Set focus to item at index of previously-focused item if it is in range,\n      // else set focus to the last item.\n      const index =\n        this.state.focusedItemIndex < this.props.items.length\n          ? this.state.focusedItemIndex\n          : this.props.items.length - 1;\n      const item = this.props.items[index];\n      const itemKey = this._getItemKey(item, this.state.focusedItemIndex);\n      const row = this._activeRows[itemKey];\n      if (row) {\n        this._setFocusToRow(row);\n      } else {\n        this._initialFocusedIndex = index;\n      }\n    }\n    if (this.props.onDidUpdate) {\n      this.props.onDidUpdate(this);\n    }\n  }\n\n  public render(): JSX.Element {\n    return (\n      <DetailsListInner\n        {...this.props}\n        {...this.state}\n        selection={this._selection}\n        dragDropHelper={this._dragDropHelper}\n        rootRef={this._root}\n        listRef={this._list}\n        groupedListRef={this._groupedList}\n        focusZoneRef={this._focusZone}\n        headerRef={this._header}\n        selectionZoneRef={this._selectionZone}\n        onGroupExpandStateChanged={this._onGroupExpandStateChanged}\n        onColumnIsSizingChanged={this._onColumnIsSizingChanged}\n        onRowDidMount={this._onRowDidMount}\n        onRowWillUnmount={this._onRowWillUnmount}\n        onColumnResized={this._onColumnResized}\n        onColumnAutoResized={this._onColumnAutoResized}\n        onToggleCollapse={this._onToggleCollapse}\n        onActiveRowChanged={this._onActiveRowChanged}\n        onBlur={this._onBlur}\n        onRenderDefaultRow={this._onRenderRow}\n      />\n    );\n  }\n\n  public forceUpdate(): void {\n    super.forceUpdate();\n    this._forceListUpdates();\n  }\n\n  protected _onRenderRow = (\n    props: IDetailsRowProps,\n    defaultRender?: IRenderFunction<IDetailsRowProps>,\n  ): JSX.Element => {\n    return <DetailsRow {...props} />;\n  };\n\n  private _getDerivedStateFromProps = (\n    nextProps: IDetailsListProps,\n    previousState: IDetailsListState,\n  ): IDetailsListState => {\n    const {\n      checkboxVisibility,\n      items,\n      setKey,\n      selectionMode = this._selection.mode,\n      columns,\n      viewport,\n      compact,\n      dragDropEvents,\n    } = this.props;\n\n    const { isAllGroupsCollapsed = undefined } = this.props.groupProps || {};\n    const newViewportWidth = (nextProps.viewport && nextProps.viewport.width) || 0;\n    const oldViewportWidth = (viewport && viewport.width) || 0;\n    const shouldResetSelection = nextProps.setKey !== setKey || nextProps.setKey === undefined;\n    let shouldForceUpdates = false;\n\n    if (nextProps.layoutMode !== this.props.layoutMode) {\n      shouldForceUpdates = true;\n    }\n\n    let nextState = previousState;\n\n    if (shouldResetSelection) {\n      this._initialFocusedIndex = nextProps.initialFocusedIndex;\n      // reset focusedItemIndex when setKey changes\n      nextState = {\n        ...nextState,\n        focusedItemIndex: this._initialFocusedIndex !== undefined ? this._initialFocusedIndex : -1,\n      };\n    }\n\n    if (!this.props.disableSelectionZone && nextProps.items !== items) {\n      this._selection.setItems(nextProps.items, shouldResetSelection);\n    }\n\n    if (\n      nextProps.checkboxVisibility !== checkboxVisibility ||\n      nextProps.columns !== columns ||\n      newViewportWidth !== oldViewportWidth ||\n      nextProps.compact !== compact\n    ) {\n      shouldForceUpdates = true;\n    }\n\n    nextState = {\n      ...nextState,\n      ...this._adjustColumns(nextProps, nextState, true),\n    };\n\n    if (nextProps.selectionMode !== selectionMode) {\n      shouldForceUpdates = true;\n    }\n\n    if (\n      isAllGroupsCollapsed === undefined &&\n      nextProps.groupProps &&\n      nextProps.groupProps.isAllGroupsCollapsed !== undefined\n    ) {\n      nextState = {\n        ...nextState,\n        isCollapsed: nextProps.groupProps.isAllGroupsCollapsed,\n        isSomeGroupExpanded: !nextProps.groupProps.isAllGroupsCollapsed,\n      };\n    }\n\n    if (nextProps.dragDropEvents !== dragDropEvents) {\n      this._dragDropHelper && this._dragDropHelper.dispose();\n      this._dragDropHelper = nextProps.dragDropEvents\n        ? new DragDropHelper({\n            selection: this._selection,\n            minimumPixelsForDrag: nextProps.minimumPixelsForDrag,\n          })\n        : undefined;\n      shouldForceUpdates = true;\n    }\n\n    if (shouldForceUpdates) {\n      nextState = {\n        ...nextState,\n        version: {},\n      };\n    }\n\n    return nextState;\n  };\n\n  private _onGroupExpandStateChanged = (isSomeGroupExpanded: boolean): void => {\n    this.setState({ isSomeGroupExpanded: isSomeGroupExpanded });\n  };\n\n  private _onColumnIsSizingChanged = (column: IColumn, isSizing: boolean): void => {\n    this.setState({ isSizing: isSizing });\n  };\n\n  private _getGroupNestingDepth(): number {\n    const { groups } = this.props;\n    let level = 0;\n    let groupsInLevel = groups;\n\n    while (groupsInLevel && groupsInLevel.length > 0) {\n      level++;\n      groupsInLevel = groupsInLevel[0].children;\n    }\n\n    return level;\n  }\n\n  private _onRowDidMount = (row: DetailsRowBase): void => {\n    const { item, itemIndex } = row.props;\n    const itemKey = this._getItemKey(item, itemIndex);\n    this._activeRows[itemKey] = row; // this is used for column auto resize\n\n    this._setFocusToRowIfPending(row);\n\n    const { onRowDidMount } = this.props;\n    if (onRowDidMount) {\n      onRowDidMount(item, itemIndex);\n    }\n  };\n\n  private _setFocusToRowIfPending(row: DetailsRowBase): void {\n    const { itemIndex } = row.props;\n    if (this._initialFocusedIndex !== undefined && itemIndex === this._initialFocusedIndex) {\n      this._setFocusToRow(row);\n      delete this._initialFocusedIndex;\n    }\n  }\n\n  private _setFocusToRow(row: DetailsRowBase, forceIntoFirstElement: boolean = false): void {\n    if (this._selectionZone.current) {\n      this._selectionZone.current.ignoreNextFocus();\n    }\n    this._async.setTimeout((): void => {\n      row.focus(forceIntoFirstElement);\n    }, 0);\n  }\n\n  private _onRowWillUnmount = (row: DetailsRowBase): void => {\n    const { onRowWillUnmount } = this.props;\n\n    const { item, itemIndex } = row.props;\n    const itemKey = this._getItemKey(item, itemIndex);\n    delete this._activeRows[itemKey];\n\n    if (onRowWillUnmount) {\n      onRowWillUnmount(item, itemIndex);\n    }\n  };\n\n  private _onToggleCollapse = (collapsed: boolean): void => {\n    this.setState({\n      isCollapsed: collapsed,\n    });\n    if (this._groupedList.current) {\n      this._groupedList.current.toggleCollapseAll(collapsed);\n    }\n  };\n\n  private _forceListUpdates(): void {\n    if (this._groupedList.current) {\n      this._groupedList.current.forceUpdate();\n    }\n    if (this._list.current) {\n      this._list.current.forceUpdate();\n    }\n  }\n\n  private _notifyColumnsResized(): void {\n    this.state.adjustedColumns.forEach(column => {\n      if (column.onColumnResize) {\n        column.onColumnResize(column.currentWidth);\n      }\n    });\n  }\n\n  private _adjustColumns(\n    newProps: IDetailsListProps,\n    previousState: IDetailsListState,\n    forceUpdate?: boolean,\n    resizingColumnIndex?: number,\n  ): IDetailsListState {\n    const adjustedColumns = this._getAdjustedColumns(newProps, previousState, forceUpdate, resizingColumnIndex);\n    const { viewport } = this.props;\n    const viewportWidth = viewport && viewport.width ? viewport.width : 0;\n\n    return {\n      ...previousState,\n      adjustedColumns: adjustedColumns,\n      lastWidth: viewportWidth,\n    };\n  }\n\n  /** Returns adjusted columns, given the viewport size and layout mode. */\n  private _getAdjustedColumns(\n    newProps: IDetailsListProps,\n    previousState: IDetailsListState | undefined,\n    forceUpdate?: boolean,\n    resizingColumnIndex?: number,\n  ): IColumn[] {\n    const { items: newItems, layoutMode, selectionMode, viewport } = newProps;\n    const viewportWidth = viewport && viewport.width ? viewport.width : 0;\n    let { columns: newColumns } = newProps;\n\n    const columns = this.props ? this.props.columns : [];\n    const lastWidth = previousState ? previousState.lastWidth : -1;\n    const lastSelectionMode = previousState ? previousState.lastSelectionMode : undefined;\n\n    if (\n      !forceUpdate &&\n      lastWidth === viewportWidth &&\n      lastSelectionMode === selectionMode &&\n      (!columns || newColumns === columns)\n    ) {\n      return newColumns || [];\n    }\n\n    newColumns = newColumns || buildColumns(newItems, true);\n\n    let adjustedColumns: IColumn[];\n\n    if (layoutMode === DetailsListLayoutMode.fixedColumns) {\n      adjustedColumns = this._getFixedColumns(newColumns, viewportWidth, newProps);\n\n      // Preserve adjusted column calculated widths.\n      adjustedColumns.forEach(column => {\n        this._rememberCalculatedWidth(column, column.calculatedWidth!);\n      });\n    } else {\n      adjustedColumns = this._getJustifiedColumns(newColumns, viewportWidth, newProps);\n\n      adjustedColumns.forEach(column => {\n        this._getColumnOverride(column.key).currentWidth = column.calculatedWidth;\n      });\n    }\n\n    return adjustedColumns;\n  }\n\n  /** Builds a set of columns based on the given columns mixed with the current overrides. */\n  private _getFixedColumns(newColumns: IColumn[], viewportWidth: number, props: IDetailsListProps): IColumn[] {\n    const { selectionMode = this._selection.mode, checkboxVisibility, flexMargin, skipViewportMeasures } = this.props;\n    let remainingWidth = viewportWidth - (flexMargin || 0);\n    let sumProportionalWidth = 0;\n\n    newColumns.forEach((col: IColumn) => {\n      if (skipViewportMeasures || !col.flexGrow) {\n        remainingWidth -= col.maxWidth || col.minWidth || MIN_COLUMN_WIDTH;\n      } else {\n        remainingWidth -= col.minWidth || MIN_COLUMN_WIDTH;\n        sumProportionalWidth += col.flexGrow;\n      }\n\n      remainingWidth -= getPaddedWidth(col, props, true);\n    });\n\n    const rowCheckWidth =\n      selectionMode !== SelectionMode.none && checkboxVisibility !== CheckboxVisibility.hidden ? CHECKBOX_WIDTH : 0;\n    const groupExpandWidth = this._getGroupNestingDepth() * GROUP_EXPAND_WIDTH;\n    remainingWidth -= rowCheckWidth + groupExpandWidth;\n\n    let widthFraction = remainingWidth / sumProportionalWidth;\n\n    // Shrinks proportional columns to their max width and adds the remaining width to distribute to other columns.\n    if (!skipViewportMeasures) {\n      newColumns.forEach((column: IColumn) => {\n        const newColumn: IColumn = { ...column, ...this._columnOverrides[column.key] };\n\n        if (newColumn.flexGrow && newColumn.maxWidth) {\n          const fullWidth = newColumn.flexGrow * widthFraction + newColumn.minWidth;\n          const shrinkWidth = fullWidth - newColumn.maxWidth;\n\n          if (shrinkWidth > 0) {\n            remainingWidth += shrinkWidth;\n            sumProportionalWidth -= (shrinkWidth / (fullWidth - newColumn.minWidth)) * newColumn.flexGrow;\n          }\n        }\n      });\n    }\n\n    widthFraction = remainingWidth > 0 ? remainingWidth / sumProportionalWidth : 0;\n\n    return newColumns.map(column => {\n      const newColumn: IColumn = { ...column, ...this._columnOverrides[column.key] };\n\n      // Delay computation until viewport width is available.\n      if (!skipViewportMeasures && newColumn.flexGrow && remainingWidth <= 0) {\n        return newColumn;\n      }\n\n      if (!newColumn.calculatedWidth) {\n        if (!skipViewportMeasures && newColumn.flexGrow) {\n          // Assigns the proportion of the remaining extra width after all columns have met minimum widths.\n          newColumn.calculatedWidth = newColumn.minWidth + newColumn.flexGrow * widthFraction;\n          newColumn.calculatedWidth = Math.min(newColumn.calculatedWidth, newColumn.maxWidth || Number.MAX_VALUE);\n        } else {\n          newColumn.calculatedWidth = newColumn.maxWidth || newColumn.minWidth || MIN_COLUMN_WIDTH;\n        }\n      }\n\n      return newColumn;\n    });\n  }\n\n  /** Builds a set of columns to fix within the viewport width. */\n  private _getJustifiedColumns(newColumns: IColumn[], viewportWidth: number, props: IDetailsListProps): IColumn[] {\n    const { selectionMode = this._selection.mode, checkboxVisibility } = props;\n    const rowCheckWidth =\n      selectionMode !== SelectionMode.none && checkboxVisibility !== CheckboxVisibility.hidden ? CHECKBOX_WIDTH : 0;\n    const groupExpandWidth = this._getGroupNestingDepth() * GROUP_EXPAND_WIDTH;\n    let totalWidth = 0; // offset because we have one less inner padding.\n    let minimumWidth = 0;\n    const availableWidth = viewportWidth - (rowCheckWidth + groupExpandWidth);\n    const adjustedColumns: IColumn[] = newColumns.map((column, i) => {\n      const baseColumn = {\n        ...column,\n        calculatedWidth: column.minWidth || MIN_COLUMN_WIDTH,\n      };\n\n      const newColumn = {\n        ...baseColumn,\n        ...this._columnOverrides[column.key],\n      };\n\n      // eslint-disable-next-line deprecation/deprecation\n      if (!(baseColumn.isCollapsible || baseColumn.isCollapsable)) {\n        minimumWidth += getPaddedWidth(baseColumn, props);\n      }\n\n      totalWidth += getPaddedWidth(newColumn, props);\n\n      return newColumn;\n    });\n\n    if (minimumWidth > availableWidth) {\n      return adjustedColumns;\n    }\n\n    let lastIndex = adjustedColumns.length - 1;\n\n    // Shrink or remove collapsable columns.\n    while (lastIndex >= 0 && totalWidth > availableWidth) {\n      const column = adjustedColumns[lastIndex];\n\n      const minWidth = column.minWidth || MIN_COLUMN_WIDTH;\n      const overflowWidth = totalWidth - availableWidth;\n\n      // eslint-disable-next-line deprecation/deprecation\n      if (column.calculatedWidth! - minWidth >= overflowWidth || !(column.isCollapsible || column.isCollapsable)) {\n        const originalWidth = column.calculatedWidth!;\n        column.calculatedWidth = Math.max(column.calculatedWidth! - overflowWidth, minWidth);\n        totalWidth -= originalWidth - column.calculatedWidth;\n      } else {\n        totalWidth -= getPaddedWidth(column, props);\n        adjustedColumns.splice(lastIndex, 1);\n      }\n      lastIndex--;\n    }\n\n    // Then expand columns starting at the beginning, until we've filled the width.\n    for (let i = 0; i < adjustedColumns.length && totalWidth < availableWidth; i++) {\n      const column = adjustedColumns[i];\n      const isLast = i === adjustedColumns.length - 1;\n      const overrides = this._columnOverrides[column.key];\n      if (overrides && overrides.calculatedWidth && !isLast) {\n        continue;\n      }\n\n      const spaceLeft = availableWidth - totalWidth;\n      let increment: number;\n      if (isLast) {\n        increment = spaceLeft;\n      } else {\n        const maxWidth = column.maxWidth;\n        const minWidth = column.minWidth || maxWidth || MIN_COLUMN_WIDTH;\n        increment = maxWidth ? Math.min(spaceLeft, maxWidth - minWidth) : spaceLeft;\n      }\n\n      column.calculatedWidth = (column.calculatedWidth as number) + increment;\n      totalWidth += increment;\n    }\n\n    return adjustedColumns;\n  }\n\n  private _onColumnResized = (resizingColumn: IColumn, newWidth: number, resizingColumnIndex: number): void => {\n    const newCalculatedWidth = Math.max(resizingColumn.minWidth || MIN_COLUMN_WIDTH, newWidth);\n    if (this.props.onColumnResize) {\n      this.props.onColumnResize(resizingColumn, newCalculatedWidth, resizingColumnIndex);\n    }\n\n    this._rememberCalculatedWidth(resizingColumn, newCalculatedWidth);\n\n    this.setState({\n      ...this._adjustColumns(this.props, this.state, true, resizingColumnIndex),\n      version: {},\n    });\n  };\n\n  private _rememberCalculatedWidth(column: IColumn, newCalculatedWidth: number): void {\n    const overrides = this._getColumnOverride(column.key);\n    overrides.calculatedWidth = newCalculatedWidth;\n    overrides.currentWidth = newCalculatedWidth;\n  }\n\n  private _getColumnOverride(key: string): IColumn {\n    return (this._columnOverrides[key] = this._columnOverrides[key] || {});\n  }\n\n  /**\n   * Callback function when double clicked on the details header column resizer\n   * which will measure the column cells of all the active rows and resize the\n   * column to the max cell width.\n   *\n   * @param column - double clicked column definition\n   * @param columnIndex - double clicked column index\n   * TODO: min width 100 should be changed to const value and should be consistent with the\n   * value used on _onSizerMove method in DetailsHeader\n   */\n  private _onColumnAutoResized = (column: IColumn, columnIndex: number): void => {\n    let max = 0;\n    let count = 0;\n    const totalCount = Object.keys(this._activeRows).length;\n\n    for (const key in this._activeRows) {\n      if (this._activeRows.hasOwnProperty(key)) {\n        const currentRow = this._activeRows[key];\n        currentRow.measureCell(columnIndex, (width: number) => {\n          max = Math.max(max, width);\n          count++;\n          if (count === totalCount) {\n            this._onColumnResized(column, max, columnIndex);\n          }\n        });\n      }\n    }\n  };\n\n  /**\n   * Call back function when an element in FocusZone becomes active. It will translate it into item\n   * and call onActiveItemChanged callback if specified.\n   *\n   * @param row - element that became active in Focus Zone\n   * @param focus - event from Focus Zone\n   */\n  private _onActiveRowChanged = (el?: HTMLElement, ev?: React.FocusEvent<HTMLElement>): void => {\n    const { items, onActiveItemChanged } = this.props;\n\n    if (!el) {\n      return;\n    }\n\n    // Check and assign index only if the event was raised from any DetailsRow element\n    if (el.getAttribute('data-item-index')) {\n      const index = Number(el.getAttribute('data-item-index'));\n      if (index >= 0) {\n        if (onActiveItemChanged) {\n          onActiveItemChanged(items[index], index, ev);\n        }\n        this.setState({\n          focusedItemIndex: index,\n        });\n      }\n    }\n  };\n\n  private _onBlur = (event: React.FocusEvent<HTMLElement>): void => {\n    this.setState({\n      focusedItemIndex: -1,\n    });\n  };\n\n  private _getItemKey(item: any, itemIndex: number): string | number {\n    const { getKey } = this.props;\n\n    let itemKey: string | number | undefined = undefined;\n    if (item) {\n      itemKey = item.key;\n    }\n\n    if (getKey) {\n      itemKey = getKey(item, itemIndex);\n    }\n\n    if (!itemKey) {\n      itemKey = itemIndex;\n    }\n\n    return itemKey;\n  }\n}\n\nexport function buildColumns(\n  items: any[],\n  canResizeColumns?: boolean,\n  onColumnClick?: (ev: React.MouseEvent<HTMLElement>, column: IColumn) => void,\n  sortedColumnKey?: string,\n  isSortedDescending?: boolean,\n  groupedColumnKey?: string,\n  isMultiline?: boolean,\n) {\n  const columns: IColumn[] = [];\n\n  if (items && items.length) {\n    const firstItem = items[0];\n\n    for (const propName in firstItem) {\n      if (firstItem.hasOwnProperty(propName)) {\n        columns.push({\n          key: propName,\n          name: propName,\n          fieldName: propName,\n          minWidth: MIN_COLUMN_WIDTH,\n          maxWidth: 300,\n          isCollapsable: !!columns.length,\n          isCollapsible: !!columns.length,\n          isMultiline: isMultiline === undefined ? false : isMultiline,\n          isSorted: sortedColumnKey === propName,\n          isSortedDescending: !!isSortedDescending,\n          isRowHeader: false,\n          columnActionsMode: ColumnActionsMode.clickable,\n          isResizable: canResizeColumns,\n          onColumnClick: onColumnClick,\n          isGrouped: groupedColumnKey === propName,\n        });\n      }\n    }\n  }\n\n  return columns;\n}\n\nfunction getPaddedWidth(column: IColumn, props: IDetailsListProps, paddingOnly?: true): number {\n  const { cellStyleProps = DEFAULT_CELL_STYLE_PROPS } = props;\n\n  return (\n    (paddingOnly ? 0 : column.calculatedWidth!) +\n    cellStyleProps.cellLeftPadding +\n    cellStyleProps.cellRightPadding +\n    (column.isPadded ? cellStyleProps.cellExtraRightPadding : 0)\n  );\n}\n\nfunction getGroupNestingDepth(groups: IDetailsListProps['groups']): number {\n  let level = 0;\n  let groupsInLevel = groups;\n\n  while (groupsInLevel && groupsInLevel.length > 0) {\n    level++;\n    groupsInLevel = groupsInLevel[0].children;\n  }\n\n  return level;\n}\n\ninterface IGroupedDetailsListIndexMap {\n  [key: string]: { numOfGroupHeadersBeforeItem: number; totalRowCount: number };\n}\n\nfunction useGroupedDetailsListIndexMap(groups: IDetailsListProps['groups']) {\n  return React.useMemo((): IGroupedDetailsListIndexMap => {\n    const indexMap: IGroupedDetailsListIndexMap = {};\n    if (groups) {\n      let rowCount = 1;\n      let numGroupHeaders = 1;\n      for (const group of groups) {\n        const { key } = group;\n        indexMap[key] = { numOfGroupHeadersBeforeItem: numGroupHeaders, totalRowCount: rowCount };\n        numGroupHeaders++;\n        rowCount += group.count + 1;\n      }\n    }\n    return indexMap;\n  }, [groups]);\n}\n","import { IDetailsListStyleProps, IDetailsListStyles } from './DetailsList.types';\nimport { getGlobalClassNames } from '../../Styling';\n\nconst GlobalClassNames = {\n  root: 'ms-DetailsList',\n  compact: 'ms-DetailsList--Compact',\n  contentWrapper: 'ms-DetailsList-contentWrapper',\n  headerWrapper: 'ms-DetailsList-headerWrapper',\n  isFixed: 'is-fixed',\n  isHorizontalConstrained: 'is-horizontalConstrained',\n  listCell: 'ms-List-cell',\n};\n\nexport const getStyles = (props: IDetailsListStyleProps): IDetailsListStyles => {\n  const { theme, className, isHorizontalConstrained, compact, isFixed } = props;\n  const { semanticColors } = theme;\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  return {\n    root: [\n      classNames.root,\n      theme.fonts.small,\n      {\n        position: 'relative',\n        color: semanticColors.listText,\n        selectors: {\n          [`& .${classNames.listCell}`]: {\n            minHeight: 38,\n            wordBreak: 'break-word',\n          },\n        },\n      },\n\n      isFixed && classNames.isFixed,\n\n      compact && [\n        classNames.compact,\n        {\n          selectors: {\n            [`.${classNames.listCell}`]: {\n              minHeight: 32,\n            },\n          },\n        },\n      ],\n\n      isHorizontalConstrained && [\n        classNames.isHorizontalConstrained,\n        {\n          overflowX: 'auto',\n          overflowY: 'visible',\n          WebkitOverflowScrolling: 'touch',\n        },\n      ],\n\n      className,\n    ],\n\n    focusZone: [\n      {\n        display: 'inline-block',\n        minWidth: '100%',\n        minHeight: 1,\n      },\n    ],\n    headerWrapper: classNames.headerWrapper,\n    contentWrapper: classNames.contentWrapper,\n  };\n};\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { IDetailsListProps, IDetailsListStyleProps, IDetailsListStyles } from './DetailsList.types';\nimport { DetailsListBase } from './DetailsList.base';\nimport { getStyles } from './DetailsList.styles';\n\nexport { IDetailsListProps };\n\nexport const DetailsList: React.FunctionComponent<IDetailsListProps> = styled<\n  IDetailsListProps,\n  IDetailsListStyleProps,\n  IDetailsListStyles\n>(DetailsListBase, getStyles, undefined, {\n  scope: 'DetailsList',\n});\n","import * as React from 'react';\nimport { TooltipHostBase } from './TooltipHost.base';\nimport { TooltipDelay, ITooltipProps } from './Tooltip.types';\nimport { ICalloutProps } from '../../Callout';\nimport { DirectionalHint } from '../../common/DirectionalHint';\nimport { IRefObject, IStyleFunctionOrObject } from '../../Utilities';\nimport { IStyle, ITheme } from '../../Styling';\n\n/**\n * {@docCategory Tooltip}\n */\nexport interface ITooltipHost {\n  /**\n   * Shows the tooltip.\n   */\n  show: () => void;\n\n  /**\n   * Dismisses the tooltip.\n   */\n  dismiss: () => void;\n}\n\n/**\n * {@docCategory Tooltip}\n */\nexport enum TooltipOverflowMode {\n  /** Only show tooltip if parent DOM element is overflowing */\n  Parent,\n\n  /**\n   * Only show tooltip if tooltip host's content is overflowing.\n   * Note that this does not check the children for overflow, only the TooltipHost root.\n   */\n  Self,\n}\n\n/**\n * TooltipHost props. Note that native props (such as `id`, `className`, and `aria-` props) are\n * passed through to the Tooltip itself, rather than being used on the host element.\n * {@docCategory Tooltip}\n */\nexport interface ITooltipHostProps extends React.HTMLAttributes<HTMLDivElement | TooltipHostBase> {\n  /**\n   * Optional callback to access the ITooltipHost interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: IRefObject<ITooltipHost>;\n\n  /**\n   * Additional properties to pass through for Callout.\n   */\n  calloutProps?: ICalloutProps;\n\n  /**\n   * Number of milliseconds to delay closing the tooltip, so that the user has time to hover over\n   * the tooltip and interact with it. Hovering over the tooltip will count as hovering over the\n   * host, so that the tooltip will stay open if the user is actively interacting with it.\n   */\n  closeDelay?: number;\n\n  /**\n   * Content to display in the Tooltip.\n   */\n  content?: string | JSX.Element | JSX.Element[];\n\n  /**\n   * Length of delay before showing the tooltip on hover.\n   * @defaultvalue TooltipDelay.medium\n   */\n  delay?: TooltipDelay;\n\n  /**\n   * How the tooltip should be anchored to its `targetElement`.\n   * @defaultvalue DirectionalHint.topCenter\n   */\n  directionalHint?: DirectionalHint;\n\n  /**\n   * How the element should be positioned in RTL layouts.\n   * If not specified, a mirror of `directionalHint` will be used.\n   */\n  directionalHintForRTL?: DirectionalHint;\n\n  /**\n   * Class name to apply to tooltip host.\n   */\n  hostClassName?: string;\n\n  /**\n   * Class name to apply to the *tooltip itself*, not the host.\n   * To apply a class to the host, use `hostClassName` or `styles.root`.\n   */\n  className?: string;\n\n  /**\n   * If this is unset (the default), the tooltip is always shown even if there's no overflow.\n   *\n   * If set, only show the tooltip if the specified element (`Self` or `Parent`) has overflow.\n   * When set to `Parent`, the parent element is also used as the tooltip's target element.\n   *\n   * Note that even with `Self` mode, the TooltipHost *does not* check whether any children have overflow.\n   */\n  overflowMode?: TooltipOverflowMode;\n\n  /**\n   * Whether or not to mark the TooltipHost root element as described by the tooltip.\n   * If not specified, the caller should pass an `id` to the TooltipHost (to be passed through to\n   * the Tooltip) and mark the appropriate element as `aria-describedby` the `id`.\n   * @defaultvalue true\n   */\n  setAriaDescribedBy?: boolean;\n\n  /**\n   * Additional properties to pass through for Tooltip.\n   */\n  tooltipProps?: ITooltipProps;\n\n  /**\n   * Optional ID to pass through to the tooltip (not used on the host itself).\n   * Auto-generated if not provided.\n   */\n  id?: string;\n\n  /**\n   * Call to provide customized styling that will layer on top of the variant rules.\n   */\n  styles?: IStyleFunctionOrObject<ITooltipHostStyleProps, ITooltipHostStyles>;\n\n  /**\n   * Theme provided by higher-order component.\n   */\n  theme?: ITheme;\n\n  /**\n   * Notifies when tooltip becomes visible or hidden, whatever the trigger was.\n   */\n  onTooltipToggle?(isTooltipVisible: boolean): void;\n}\n\n/**\n * {@docCategory Tooltip}\n */\nexport interface ITooltipHostStyleProps {\n  theme: ITheme;\n  className?: string;\n}\n\n/**\n * {@docCategory Tooltip}\n */\nexport interface ITooltipHostStyles {\n  /**\n   * Style for the host wrapper element.\n   */\n  root: IStyle;\n}\n","import * as React from 'react';\nimport { TooltipBase } from './Tooltip.base';\nimport { ICalloutProps } from '../../Callout';\nimport { IRenderFunction } from '../../Utilities';\nimport { DirectionalHint } from '../../common/DirectionalHint';\nimport { IStyle, ITheme } from '../../Styling';\nimport { IRefObject, IStyleFunctionOrObject } from '../../Utilities';\n\n/**\n * {@docCategory Tooltip}\n */\nexport interface ITooltip {}\n\n/**\n * {@docCategory Tooltip}\n */\nexport interface ITooltipProps extends React.HTMLAttributes<HTMLDivElement | TooltipBase> {\n  /**\n   * Optional callback to access the ITooltip interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: IRefObject<ITooltip>;\n\n  /**\n   * Properties to pass through for Callout.\n   * @defaultvalue `{ isBeakVisible: true, beakWidth: 16, gapSpace: 0, setInitialFocus: true, doNotLayer: false }`\n   */\n  calloutProps?: ICalloutProps;\n\n  /**\n   * Content to be passed to the tooltip\n   */\n  content?: string | JSX.Element | JSX.Element[];\n\n  /**\n   * Render function to populate tooltip content.\n   */\n  onRenderContent?: IRenderFunction<ITooltipProps>;\n\n  /**\n   * Length of delay. Set to `TooltipDelay.zero` if you do not want a delay.\n   * @defaultvalue TooltipDelay.medium\n   */\n  delay?: TooltipDelay;\n\n  /**\n   * Max width of tooltip\n   * @defaultvalue 364px\n   */\n  maxWidth?: string | null;\n\n  /**\n   * Element to anchor the Tooltip to.\n   */\n  targetElement?: HTMLElement;\n\n  /**\n   * How the tooltip should be anchored to its `targetElement`.\n   * @defaultvalue DirectionalHint.topCenter\n   */\n  directionalHint?: DirectionalHint;\n\n  /**\n   * How the element should be positioned in RTL layouts.\n   * If not specified, a mirror of `directionalHint` will be used instead\n   */\n  directionalHintForRTL?: DirectionalHint;\n\n  /**\n   * Theme provided by higher-order component.\n   */\n  theme?: ITheme;\n\n  /**\n   * Call to provide customized styling that will layer on top of the variant rules.\n   */\n  styles?: IStyleFunctionOrObject<ITooltipStyleProps, ITooltipStyles>;\n}\n\n/**\n * {@docCategory Tooltip}\n */\nexport enum TooltipDelay {\n  zero = 0,\n  /** 300 ms delay before showng the tooltip */\n  medium = 1,\n  /** 500 ms delay before showing the tooltip */\n  long = 2,\n}\n\n/**\n * {@docCategory Tooltip}\n */\nexport interface ITooltipStyleProps {\n  theme: ITheme;\n\n  className?: string;\n\n  /**\n   * Delay before tooltip appears.\n   * @deprecated Delay logic moved to TooltipHost vs relying on animation delay.\n   */\n  delay?: TooltipDelay;\n\n  /**\n   * Maximum width of tooltip.\n   */\n  maxWidth?: string;\n\n  /**\n   * The gap between the Callout and the target\n   * @defaultvalue 0\n   */\n  gapSpace?: number;\n\n  /**\n   * The width of the Callout's beak\n   * @defaultvalue 16\n   */\n  beakWidth?: number;\n}\n\n/**\n * {@docCategory Tooltip}\n */\nexport interface ITooltipStyles {\n  /**\n   * Style for the root element.\n   */\n  root: IStyle;\n\n  /**\n   * Style for the content element.\n   */\n  content: IStyle;\n\n  /**\n   * Style for the subtext element.\n   */\n  subText: IStyle;\n}\n","import * as React from 'react';\nimport { classNamesFunction, divProperties, getNativeProps } from '../../Utilities';\nimport { IProcessedStyleSet } from '../../Styling';\nimport { ITooltipProps, ITooltipStyleProps, ITooltipStyles } from './Tooltip.types';\nimport { Callout } from '../../Callout';\nimport { DirectionalHint } from '../../common/DirectionalHint';\n\nconst getClassNames = classNamesFunction<ITooltipStyleProps, ITooltipStyles>();\n\nexport class TooltipBase extends React.Component<ITooltipProps, any> {\n  // Specify default props values\n  public static defaultProps: Partial<ITooltipProps> = {\n    directionalHint: DirectionalHint.topCenter,\n    maxWidth: '364px',\n    calloutProps: {\n      isBeakVisible: true,\n      beakWidth: 16,\n      gapSpace: 0,\n      setInitialFocus: true,\n      doNotLayer: false,\n    },\n  };\n\n  private _classNames: IProcessedStyleSet<ITooltipStyles>;\n\n  public render(): JSX.Element {\n    const {\n      className,\n      calloutProps,\n      directionalHint,\n      directionalHintForRTL,\n      styles,\n      id,\n      maxWidth,\n      onRenderContent = this._onRenderContent,\n      targetElement,\n      theme,\n    } = this.props;\n\n    this._classNames = getClassNames(styles!, {\n      theme: theme!,\n      className: className || (calloutProps && calloutProps.className),\n      beakWidth: calloutProps && calloutProps.beakWidth,\n      gapSpace: calloutProps && calloutProps.gapSpace,\n      maxWidth: maxWidth!,\n    });\n\n    return (\n      <Callout\n        target={targetElement}\n        directionalHint={directionalHint}\n        directionalHintForRTL={directionalHintForRTL}\n        {...calloutProps}\n        {...getNativeProps(this.props, divProperties, ['id'])} // omitting ID due to it being used in the div below\n        className={this._classNames.root}\n      >\n        <div\n          className={this._classNames.content}\n          id={id}\n          role=\"tooltip\"\n          onMouseEnter={this.props.onMouseEnter}\n          onMouseLeave={this.props.onMouseLeave}\n        >\n          {onRenderContent(this.props, this._onRenderContent)}\n        </div>\n      </Callout>\n    );\n  }\n\n  private _onRenderContent = (props: ITooltipProps): JSX.Element => {\n    if (typeof props.content === 'string') {\n      return <p className={this._classNames.subText}>{props.content}</p>;\n    } else {\n      return <div className={this._classNames.subText}>{props.content}</div>;\n    }\n  };\n}\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { TooltipBase } from './Tooltip.base';\nimport { ITooltipProps, ITooltipStyleProps, ITooltipStyles } from './Tooltip.types';\nimport { getStyles } from './Tooltip.styles';\n\nexport const Tooltip: React.FunctionComponent<ITooltipProps> = styled<\n  ITooltipProps,\n  ITooltipStyleProps,\n  ITooltipStyles\n>(TooltipBase, getStyles, undefined, {\n  scope: 'Tooltip',\n});\n","import { ITooltipStyleProps, ITooltipStyles } from './Tooltip.types';\nimport { AnimationClassNames } from '../../Styling';\n\nexport const getStyles = (props: ITooltipStyleProps): ITooltipStyles => {\n  const { className, beakWidth = 16, gapSpace = 0, maxWidth, theme } = props;\n  const { semanticColors, fonts, effects } = theme;\n\n  // The math here is done to account for the 45 degree rotation of the beak\n  // and sub-pixel rounding that differs across browsers, which is more noticeable when\n  // the device pixel ratio is larger\n  const tooltipGapSpace = -(Math.sqrt((beakWidth * beakWidth) / 2) + gapSpace) + 1 / window.devicePixelRatio;\n\n  return {\n    root: [\n      'ms-Tooltip',\n      theme.fonts.medium,\n      AnimationClassNames.fadeIn200,\n      {\n        background: semanticColors.menuBackground,\n        boxShadow: effects.elevation8,\n        padding: '8px',\n        maxWidth: maxWidth,\n        selectors: {\n          ':after': {\n            content: `''`,\n            position: 'absolute',\n            bottom: tooltipGapSpace,\n            left: tooltipGapSpace,\n            right: tooltipGapSpace,\n            top: tooltipGapSpace,\n            zIndex: 0,\n          },\n        },\n      },\n      className,\n    ],\n    content: [\n      'ms-Tooltip-content',\n      fonts.small,\n      {\n        position: 'relative',\n        zIndex: 1,\n        color: semanticColors.menuItemText,\n        wordWrap: 'break-word',\n        overflowWrap: 'break-word',\n        overflow: 'hidden',\n      },\n    ],\n    subText: [\n      'ms-Tooltip-subtext',\n      {\n        // Using inherit here to avoid unintentional global overrides of the <p> tag.\n        fontSize: 'inherit',\n        fontWeight: 'inherit',\n        color: 'inherit',\n        margin: 0,\n      },\n    ],\n  };\n};\n","import * as React from 'react';\nimport { hiddenContentStyle } from '../../Styling';\nimport {\n  initializeComponentRef,\n  Async,\n  divProperties,\n  getNativeProps,\n  getId,\n  assign,\n  hasOverflow,\n  portalContainsElement,\n  classNamesFunction,\n  KeyCodes,\n} from '../../Utilities';\nimport {\n  ITooltipHostProps,\n  TooltipOverflowMode,\n  ITooltipHostStyles,\n  ITooltipHostStyleProps,\n  ITooltipHost,\n} from './TooltipHost.types';\nimport { Tooltip } from './Tooltip';\nimport { TooltipDelay } from './Tooltip.types';\n\nexport interface ITooltipHostState {\n  isAriaPlaceholderRendered: boolean;\n  isTooltipVisible: boolean;\n}\n\nconst getClassNames = classNamesFunction<ITooltipHostStyleProps, ITooltipHostStyles>();\n\nexport class TooltipHostBase extends React.Component<ITooltipHostProps, ITooltipHostState> implements ITooltipHost {\n  public static defaultProps = {\n    delay: TooltipDelay.medium,\n  };\n\n  private static _currentVisibleTooltip: ITooltipHost | undefined;\n\n  // The wrapping div that gets the hover events\n  private _tooltipHost = React.createRef<HTMLDivElement>();\n\n  private _classNames: { [key in keyof ITooltipHostStyles]: string };\n  private _async: Async;\n  private _dismissTimerId: number;\n  private _openTimerId: number;\n  private _defaultTooltipId = getId('tooltip');\n\n  // Constructor\n  constructor(props: ITooltipHostProps) {\n    super(props);\n\n    initializeComponentRef(this);\n\n    this.state = {\n      isAriaPlaceholderRendered: false,\n      isTooltipVisible: false,\n    };\n\n    this._async = new Async(this);\n  }\n\n  // Render\n  public render(): JSX.Element {\n    const {\n      calloutProps,\n      children,\n      content,\n      directionalHint,\n      directionalHintForRTL,\n      hostClassName: className,\n      id,\n      setAriaDescribedBy = true,\n      tooltipProps,\n      styles,\n      theme,\n    } = this.props;\n\n    this._classNames = getClassNames(styles!, {\n      theme: theme!,\n      className,\n    });\n\n    const { isAriaPlaceholderRendered, isTooltipVisible } = this.state;\n    const tooltipId = id || this._defaultTooltipId;\n    const isContentPresent = !!(\n      content ||\n      (tooltipProps && tooltipProps.onRenderContent && tooltipProps.onRenderContent())\n    );\n    const showTooltip = isTooltipVisible && isContentPresent;\n    const ariaDescribedBy = setAriaDescribedBy && isTooltipVisible && isContentPresent ? tooltipId : undefined;\n\n    return (\n      <div\n        className={this._classNames.root}\n        ref={this._tooltipHost}\n        {...{ onFocusCapture: this._onTooltipMouseEnter }}\n        {...{ onBlurCapture: this._hideTooltip }}\n        onMouseEnter={this._onTooltipMouseEnter}\n        onMouseLeave={this._onTooltipMouseLeave}\n        onKeyDown={this._onTooltipKeyDown}\n        aria-describedby={ariaDescribedBy}\n      >\n        {children}\n        {showTooltip && (\n          <Tooltip\n            id={tooltipId}\n            content={content}\n            targetElement={this._getTargetElement()}\n            directionalHint={directionalHint}\n            directionalHintForRTL={directionalHintForRTL}\n            calloutProps={assign({}, calloutProps, {\n              onDismiss: this._hideTooltip,\n              onMouseEnter: this._onTooltipMouseEnter,\n              onMouseLeave: this._onTooltipMouseLeave,\n            })}\n            onMouseEnter={this._onTooltipMouseEnter}\n            onMouseLeave={this._onTooltipMouseLeave}\n            {...getNativeProps(this.props, divProperties)}\n            {...tooltipProps}\n          />\n        )}\n        {isAriaPlaceholderRendered && (\n          <div id={tooltipId} style={hiddenContentStyle as React.CSSProperties}>\n            {content}\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  public componentWillUnmount(): void {\n    if (TooltipHostBase._currentVisibleTooltip && TooltipHostBase._currentVisibleTooltip === this) {\n      TooltipHostBase._currentVisibleTooltip = undefined;\n    }\n\n    this._async.dispose();\n  }\n\n  public show = (): void => {\n    this._toggleTooltip(true);\n  };\n\n  public dismiss = (): void => {\n    this._hideTooltip();\n  };\n\n  private _getTargetElement = (): HTMLElement | undefined => {\n    if (!this._tooltipHost.current) {\n      return undefined;\n    }\n\n    const { overflowMode } = this.props;\n\n    // Select target element based on overflow mode. For parent mode, you want to position the tooltip relative\n    // to the parent element, otherwise it might look off.\n    if (overflowMode !== undefined) {\n      switch (overflowMode) {\n        case TooltipOverflowMode.Parent:\n          return this._tooltipHost.current.parentElement!;\n\n        case TooltipOverflowMode.Self:\n          return this._tooltipHost.current;\n      }\n    }\n\n    return this._tooltipHost.current;\n  };\n\n  // Show Tooltip\n  private _onTooltipMouseEnter = (ev: any): void => {\n    const { overflowMode, delay } = this.props;\n\n    if (TooltipHostBase._currentVisibleTooltip && TooltipHostBase._currentVisibleTooltip !== this) {\n      TooltipHostBase._currentVisibleTooltip.dismiss();\n    }\n    TooltipHostBase._currentVisibleTooltip = this;\n\n    if (overflowMode !== undefined) {\n      const overflowElement = this._getTargetElement();\n      if (overflowElement && !hasOverflow(overflowElement)) {\n        return;\n      }\n    }\n\n    if (ev.target && portalContainsElement(ev.target as HTMLElement, this._getTargetElement())) {\n      // Do not show tooltip when target is inside a portal relative to TooltipHost.\n      return;\n    }\n\n    this._clearDismissTimer();\n    this._clearOpenTimer();\n\n    if (delay !== TooltipDelay.zero) {\n      this.setState({ isAriaPlaceholderRendered: true });\n      const delayTime = this._getDelayTime(delay!); // non-null assertion because we set it in `defaultProps`\n\n      this._openTimerId = this._async.setTimeout(() => {\n        this._toggleTooltip(true);\n      }, delayTime);\n    } else {\n      this._toggleTooltip(true);\n    }\n  };\n\n  // Hide Tooltip\n  private _onTooltipMouseLeave = (ev: any): void => {\n    const { closeDelay } = this.props;\n\n    this._clearDismissTimer();\n    this._clearOpenTimer();\n\n    if (closeDelay) {\n      this._dismissTimerId = this._async.setTimeout(() => {\n        this._toggleTooltip(false);\n      }, closeDelay);\n    } else {\n      this._toggleTooltip(false);\n    }\n\n    if (TooltipHostBase._currentVisibleTooltip === this) {\n      TooltipHostBase._currentVisibleTooltip = undefined;\n    }\n  };\n\n  private _onTooltipKeyDown = (ev: React.KeyboardEvent<HTMLElement>): void => {\n    // eslint-disable-next-line deprecation/deprecation\n    if ((ev.which === KeyCodes.escape || ev.ctrlKey) && this.state.isTooltipVisible) {\n      this._hideTooltip();\n      ev.stopPropagation();\n    }\n  };\n\n  private _clearDismissTimer = (): void => {\n    this._async.clearTimeout(this._dismissTimerId);\n  };\n\n  private _clearOpenTimer = (): void => {\n    this._async.clearTimeout(this._openTimerId);\n  };\n\n  // Hide Tooltip\n  private _hideTooltip = (): void => {\n    this._clearOpenTimer();\n    this._clearDismissTimer();\n    this._toggleTooltip(false);\n  };\n\n  private _toggleTooltip = (isTooltipVisible: boolean): void => {\n    if (this.state.isTooltipVisible !== isTooltipVisible) {\n      this.setState(\n        { isAriaPlaceholderRendered: false, isTooltipVisible },\n        () => this.props.onTooltipToggle && this.props.onTooltipToggle(isTooltipVisible),\n      );\n    }\n  };\n\n  private _getDelayTime = (delay: TooltipDelay): number => {\n    switch (delay) {\n      case TooltipDelay.medium:\n        return 300;\n      case TooltipDelay.long:\n        return 500;\n      default:\n        return 0;\n    }\n  };\n}\n","/**\n * Detects whether an element's content has horizontal overflow\n *\n * @public\n * @param element - Element to check for overflow\n * @returns True if element's content overflows\n */\nexport function hasHorizontalOverflow(element: HTMLElement): boolean {\n  return element.clientWidth < element.scrollWidth;\n}\n\n/**\n * Detects whether an element's content has vertical overflow\n *\n * @public\n * @param element - Element to check for overflow\n * @returns True if element's content overflows\n */\nexport function hasVerticalOverflow(element: HTMLElement): boolean {\n  return element.clientHeight < element.scrollHeight;\n}\n\n/**\n * Detects whether an element's content has overflow in any direction\n *\n * @public\n * @param element - Element to check for overflow\n * @returns True if element's content overflows\n */\nexport function hasOverflow(element: HTMLElement): boolean {\n  return hasHorizontalOverflow(element) || hasVerticalOverflow(element);\n}\n","import { ITooltipHostStyleProps, ITooltipHostStyles } from './TooltipHost.types';\nimport { getGlobalClassNames } from '../../Styling';\n\nconst GlobalClassNames = {\n  root: 'ms-TooltipHost',\n  ariaPlaceholder: 'ms-TooltipHost-aria-placeholder',\n};\n\nexport const getStyles = (props: ITooltipHostStyleProps): ITooltipHostStyles => {\n  const { className, theme } = props;\n  const classNames = getGlobalClassNames(GlobalClassNames, theme);\n\n  return {\n    root: [\n      classNames.root,\n      {\n        display: 'inline',\n      },\n      className,\n    ],\n  };\n};\n","import * as React from 'react';\nimport { styled } from '../../Utilities';\nimport { TooltipHostBase } from './TooltipHost.base';\nimport { ITooltipHostProps, ITooltipHostStyleProps, ITooltipHostStyles } from './TooltipHost.types';\nimport { getStyles } from './TooltipHost.styles';\n\nexport const TooltipHost: React.FunctionComponent<ITooltipHostProps> = styled<\n  ITooltipHostProps,\n  ITooltipHostStyleProps,\n  ITooltipHostStyles\n>(TooltipHostBase, getStyles, undefined, {\n  scope: 'TooltipHost',\n});\n"],"sourceRoot":""}