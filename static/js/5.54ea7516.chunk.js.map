{"version":3,"sources":["pages/Login/Login.jsx"],"names":["demoUsers","username","password","roles","getClassNames","classNamesFunction","styled","theme","styles","useAuthentication","isAuthenticated","principal","login","logout","useForm","handleSubmit","control","errors","formState","React","useState","error","setError","history","useHistory","from","useLocation","state","pathname","getErrorMessage","name","get","classNames","Stack","className","root","tokens","childrenGap","title","horizontal","PrimaryButton","onClick","push","iconProps","iconName","DefaultButton","onSubmit","values","found","find","user","toLocaleLowerCase","Promise","resolve","token","Math","random","displayName","reject","remoteAuthService","then","identity","replace","catch","horizontalAlign","verticalAlign","as","TextField","autoComplete","autoFocus","minLength","maxLength","defaultValue","rules","required","value","message","render","field","label","errorMessage","type","Link","MessageBar","messageBarType","MessageBarType","onDismiss","margin","width","backgroundColor","palette","neutralLighter","padding","spacing","l2","borderRadius","effects","roundedCorner2","fonts","xLargePlus","marginTop"],"mappings":"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","file":"static/js/5.54ea7516.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {\r\n  classNamesFunction,\r\n  DefaultButton,\r\n  Link,\r\n  MessageBar,\r\n  MessageBarType,\r\n  PrimaryButton,\r\n  Stack,\r\n  styled,\r\n  TextField,\r\n} from \"@fluentui/react\";\r\nimport { get } from \"lodash\";\r\nimport { Controller, useForm } from \"react-hook-form\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport { ThemeToggle } from \"global/themes\";\r\nimport { useAuthentication } from \"global/authentication\";\r\n\r\nconst demoUsers = [\r\n  {\r\n    username: \"admin\",\r\n    password: \"admin\",\r\n    roles: [\"admin\"],\r\n  },\r\n  {\r\n    username: \"demo\",\r\n    password: \"demo\",\r\n    roles: [\"user\"],\r\n  },\r\n];\r\n\r\nconst getClassNames = classNamesFunction();\r\n\r\nfunction LoginForm({ theme, styles }) {\r\n  const { isAuthenticated, principal, login, logout } = useAuthentication();\r\n  const {\r\n    handleSubmit,\r\n    control,\r\n    formState: { errors },\r\n  } = useForm();\r\n  const [error, setError] = React.useState();\r\n  const history = useHistory();\r\n  const location = useLocation();\r\n\r\n  const from = location.state?.from || { pathname: \"/\" };\r\n\r\n  function onSubmit(values) {\r\n    setError(null);\r\n    remoteAuthService(values)\r\n      .then((identity) => {\r\n        login(identity);\r\n        history.replace(from);\r\n      })\r\n      .catch(setError);\r\n  }\r\n\r\n  function getErrorMessage(name) {\r\n    return get(errors, name + \".message\");\r\n  }\r\n\r\n  const classNames = getClassNames(styles, { theme });\r\n  return (\r\n    <Stack className={classNames.root}>\r\n      {isAuthenticated && (\r\n        <Stack tokens={{ childrenGap: \"1em\" }}>\r\n          <h3 className={classNames.title}>\r\n            {principal.username}, you are already signed in.\r\n          </h3>\r\n          <Stack horizontal tokens={{ childrenGap: \"1em\" }}>\r\n            <PrimaryButton\r\n              onClick={() => history.push(\"/\")}\r\n              iconProps={{ iconName: \"Home\" }}\r\n            >\r\n              Go to Home\r\n            </PrimaryButton>\r\n            <DefaultButton onClick={logout} iconProps={{ iconName: \"SignOut\" }}>\r\n              Logout\r\n            </DefaultButton>\r\n          </Stack>\r\n        </Stack>\r\n      )}\r\n\r\n      {!isAuthenticated && (\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n          <Stack horizontal horizontalAlign=\"end\" verticalAlign=\"center\">\r\n            <ThemeToggle as={DefaultButton} />\r\n          </Stack>\r\n          <h3 className={classNames.title}>Login</h3>\r\n          <Stack\r\n            tokens={{\r\n              childrenGap: \"1em\",\r\n            }}\r\n          >\r\n            <Controller\r\n              as={TextField}\r\n              control={control}\r\n              autoComplete=\"username\"\r\n              autoFocus\r\n              minLength={3}\r\n              maxLength={32}\r\n              defaultValue=\"\"\r\n              name=\"username\"\r\n              rules={{\r\n                required: \"Please enter your username\",\r\n                minLength: {\r\n                  value: 3,\r\n                  message: \"Please enter your username\",\r\n                },\r\n                maxLength: { value: 32, message: \"Username is too long\" },\r\n              }}\r\n              render={({ field }) => (\r\n                <TextField\r\n                  {...field}\r\n                  label=\"Username\"\r\n                  errorMessage={getErrorMessage(\"username\")}\r\n                />\r\n              )}\r\n            />\r\n\r\n            <Controller\r\n              name=\"password\"\r\n              control={control}\r\n              defaultValue=\"\"\r\n              minLength={4}\r\n              maxLength={64}\r\n              rules={{\r\n                required: \"Please enter your password\",\r\n                minLength: {\r\n                  value: 4,\r\n                  message: \"Please enter your password\",\r\n                },\r\n                maxLength: { value: 64, message: \"Password is too long\" },\r\n              }}\r\n              render={({ field }) => (\r\n                <TextField\r\n                  {...field}\r\n                  label=\"Password\"\r\n                  type=\"password\"\r\n                  autoComplete=\"current-password\"\r\n                  errorMessage={getErrorMessage(\"password\")}\r\n                />\r\n              )}\r\n            />\r\n\r\n            <Stack\r\n              horizontal\r\n              horizontalAlign=\"end\"\r\n              tokens={{ childrenGap: \"1em\" }}\r\n            >\r\n              <Link>Find my password</Link>\r\n              <PrimaryButton type=\"submit\">Login</PrimaryButton>\r\n            </Stack>\r\n            <Stack>\r\n              <h3>Demo users</h3>\r\n              <ul>\r\n                <li>demo/demo</li>\r\n                <li>admin/admin</li>\r\n              </ul>\r\n            </Stack>\r\n            {error && (\r\n              <MessageBar\r\n                messageBarType={MessageBarType.error}\r\n                onDismiss={() => setError(null)}\r\n              >\r\n                {error}\r\n              </MessageBar>\r\n            )}\r\n          </Stack>\r\n        </form>\r\n      )}\r\n    </Stack>\r\n  );\r\n}\r\n\r\nfunction remoteAuthService({ username, password }) {\r\n  const found = demoUsers.find(\r\n    (user) => username.toLocaleLowerCase() === user.username\r\n  );\r\n\r\n  if (found?.password === password) {\r\n    return Promise.resolve({\r\n      username: found.username,\r\n      token: username + \"_\" + Math.random(),\r\n      displayName: found.displayName,\r\n      roles: found.roles,\r\n    });\r\n  } else {\r\n    return Promise.reject(\"Incorrect username or password\");\r\n  }\r\n}\r\n\r\nfunction getStyles({ theme }) {\r\n  return {\r\n    root: {\r\n      margin: \"10em auto\",\r\n      width: \"30em\",\r\n      backgroundColor: theme.palette.neutralLighter,\r\n      padding: theme.spacing.l2,\r\n      borderRadius: theme.effects.roundedCorner2,\r\n    },\r\n    title: {\r\n      ...theme.fonts.xLargePlus,\r\n      marginTop: 0,\r\n    },\r\n  };\r\n}\r\n\r\nexport default styled(LoginForm, getStyles);\r\n"],"sourceRoot":""}